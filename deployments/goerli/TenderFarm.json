{
  "address": "0xd191b5ab188fAcB2c5E9092D7988d94729b15a85",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Farm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unfarm",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        }
      ],
      "name": "availableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "farm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "farmFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "farmWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "contract ITenderToken",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTotalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract ITenderToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitIfNecessary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "setTenderizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCRF",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderizer",
      "outputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unfarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd9ae6514b20b5c1e85c8ece2d0999b9ae56ace9e67223e66524c49bfba624672",
  "receipt": {
    "to": null,
    "from": "0x36716C8C5D1ae680C78bD0ECc230896556399713",
    "contractAddress": "0xd191b5ab188fAcB2c5E9092D7988d94729b15a85",
    "transactionIndex": 84,
    "gasUsed": "983292",
    "logsBloom": "0x
    "blockHash": "0xee604f5f9c8fa81b5ab396a33b3f4b579d3f3d0675f60480feffb29f3d20cf54",
    "transactionHash": "0xd9ae6514b20b5c1e85c8ece2d0999b9ae56ace9e67223e66524c49bfba624672",
    "logs": [],
    "blockNumber": 8490191,
    "cumulativeGasUsed": "21508499",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6c1f2755591cb2b955548a717a368f8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Farm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unfarm\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"availableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"farmFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"farmWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract ITenderToken\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract ITenderToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"setTenderizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCRF\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderizer\",\"outputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unfarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRewards(uint256)\":{\"details\":\"will 'start' a new 'epoch'.only callable by owner.\",\"params\":{\"_amount\":\"amount of reward tokens to add\"}},\"availableRewards(address)\":{\"params\":{\"_for\":\"address address of the account to check rewards for.\"},\"returns\":{\"_0\":\"rewards for the provided account address.\"}},\"farm(uint256)\":{\"details\":\"'_amount' needs to be approved for the 'TenderFarm' to transfer.harvests current rewards before accounting updates are made.\",\"params\":{\"_amount\":\"amount of liquidity pool tokens to stake\"}},\"farmFor(address,uint256)\":{\"details\":\"'_amount' needs to be approved for the 'TenderFarm' to transfer.staked tokens will belong to the account they are staked for.harvests current rewards before accounting updates are made.\",\"params\":{\"_amount\":\"amount of liquidity pool tokens to stake\",\"_for\":\"account to stake for\"}},\"farmWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"'_amount' needs to be approved for the 'TenderFarm' to transfer.harvests current rewards before accounting updates are made.calls permit on LP Token.\",\"params\":{\"_amount\":\"amount of liquidity pool tokens to stake\",\"_deadline\":\"deadline of the permit\",\"_r\":\"r of signed Permit message\",\"_s\":\"s of signed Permit message\",\"_v\":\"v of signed Permit message\"}},\"harvest()\":{\"details\":\"reverts when trying to harvest multiple times if no new rewards have been added.emits an event with how many reward tokens have been harvested.\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"_deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_token\":\"The address of the token spent\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"_value\":\"The amount that can be spent of token\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"_deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_token\":\"The address of the token spent\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"_value\":\"The amount that can be spent of token\"}},\"setTenderizer(address)\":{\"params\":{\"_tenderizer\":\"address of the new tenderizer\"}},\"stakeOf(address)\":{\"params\":{\"_of\":\"address address of the account to check stake for.\"},\"returns\":{\"_0\":\"LP tokens deposited for address\"}},\"unfarm(uint256)\":{\"details\":\"'_amount' needs to be approved for the 'TenderFarm' to transfer.harvests current rewards before accounting updates are made.\",\"params\":{\"amount\":\"amount of liquidity pool tokens to stake\"}}},\"stateVariables\":{\"CRF\":{\"details\":\"Cumulative reward factor\"},\"nextTotalStake\":{\"return\":\"nextStake LP Tokens staked for next round\",\"returns\":{\"_0\":\"nextStake LP Tokens staked for next round\"}},\"rewardToken\":{\"details\":\"Tender token.\"},\"stakes\":{\"details\":\"stake mapping of each address\"},\"tenderizer\":{\"details\":\"tenderizer.\"},\"token\":{\"details\":\"LP token.\"},\"totalStake\":{\"return\":\"stake total amount of LP tokens staked\",\"returns\":{\"_0\":\"stake total amount of LP tokens staked\"}}},\"title\":\"TenderFarm\",\"version\":1},\"userdoc\":{\"events\":{\"Farm(address,uint256)\":{\"notice\":\"Farm gets emitted when an account stakes LP tokens.\"},\"Harvest(address,uint256)\":{\"notice\":\"Harvest gets emitted when an accounts harvests outstanding rewards.\"},\"RewardsAdded(uint256)\":{\"notice\":\"RewardsAdded gets emitted when new rewards are added and a new epoch begins\"},\"Unfarm(address,uint256)\":{\"notice\":\"Unfarm gets emitted when an account unstakes LP tokens.\"}},\"kind\":\"user\",\"methods\":{\"addRewards(uint256)\":{\"notice\":\"add new rewards\"},\"availableRewards(address)\":{\"notice\":\"Check available rewards for an account.\"},\"farm(uint256)\":{\"notice\":\"stake liquidity pool tokens to receive rewards\"},\"farmFor(address,uint256)\":{\"notice\":\"stake liquidity pool tokens for a specific account so that it receives rewards\"},\"farmWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"allow spending token and stake liquidity pool tokens to receive rewards\"},\"harvest()\":{\"notice\":\"harvest outstanding rewards\"},\"nextTotalStake()\":{\"notice\":\"Return the total amount of LP tokens staked for the next reward epoch.\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"setTenderizer(address)\":{\"notice\":\"Changes the tenderizer of the contract\"},\"stakeOf(address)\":{\"notice\":\"Check stake for an account.\"},\"totalStake()\":{\"notice\":\"Return the total amount of LP tokens staked in this farm.\"},\"unfarm(uint256)\":{\"notice\":\"unstake liquidity pool tokens\"}},\"notice\":\"TenderFarm is responsible for incetivizing liquidity providers, by accepting LP Tokens and a proportionaly rewarding them with TenderTokens over time.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tenderfarm/TenderFarm.sol\":\"TenderFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"contracts/helpers/SelfPermit.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param _token The address of the token spent\\n    /// @param _value The amount that can be spent of token\\n    /// @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param _token The address of the token spent\\n    /// @param _value The amount that can be spent of token\\n    /// @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable;\\n}\\n\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public payable override {\\n        IERC20Permit(_token).permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable override {\\n        uint256 allowance = IERC20(_token).allowance(msg.sender, address(this));\\n        if (allowance < _value) selfPermit(_token, _value - allowance, _deadline, _v, _r, _s);\\n    }\\n}\\n\",\"keccak256\":\"0x1247853b1c8a9faf19744ffd3667dd08834e88acd3389e6574da813bbd365607\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x4788b5ca1f6a1c34febfd25857b95e4c6c5494e2e062c820552ebaed21ae856b\",\"license\":\"MIT\"},\"contracts/tenderfarm/ITenderFarm.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ITenderToken.sol\\\";\\nimport \\\"../tenderizer/ITenderizer.sol\\\";\\n\\n/**\\n * @title TenderFarm\\n * @notice TenderFarm is responsible for incetivizing liquidity providers, by accepting LP Tokens\\n * and a proportionaly rewarding them with TenderTokens over time.\\n */\\ninterface ITenderFarm {\\n    /**\\n     * @notice Farm gets emitted when an account stakes LP tokens.\\n     * @param account the account for which LP tokens were staked\\n     * @param amount the amount of LP tokens staked\\n     */\\n    event Farm(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice Unfarm gets emitted when an account unstakes LP tokens.\\n     * @param account the account for which LP tokens were unstaked\\n     * @param amount the amount of LP tokens unstaked\\n     */\\n    event Unfarm(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice Harvest gets emitted when an accounts harvests outstanding\\n     * rewards.\\n     * @param account the account which harvested rewards\\n     * @param amount the amount of rewards harvested\\n     */\\n    event Harvest(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice RewardsAdded gets emitted when new rewards are added\\n     * and a new epoch begins\\n     * @param amount amount of rewards that were addedd\\n     */\\n    event RewardsAdded(uint256 amount);\\n\\n    function initialize(\\n        IERC20 _stakeToken,\\n        ITenderToken _rewardToken,\\n        ITenderizer _tenderizer\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice stake liquidity pool tokens to receive rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @param _amount amount of liquidity pool tokens to stake\\n     */\\n    function farm(uint256 _amount) external;\\n\\n    /**\\n     * @notice allow spending token and stake liquidity pool tokens to receive rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @dev calls permit on LP Token.\\n     * @param _amount amount of liquidity pool tokens to stake\\n     * @param _deadline deadline of the permit\\n     * @param _v v of signed Permit message\\n     * @param _r r of signed Permit message\\n     * @param _s s of signed Permit message\\n     */\\n    function farmWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /**\\n     * @notice stake liquidity pool tokens for a specific account so that it receives rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev staked tokens will belong to the account they are staked for.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @param _for account to stake for\\n     * @param _amount amount of liquidity pool tokens to stake\\n     */\\n    function farmFor(address _for, uint256 _amount) external;\\n\\n    /**\\n     * @notice unstake liquidity pool tokens\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @param amount amount of liquidity pool tokens to stake\\n     */\\n    function unfarm(uint256 amount) external;\\n\\n    /**\\n     * @notice harvest outstanding rewards\\n     * @dev reverts when trying to harvest multiple times if no new rewards have been added.\\n     * @dev emits an event with how many reward tokens have been harvested.\\n     */\\n    function harvest() external;\\n\\n    /**\\n     * @notice add new rewards\\n     * @dev will 'start' a new 'epoch'.\\n     * @dev only callable by owner.\\n     * @param _amount amount of reward tokens to add\\n     */\\n    function addRewards(uint256 _amount) external;\\n\\n    /**\\n     * @notice Check available rewards for an account.\\n     * @param _for address address of the account to check rewards for.\\n     * @return amount rewards for the provided account address.\\n     */\\n    function availableRewards(address _for) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Check stake for an account.\\n     * @param _of address address of the account to check stake for.\\n     * @return amount LP tokens deposited for address\\n     */\\n    function stakeOf(address _of) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Return the total amount of LP tokens staked in this farm.\\n     * @return stake total amount of LP tokens staked\\n     */\\n    function totalStake() external view returns (uint256 stake);\\n\\n    /**\\n     * @notice Return the total amount of LP tokens staked\\n     * for the next reward epoch.\\n     * @return nextStake LP Tokens staked for next round\\n     */\\n    function nextTotalStake() external view returns (uint256 nextStake);\\n\\n    /**\\n     * @notice Changes the tenderizer of the contract\\n     * @param _tenderizer address of the new tenderizer\\n     */\\n    function setTenderizer(ITenderizer _tenderizer) external;\\n}\\n\",\"keccak256\":\"0xa555bf328cd25dbb4923a69fc9bba78fec03e1e5d83b526883fd6e4e66847369\",\"license\":\"MIT\"},\"contracts/tenderfarm/TenderFarm.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../libs/MathUtils.sol\\\";\\nimport \\\"../token/ITenderToken.sol\\\";\\nimport \\\"./ITenderFarm.sol\\\";\\nimport \\\"../tenderizer/ITenderizer.sol\\\";\\nimport \\\"../helpers/SelfPermit.sol\\\";\\n\\n/**\\n * @title TenderFarm\\n * @notice TenderFarm is responsible for incetivizing liquidity providers, by accepting LP Tokens\\n * and a proportionaly rewarding them with TenderTokens over time.\\n */\\ncontract TenderFarm is Initializable, ITenderFarm, SelfPermit {\\n    /**\\n     * @dev LP token.\\n     */\\n    IERC20 public token;\\n\\n    /**\\n     * @dev Tender token.\\n     */\\n    ITenderToken public rewardToken;\\n\\n    /**\\n     * @dev tenderizer.\\n     */\\n    ITenderizer public tenderizer;\\n\\n    /// @inheritdoc ITenderFarm\\n    uint256 public override totalStake;\\n\\n    /// @inheritdoc ITenderFarm\\n    uint256 public override nextTotalStake;\\n\\n    /**\\n     * @dev Cumulative reward factor\\n     */\\n    uint256 public CRF;\\n\\n    struct Stake {\\n        uint256 stake;\\n        uint256 lastCRF;\\n    }\\n\\n    /**\\n     * @dev stake mapping of each address\\n     */\\n    mapping(address => Stake) public stakes;\\n\\n    function initialize(\\n        IERC20 _stakeToken,\\n        ITenderToken _rewardToken,\\n        ITenderizer _tenderizer\\n    ) external override initializer returns (bool) {\\n        token = _stakeToken;\\n        rewardToken = _rewardToken;\\n        tenderizer = _tenderizer;\\n\\n        return true;\\n    }\\n\\n    modifier onlyTenderizer() {\\n        require(msg.sender == address(tenderizer));\\n        _;\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function farm(uint256 _amount) external override {\\n        _farmFor(msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function farmWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        selfPermit(address(token), _amount, _deadline, _v, _r, _s);\\n        _farmFor(msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function farmFor(address _for, uint256 _amount) external override {\\n        _farmFor(_for, _amount);\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function unfarm(uint256 _amount) external override {\\n        _unfarm(msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function harvest() external override {\\n        _harvest(msg.sender);\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function addRewards(uint256 _amount) external override onlyTenderizer {\\n        uint256 _nextStake = nextTotalStake;\\n        require(_nextStake > 0, \\\"NO_STAKE\\\");\\n        totalStake = _nextStake;\\n        uint256 shares = rewardToken.tokensToShares(_amount);\\n        CRF += MathUtils.percPoints(shares, _nextStake);\\n        require(rewardToken.transferFrom(msg.sender, address(this), _amount), \\\"TRANSFER_FAILED\\\");\\n        emit RewardsAdded(_amount);\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function availableRewards(address _for) external view override returns (uint256) {\\n        return rewardToken.sharesToTokens(_availableRewardShares(_for));\\n    }\\n\\n    /// @inheritdoc ITenderFarm\\n    function stakeOf(address _of) external view override returns (uint256) {\\n        return _stakeOf(_of);\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _farmFor(address _for, uint256 _amount) internal {\\n        _harvest(_for);\\n\\n        stakes[_for].stake += _amount;\\n        nextTotalStake += _amount;\\n\\n        require(token.transferFrom(msg.sender, address(this), _amount), \\\"TRANSFERFROM_FAIL\\\");\\n\\n        emit Farm(_for, _amount);\\n    }\\n\\n    function _unfarm(address _for, uint256 _amount) internal {\\n        Stake storage _stake = stakes[_for];\\n        require(_amount <= _stake.stake, \\\"AMOUNT_EXCEEDS_STAKE\\\");\\n\\n        _harvest(_for);\\n\\n        _stake.stake -= _amount;\\n        nextTotalStake -= _amount;\\n\\n        require(token.transfer(_for, _amount), \\\"TRANSFER_FAIL\\\");\\n        emit Unfarm(_for, _amount);\\n    }\\n\\n    function _harvest(address _for) internal {\\n        Stake storage _stake = stakes[_for];\\n\\n        // Calculate available rewards\\n        uint256 rewards = _availableRewardShares(_for);\\n\\n        // Checkpoint CRF\\n        _stake.lastCRF = CRF;\\n\\n        if (rewards > 0) {\\n            uint256 rewardTokens = rewardToken.sharesToTokens(rewards);\\n            require(rewardToken.transfer(_for, rewardTokens), \\\"TRANSFER_FAIL\\\");\\n            emit Harvest(_for, rewardTokens);\\n        }\\n    }\\n\\n    function _availableRewardShares(address _for) internal view returns (uint256) {\\n        Stake storage _stake = stakes[_for];\\n\\n        if (CRF == 0) return 0;\\n\\n        return MathUtils.percOf(_stake.stake, CRF - _stake.lastCRF);\\n    }\\n\\n    function _stakeOf(address _of) internal view returns (uint256) {\\n        return stakes[_of].stake;\\n    }\\n\\n    function setTenderizer(ITenderizer _tenderizer) external override onlyTenderizer {\\n        tenderizer = _tenderizer;\\n    }\\n}\\n\",\"keccak256\":\"0x819acb0b1918bf435a7e6466f47a29ce3e52246f7f9388cd36977bf434b58c2a\",\"license\":\"MIT\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../tenderfarm/ITenderFarm.sol\\\";\\n\\nenum GovernanceParameter {\\n    GOV,\\n    NODE,\\n    STEAK,\\n    PROTOCOL_FEE,\\n    LIQUIDITY_FEE,\\n    TENDERFARM,\\n    STAKING_CONTRACT\\n}\\n\\n/**\\n * @title Tenderizer is the base contract to be implemented.\\n * @notice Tenderizer is responsible for all Protocol interactions (staking, unstaking, claiming rewards)\\n * while also keeping track of user depsotis/withdrawals and protocol fees.\\n * @dev New implementations are required to inherit this contract and override any required internal functions.\\n */\\ninterface ITenderizer {\\n    // Events\\n\\n    /**\\n     * @notice Deposit gets emitted when an accounts deposits underlying tokens.\\n     * @param from the account that deposited\\n     * @param amount the amount of tokens deposited\\n     */\\n    event Deposit(address indexed from, uint256 amount);\\n\\n    /**\\n     * @notice Stake gets emitted when funds are staked/delegated from the Tenderizer contract\\n     * into the underlying protocol.\\n     * @param node the address the funds are staked to\\n     * @param amount the amount staked\\n     */\\n    event Stake(address indexed node, uint256 amount);\\n\\n    /**\\n     * @notice Unstake gets emitted when an account burns TenderTokens to unlock\\n     * tokens staked through the Tenderizer\\n     * @param from the account that unstaked\\n     * @param node the node in the underlying token from which tokens are unstaked\\n     * @param amount the amount unstaked\\n     */\\n    event Unstake(address indexed from, address indexed node, uint256 amount, uint256 unstakeLockID);\\n\\n    /**\\n     * @notice Withdraw gets emitted when an account withdraws tokens that have been\\n     * succesfully unstaked and thus unlocked for withdrawal.\\n     * @param from the account withdrawing tokens\\n     * @param amount the amount being withdrawn\\n     * @param unstakeLockID the unstake lock ID being consumed\\n     */\\n    event Withdraw(address indexed from, uint256 amount, uint256 unstakeLockID);\\n\\n    /**\\n     * @notice RewardsClaimed gets emitted when the Tenderizer processes staking rewards (or slashing)\\n     * from the underlying protocol.\\n     * @param stakeDiff the stake difference since the last event, can be negative in case slashing occured\\n     * @param currentPrincipal TVL after claiming rewards\\n     * @param oldPrincipal TVL before claiming rewards\\n     */\\n    event RewardsClaimed(int256 stakeDiff, uint256 currentPrincipal, uint256 oldPrincipal);\\n\\n    /**\\n     * @notice ProtocolFeeCollected gets emitted when the treasury claims its outstanding\\n     * protocol fees.\\n     * @param amount the amount of fees claimed (in TenderTokens)\\n     */\\n    event ProtocolFeeCollected(uint256 amount);\\n\\n    /**\\n     * @notice LiquidityFeeCollected gets emitted when liquidity provider fees are moved to the TenderFarm.\\n     * @param amount the amount of fees moved for farming\\n     */\\n    event LiquidityFeeCollected(uint256 amount);\\n\\n    /**\\n     * @notice GovernanceUpdate gets emitted when a parameter on the Tenderizer gets updated.\\n     * @param param the parameter that got updated\\n     * @param oldValue oldValue of the parameter\\n      @param newValue newValue of the parameter\\n     */\\n    event GovernanceUpdate(GovernanceParameter param, bytes oldValue, bytes newValue);\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer.\\n     * @param _amount amount deposited\\n     * @dev doesn't actually stakes the tokens but aggregates the balance in the tenderizer\\n     * awaiting to be staked.\\n     * @dev requires '_amount' to be approved by '_from'.\\n     */\\n    function deposit(uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer with permit.\\n     * @param _amount amount deposited\\n     * @param _deadline deadline for the permit\\n     * @param _v from ECDSA signature\\n     * @param _r from ECDSA signature\\n     * @param _s from ECDSA signature\\n     * @dev doesn't actually stakes the tokens but aggregates the balance in the tenderizer\\n     * awaiting to be staked.\\n     * @dev requires '_amount' to be approved by '_from'.\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /**\\n     * @notice Stake '_amount' of tokens.\\n     * @param _amount amount to stake\\n     * @dev Only callable by Gov.\\n     */\\n    function stake(uint256 _amount) external;\\n\\n    /**\\n     * @notice Unstake '_amount' of tokens from '_account'.\\n     * @param _amount amount to unstake\\n     * @return unstakeLockID unstake lockID generated for unstake\\n     * @dev unstake from the default address.\\n     * @dev If '_amount' is 0, unstake the entire amount staked towards _account.\\n     */\\n    function unstake(uint256 _amount) external returns (uint256 unstakeLockID);\\n\\n    /**\\n     * @notice RescueUnstake unstakes all tokens from underlying protocol\\n     * @return unstakeLockID unstake lockID generated for unstake\\n     * @dev Used to rescue all staked funds.\\n     */\\n    function rescueUnlock() external returns (uint256 unstakeLockID);\\n\\n    /**\\n     * @notice Withdraw '_amount' of tokens previously unstaked by '_account'.\\n     * @param _unstakeLockID ID for the lock to request the withdraw for\\n     * @dev If '_amount' isn't specified all unstake tokens by '_account' will be withdrawn.\\n     * @dev Requires '_account' to have unstaked prior to calling withdraw.\\n     */\\n    function withdraw(uint256 _unstakeLockID) external;\\n\\n    /**\\n     * @notice RescueWithdraw withdraws all tokens into the Tenderizer from the underlying protocol\\n     * after the unlock period ends\\n     * @dev To be called after rescueUnlock() with the unstakeLockID returned there.\\n     * @dev Process unlocks/withdrawals before rescueWithdraw for integrations with WithdrawPools.\\n     */\\n    function rescueWithdraw(uint256 _unstakeLockID) external;\\n\\n    /**\\n     * @notice Compound all the rewards and new deposits.\\n     * Claim staking rewards and earned fees for the underlying protocol and stake\\n     * any leftover token balance. Process Tender protocol fees if revenue is positive.\\n     */\\n    function claimRewards() external;\\n\\n    /**\\n     * @notice Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\\n     * @return totalStaked total amount staked by this Tenderizer\\n     */\\n    function totalStakedTokens() external view returns (uint256 totalStaked);\\n\\n    /**\\n     * @notice Returns the number of tenderTokens to be minted for amountIn deposit.\\n     * @return depositOut number of tokens staked for `amountIn`.\\n     * @dev used by controller to calculate tokens to be minted before depositing.\\n     * @dev to be used when there a delegation tax is deducted, for eg. in Graph.\\n     */\\n    function calcDepositOut(uint256 _amountIn) external returns (uint256 depositOut);\\n\\n    // Governance setter funtions\\n\\n    function setGov(address _gov) external;\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n\\n    function setTenderFarm(ITenderFarm _tenderFarm) external;\\n}\\n\",\"keccak256\":\"0xb8100e8d9b713e9869515362abc49e49dbfe8a0c11f3a6fa9dc0e7e1cca1de8d\",\"license\":\"MIT\"},\"contracts/tenderizer/ITotalStakedReader.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ITotalStakedReader {\\n    /**\\n     * @notice Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\\n     * @return _totalStakedTokens total amount staked by this Tenderizer\\n     */\\n    function totalStakedTokens() external view returns (uint256 _totalStakedTokens);\\n}\\n\",\"keccak256\":\"0x134a07faf2487ca55c05288c5d09e611ab5f9fde0d0635c790055bd28ffc5e0c\",\"license\":\"MIT\"},\"contracts/token/ITenderToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../tenderizer/ITotalStakedReader.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for Tenderize protocol.\\n * @author Tenderize <info@tenderize.me>\\n * @dev TenderToken balances are dynamic and are calculated based on the accounts' shares\\n * and the total amount of Tokens controlled by the protocol. Account shares aren't\\n * normalized, so the contract also stores the sum of all shares to calculate\\n * each account's token balance which equals to:\\n *\\n * shares[account] * _getTotalPooledTokens() / _getTotalShares()\\n */\\ninterface ITenderToken {\\n    /**\\n     * @notice Initilize the TenderToken Contract\\n     * @param _name name of the token (steak)\\n     * @param _symbol symbol of the token (steak)\\n     * @param _stakedReader contract address implementing the ITotalStakedReader interface\\n     * @return a boolean value indicating whether the init succeeded.\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        ITotalStakedReader _stakedReader\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice The number of decimals the TenderToken uses.\\n     * @return decimals the number of decimals for getting user representation of a token amount.\\n     */\\n    function decimals() external pure returns (uint8);\\n\\n    /**\\n     * @notice The total supply of tender tokens in existence.\\n     * @dev Always equals to `_getTotalPooledTokens()` since token amount\\n     * is pegged to the total amount of Tokens controlled by the protocol.\\n     * @return totalSupply total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Total amount of underlying tokens controlled by the Tenderizer.\\n     * @dev The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.\\n     * @return totalPooledTokens total amount of pooled tokens\\n     */\\n    function getTotalPooledTokens() external view returns (uint256);\\n\\n    /**\\n     * @notice The total amount of shares in existence.\\n     * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n     * it is necessary to store it in order to calculate each account's relative share.\\n     * @return totalShares total amount of shares\\n     */\\n    function getTotalShares() external view returns (uint256);\\n\\n    /**\\n     * @notice the amount of tokens owned by the `_account`.\\n     * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n        total Tokens controlled by the protocol. See `sharesOf`.\\n     * @param _account address of the account to check the balance for\\n     * @return balance token balance of `_account`\\n     */\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of shares owned by an account\\n     * @param _account address of the account\\n     * @return shares the amount of shares owned by `_account`.\\n     */\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice The remaining number of tokens that `_spender` is allowed to spend\\n     * behalf of `_owner` through `transferFrom`. This is zero by default.\\n     * @dev This value changes when `approve` or `transferFrom` is called.\\n     * @param _owner address that approved the allowance\\n     * @param _spender address that is allowed to spend the allowance\\n     * @return allowance amount '_spender' is allowed to spend from '_owner'\\n     */\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of shares that corresponds to `_tokens` protocol-controlled Tokens.\\n     * @param _tokens amount of tokens to calculate shares for\\n     * @return shares nominal amount of shares the tokens represent\\n     */\\n    function tokensToShares(uint256 _tokens) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of tokens that corresponds to `_shares` token shares.\\n     * @param _shares the amount of shares to calculate the amount of tokens for\\n     * @return tokens the amount of tokens represented by the shares\\n     */\\n    function sharesToTokens(uint256 _shares) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from the caller's account to the `_recipient` account.\\n     * @param _recipient address of the recipient\\n     * @param _amount amount of tokens to transfer\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Requirements:\\n     * - `_recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _amount amount of tokens to allow '_spender' to spend\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits an `Approval` event.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the zero address.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from `_sender` to `_recipient` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's allowance.\\n     * @param _sender address of the account to transfer tokens from\\n     * @param _recipient address of the recipient\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_sender` and `_recipient` cannot be the zero addresses.\\n     * - `_sender` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_sender`'s tokens of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _addedValue amount to add to allowance\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n\\n    /**\\n     * @notice Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _subtractedValue amount to subtract from current allowance\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the zero address.\\n     * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n\\n    /**\\n     * @notice Mints '_amount' of tokens for '_recipient'\\n     * @param _recipient address to mint tokens for\\n     * @param _amount amount to mint\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to create based on the specified '_amount'\\n     * and creates new shares rather than minting actual tokens\\n     * @dev '_recipient' should also deposit into Tenderizer\\n     * atomically to prevent diluation of existing particpants\\n     */\\n    function mint(address _recipient, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Burns '_amount' of tokens from '_recipient'\\n     * @param _account address to burn the tokens from\\n     * @param _amount amount to burn\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to destroy based on the specified '_amount'\\n     * and destroy shares rather than burning tokens\\n     * @dev '_recipient' should also withdraw from Tenderizer atomically\\n     */\\n    function burn(address _account, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice sets a TotalStakedReader to read the total staked tokens from\\n     * @param _stakedReader contract address implementing the ITotalStakedReader interface\\n     * @dev Only callable by contract owner.\\n     * @dev Used to determine TenderToken total supply.\\n     */\\n    function setTotalStakedReader(ITotalStakedReader _stakedReader) external;\\n}\\n\",\"keccak256\":\"0x8ded75ce98c4c0c99d5db628244e93f856900ed730b7164476f2b41da9d2a09d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80638b0e9f3f116100a0578063f3995c6711610064578063f3995c6714610309578063f7c618c11461031c578063f854a27f1461033c578063fa827a841461035c578063fc0c546a1461037c57600080fd5b80638b0e9f3f1461027a5780638ebed61614610290578063beceed39146102a6578063c0c53b8b146102c6578063c2e3140a146102f657600080fd5b806342623360116100e757806342623360146101cd5780634641257d146101ed578063538a85a1146102025780635b3e2077146102225780635d1cf7b51461025a57600080fd5b806304c834271461011957806304d3b7c41461013b57806316934fc4146101645780631c885bae146101ad575b600080fd5b34801561012557600080fd5b50610139610134366004610e85565b6103a2565b005b34801561014757600080fd5b5061015160045481565b6040519081526020015b60405180910390f35b34801561017057600080fd5b5061019861017f366004610e85565b6006602052600090815260409020805460019091015482565b6040805192835260208301919091520161015b565b3480156101b957600080fd5b506101396101c8366004610f8f565b6103db565b3480156101d957600080fd5b506101516101e8366004610e85565b6103e8565b3480156101f957600080fd5b50610139610408565b34801561020e57600080fd5b5061013961021d366004610f8f565b610413565b34801561022e57600080fd5b50600254610242906001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b34801561026657600080fd5b50610139610275366004610ea1565b61041d565b34801561028657600080fd5b5061015160035481565b34801561029c57600080fd5b5061015160055481565b3480156102b257600080fd5b506101396102c1366004610f8f565b61042b565b3480156102d257600080fd5b506102e66102e1366004610f45565b610626565b604051901515815260200161015b565b610139610304366004610ecc565b610732565b610139610317366004610ecc565b6107dc565b34801561032857600080fd5b50600154610242906001600160a01b031681565b34801561034857600080fd5b50610151610357366004610e85565b610868565b34801561036857600080fd5b50610139610377366004610fbf565b6108f3565b34801561038857600080fd5b50600054610242906201000090046001600160a01b031681565b6002546001600160a01b031633146103b957600080fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6103e53382610924565b50565b6001600160a01b0381166000908152600660205260408120545b92915050565b61041133610ad0565b565b6103e53382610c8d565b6104278282610c8d565b5050565b6002546001600160a01b0316331461044257600080fd5b600454806104825760405162461bcd60e51b81526020600482015260086024820152674e4f5f5354414b4560c01b60448201526064015b60405180910390fd5b600381905560015460405163f3044ac760e01b8152600481018490526000916001600160a01b03169063f3044ac79060240160206040518083038186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105049190610fa7565b90506105108183610df2565b600560008282546105219190611005565b90915550506001546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561057857600080fd5b505af115801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190610f25565b6105ee5760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610479565b6040518381527ff8fad42e780bfa5459be3fe691e8ba1aec70342250112139c5771c3fd155f3129060200160405180910390a1505050565b60008054610100900460ff1680610640575060005460ff16155b6106a35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610479565b600054610100900460ff161580156106c5576000805461ffff19166101011790555b600080546001600160a01b03808816620100000262010000600160b01b031990921691909117909155600180548683166001600160a01b03199182161782556002805493871693909116929092179091559150801561072a576000805461ff00191690555b509392505050565b604051636eb1769f60e11b81523360048201523060248201526000906001600160a01b0388169063dd62ed3e9060440160206040518083038186803b15801561077a57600080fd5b505afa15801561078e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b29190610fa7565b9050858110156107d3576107d3876107ca838961105c565b878787876107dc565b50505050505050565b60405163d505accf60e01b8152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290526001600160a01b0387169063d505accf9060e401600060405180830381600087803b15801561084857600080fd5b505af115801561085c573d6000803e3d6000fd5b50505050505050505050565b6001546000906001600160a01b03166327def4fd61088584610e19565b6040518263ffffffff1660e01b81526004016108a391815260200190565b60206040518083038186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104029190610fa7565b600054610913906201000090046001600160a01b031686868686866107dc565b61091d3386610c8d565b5050505050565b6001600160a01b038216600090815260066020526040902080548211156109845760405162461bcd60e51b8152602060048201526014602482015273414d4f554e545f455843454544535f5354414b4560601b6044820152606401610479565b61098d83610ad0565b818160000160008282546109a1919061105c565b9250508190555081600460008282546109ba919061105c565b909155505060005460405163a9059cbb60e01b81526001600160a01b03858116600483015260248201859052620100009092049091169063a9059cbb90604401602060405180830381600087803b158015610a1457600080fd5b505af1158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190610f25565b610a885760405162461bcd60e51b815260206004820152600d60248201526c1514905394d1915497d1905253609a1b6044820152606401610479565b826001600160a01b03167f20257c99a1831ee05678eabb34e57a99bf067b4a5e2cb2d5559ea0a23f65518d83604051610ac391815260200190565b60405180910390a2505050565b6001600160a01b038116600090815260066020526040812090610af283610e19565b600554600184015590508015610c88576001546040516327def4fd60e01b8152600481018390526000916001600160a01b0316906327def4fd9060240160206040518083038186803b158015610b4757600080fd5b505afa158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f9190610fa7565b60015460405163a9059cbb60e01b81526001600160a01b0387811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b158015610bcf57600080fd5b505af1158015610be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c079190610f25565b610c435760405162461bcd60e51b815260206004820152600d60248201526c1514905394d1915497d1905253609a1b6044820152606401610479565b836001600160a01b03167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba82604051610c7e91815260200190565b60405180910390a2505b505050565b610c9682610ad0565b6001600160a01b03821660009081526006602052604081208054839290610cbe908490611005565b925050819055508060046000828254610cd79190611005565b90915550506000546040516323b872dd60e01b815233600482015230602482015260448101839052620100009091046001600160a01b0316906323b872dd90606401602060405180830381600087803b158015610d3357600080fd5b505af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190610f25565b610dab5760405162461bcd60e51b81526020600482015260116024820152701514905394d19154919493d357d1905253607a1b6044820152606401610479565b816001600160a01b03167f1b359373bd6268b2ceac132cf22673d4f046a13deb2e7980f81baabf1b4d72f782604051610de691815260200190565b60405180910390a25050565b600081610e08683635c9adc5dea000008561103d565b610e12919061101d565b9392505050565b6001600160a01b0381166000908152600660205260408120600554610e415750600092915050565b80546001820154600554610e129291610e599161105c565b6000683635c9adc5dea00000610e08838561103d565b803560ff81168114610e8057600080fd5b919050565b600060208284031215610e96578081fd5b8135610e1281611089565b60008060408385031215610eb3578081fd5b8235610ebe81611089565b946020939093013593505050565b60008060008060008060c08789031215610ee4578182fd5b8635610eef81611089565b95506020870135945060408701359350610f0b60608801610e6f565b92506080870135915060a087013590509295509295509295565b600060208284031215610f36578081fd5b81518015158114610e12578182fd5b600080600060608486031215610f59578283fd5b8335610f6481611089565b92506020840135610f7481611089565b91506040840135610f8481611089565b809150509250925092565b600060208284031215610fa0578081fd5b5035919050565b600060208284031215610fb8578081fd5b5051919050565b600080600080600060a08688031215610fd6578081fd5b8535945060208601359350610fed60408701610e6f565b94979396509394606081013594506080013592915050565b6000821982111561101857611018611073565b500190565b60008261103857634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561105757611057611073565b500290565b60008282101561106e5761106e611073565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146103e557600080fdfea264697066735822122023550da00a7b6aca549c952cdfdcc1b97cac7ffe612af0f133c4629fab044bc764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRewards(uint256)": {
        "details": "will 'start' a new 'epoch'.only callable by owner.",
        "params": {
          "_amount": "amount of reward tokens to add"
        }
      },
      "availableRewards(address)": {
        "params": {
          "_for": "address address of the account to check rewards for."
        },
        "returns": {
          "_0": "rewards for the provided account address."
        }
      },
      "farm(uint256)": {
        "details": "'_amount' needs to be approved for the 'TenderFarm' to transfer.harvests current rewards before accounting updates are made.",
        "params": {
          "_amount": "amount of liquidity pool tokens to stake"
        }
      },
      "farmFor(address,uint256)": {
        "details": "'_amount' needs to be approved for the 'TenderFarm' to transfer.staked tokens will belong to the account they are staked for.harvests current rewards before accounting updates are made.",
        "params": {
          "_amount": "amount of liquidity pool tokens to stake",
          "_for": "account to stake for"
        }
      },
      "farmWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "'_amount' needs to be approved for the 'TenderFarm' to transfer.harvests current rewards before accounting updates are made.calls permit on LP Token.",
        "params": {
          "_amount": "amount of liquidity pool tokens to stake",
          "_deadline": "deadline of the permit",
          "_r": "r of signed Permit message",
          "_s": "s of signed Permit message",
          "_v": "v of signed Permit message"
        }
      },
      "harvest()": {
        "details": "reverts when trying to harvest multiple times if no new rewards have been added.emits an event with how many reward tokens have been harvested."
      },
      "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "The `owner` is always msg.sender and the `spender` is always address(this).",
        "params": {
          "_deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_token": "The address of the token spent",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
          "_value": "The amount that can be spent of token"
        }
      },
      "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
        "params": {
          "_deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_token": "The address of the token spent",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
          "_value": "The amount that can be spent of token"
        }
      },
      "setTenderizer(address)": {
        "params": {
          "_tenderizer": "address of the new tenderizer"
        }
      },
      "stakeOf(address)": {
        "params": {
          "_of": "address address of the account to check stake for."
        },
        "returns": {
          "_0": "LP tokens deposited for address"
        }
      },
      "unfarm(uint256)": {
        "details": "'_amount' needs to be approved for the 'TenderFarm' to transfer.harvests current rewards before accounting updates are made.",
        "params": {
          "amount": "amount of liquidity pool tokens to stake"
        }
      }
    },
    "stateVariables": {
      "CRF": {
        "details": "Cumulative reward factor"
      },
      "nextTotalStake": {
        "return": "nextStake LP Tokens staked for next round",
        "returns": {
          "_0": "nextStake LP Tokens staked for next round"
        }
      },
      "rewardToken": {
        "details": "Tender token."
      },
      "stakes": {
        "details": "stake mapping of each address"
      },
      "tenderizer": {
        "details": "tenderizer."
      },
      "token": {
        "details": "LP token."
      },
      "totalStake": {
        "return": "stake total amount of LP tokens staked",
        "returns": {
          "_0": "stake total amount of LP tokens staked"
        }
      }
    },
    "title": "TenderFarm",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Farm(address,uint256)": {
        "notice": "Farm gets emitted when an account stakes LP tokens."
      },
      "Harvest(address,uint256)": {
        "notice": "Harvest gets emitted when an accounts harvests outstanding rewards."
      },
      "RewardsAdded(uint256)": {
        "notice": "RewardsAdded gets emitted when new rewards are added and a new epoch begins"
      },
      "Unfarm(address,uint256)": {
        "notice": "Unfarm gets emitted when an account unstakes LP tokens."
      }
    },
    "kind": "user",
    "methods": {
      "addRewards(uint256)": {
        "notice": "add new rewards"
      },
      "availableRewards(address)": {
        "notice": "Check available rewards for an account."
      },
      "farm(uint256)": {
        "notice": "stake liquidity pool tokens to receive rewards"
      },
      "farmFor(address,uint256)": {
        "notice": "stake liquidity pool tokens for a specific account so that it receives rewards"
      },
      "farmWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "allow spending token and stake liquidity pool tokens to receive rewards"
      },
      "harvest()": {
        "notice": "harvest outstanding rewards"
      },
      "nextTotalStake()": {
        "notice": "Return the total amount of LP tokens staked for the next reward epoch."
      },
      "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Permits this contract to spend a given token from `msg.sender`"
      },
      "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Permits this contract to spend a given token from `msg.sender`"
      },
      "setTenderizer(address)": {
        "notice": "Changes the tenderizer of the contract"
      },
      "stakeOf(address)": {
        "notice": "Check stake for an account."
      },
      "totalStake()": {
        "notice": "Return the total amount of LP tokens staked in this farm."
      },
      "unfarm(uint256)": {
        "notice": "unstake liquidity pool tokens"
      }
    },
    "notice": "TenderFarm is responsible for incetivizing liquidity providers, by accepting LP Tokens and a proportionaly rewarding them with TenderTokens over time.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2048,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2051,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4865,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "token",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)2712"
      },
      {
        "astId": 4869,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITenderToken)16006"
      },
      {
        "astId": 4873,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "tenderizer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITenderizer)5586"
      },
      {
        "astId": 4877,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "totalStake",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4881,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "nextTotalStake",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4884,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "CRF",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4895,
        "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
        "label": "stakes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Stake)4889_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2712": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderToken)16006": {
        "encoding": "inplace",
        "label": "contract ITenderToken",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderizer)5586": {
        "encoding": "inplace",
        "label": "contract ITenderizer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Stake)4889_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TenderFarm.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)4889_storage"
      },
      "t_struct(Stake)4889_storage": {
        "encoding": "inplace",
        "label": "struct TenderFarm.Stake",
        "members": [
          {
            "astId": 4886,
            "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4888,
            "contract": "contracts/tenderfarm/TenderFarm.sol:TenderFarm",
            "label": "lastCRF",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}