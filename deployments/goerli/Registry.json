{
  "address": "0xa34d3094bd94bb89Da3d02d57B185578b96d110E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "steak",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderSwap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderFarm",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Registry.TenderizerConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "TenderizerCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "steak",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderSwap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderFarm",
              "type": "address"
            }
          ],
          "internalType": "struct Registry.TenderizerConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "addTenderizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb49b6f7ba4a5de6aa3ff7db3c6b5f6d2ffa5233f745815842687a7a96d5629da",
  "receipt": {
    "to": null,
    "from": "0x36716C8C5D1ae680C78bD0ECc230896556399713",
    "contractAddress": "0xa34d3094bd94bb89Da3d02d57B185578b96d110E",
    "transactionIndex": 68,
    "gasUsed": "307434",
    "logsBloom": "0x
    "blockHash": "0xba61ffeb817ae53dc5d24fa6437809fda08908dd94a923d2d3d980cb3e07960b",
    "transactionHash": "0xb49b6f7ba4a5de6aa3ff7db3c6b5f6d2ffa5233f745815842687a7a96d5629da",
    "logs": [
      {
        "transactionIndex": 68,
        "blockNumber": 8490172,
        "transactionHash": "0xb49b6f7ba4a5de6aa3ff7db3c6b5f6d2ffa5233f745815842687a7a96d5629da",
        "address": "0xa34d3094bd94bb89Da3d02d57B185578b96d110E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000036716c8c5d1ae680c78bd0ecc230896556399713"
        ],
        "data": "0x",
        "logIndex": 262,
        "blockHash": "0xba61ffeb817ae53dc5d24fa6437809fda08908dd94a923d2d3d980cb3e07960b"
      }
    ],
    "blockNumber": 8490172,
    "cumulativeGasUsed": "9000098",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6c1f2755591cb2b955548a717a368f8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderFarm\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Registry.TenderizerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"TenderizerCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderFarm\",\"type\":\"address\"}],\"internalType\":\"struct Registry.TenderizerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addTenderizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTenderizer((string,address,address,address,address,address))\":{\"details\":\"This is not called from a contract/factory but directly from the deployment script.\",\"params\":{\"config\":\"contract addresses of deployment\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Registry for regsitering contracts on Subgraph\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Event emiited is used to register contracts on the subgraph, after deployment from which events can be tracked.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/Registry.sol\":\"Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/helpers/Registry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Registry for regsitering contracts on Subgraph\\n * @notice Event emiited is used to register contracts on the subgraph,\\n * after deployment from which events can be tracked.\\n */\\ncontract Registry is Ownable {\\n    struct TenderizerConfig {\\n        string name; // Same name to be used while configuring frontend\\n        address steak;\\n        address tenderizer;\\n        address tenderToken;\\n        address tenderSwap;\\n        address tenderFarm;\\n    }\\n\\n    event TenderizerCreated(TenderizerConfig config);\\n\\n    /**\\n     * @param config contract addresses of deployment\\n     * @dev This is not called from a contract/factory but directly from the deployment script.\\n     */\\n    function addTenderizer(TenderizerConfig calldata config) external onlyOwner {\\n        emit TenderizerCreated(config);\\n    }\\n}\\n\",\"keccak256\":\"0xbca8e573125c49296759f563f4da1b01de71b3fb1178bc3c180f873698ab4ac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6104248061007e6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063c641e9c51461007a578063f2fde38b1461008d575b600080fd5b6100596100a0565b005b600054604080516001600160a01b039092168252519081900360200190f35b61005961008836600461026b565b6100df565b61005961009b36600461024a565b610143565b6000546001600160a01b031633146100d35760405162461bcd60e51b81526004016100ca906102cc565b60405180910390fd5b6100dd60006101de565b565b6000546001600160a01b031633146101095760405162461bcd60e51b81526004016100ca906102cc565b7fb7ec2c104ae93ca5df46161c30b7c4a04c55d5e64620d6571aefce2bdcf7208f816040516101389190610301565b60405180910390a150565b6000546001600160a01b0316331461016d5760405162461bcd60e51b81526004016100ca906102cc565b6001600160a01b0381166101d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ca565b6101db816101de565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461024557600080fd5b919050565b60006020828403121561025b578081fd5b6102648261022e565b9392505050565b60006020828403121561027c578081fd5b813567ffffffffffffffff811115610292578182fd5b820160c08185031215610264578182fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020815260008235601e1984360301811261031a578182fd5b8301803567ffffffffffffffff811115610332578283fd5b803603851315610340578283fd5b60c0602085015261035860e0850182602085016102a3565b9150506103676020850161022e565b6001600160a01b0381166040850152506103836040850161022e565b6001600160a01b03811660608501525061039f6060850161022e565b6001600160a01b0381166080850152506103bb6080850161022e565b6001600160a01b03811660a0850152506103d760a0850161022e565b6001600160a01b03811660c085015250939250505056fea2646970667358221220eff20915a85b2a84f329a10baca9ee51aed597a2f2838a3bec831462b52f69fe64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063c641e9c51461007a578063f2fde38b1461008d575b600080fd5b6100596100a0565b005b600054604080516001600160a01b039092168252519081900360200190f35b61005961008836600461026b565b6100df565b61005961009b36600461024a565b610143565b6000546001600160a01b031633146100d35760405162461bcd60e51b81526004016100ca906102cc565b60405180910390fd5b6100dd60006101de565b565b6000546001600160a01b031633146101095760405162461bcd60e51b81526004016100ca906102cc565b7fb7ec2c104ae93ca5df46161c30b7c4a04c55d5e64620d6571aefce2bdcf7208f816040516101389190610301565b60405180910390a150565b6000546001600160a01b0316331461016d5760405162461bcd60e51b81526004016100ca906102cc565b6001600160a01b0381166101d25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ca565b6101db816101de565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461024557600080fd5b919050565b60006020828403121561025b578081fd5b6102648261022e565b9392505050565b60006020828403121561027c578081fd5b813567ffffffffffffffff811115610292578182fd5b820160c08185031215610264578182fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020815260008235601e1984360301811261031a578182fd5b8301803567ffffffffffffffff811115610332578283fd5b803603851315610340578283fd5b60c0602085015261035860e0850182602085016102a3565b9150506103676020850161022e565b6001600160a01b0381166040850152506103836040850161022e565b6001600160a01b03811660608501525061039f6060850161022e565b6001600160a01b0381166080850152506103bb6080850161022e565b6001600160a01b03811660a0850152506103d760a0850161022e565b6001600160a01b03811660c085015250939250505056fea2646970667358221220eff20915a85b2a84f329a10baca9ee51aed597a2f2838a3bec831462b52f69fe64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTenderizer((string,address,address,address,address,address))": {
        "details": "This is not called from a contract/factory but directly from the deployment script.",
        "params": {
          "config": "contract addresses of deployment"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Registry for regsitering contracts on Subgraph",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Event emiited is used to register contracts on the subgraph, after deployment from which events can be tracked.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1866,
        "contract": "contracts/helpers/Registry.sol:Registry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}