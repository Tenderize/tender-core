{
  "address": "0x5ce5B48C0A1D6E01cAA44E5cee12Ac39eDb5d7FF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPooledTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract ITotalStakedReader",
          "name": "_totalStakedReader",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITotalStakedReader",
          "name": "_totalStakedReader",
          "type": "address"
        }
      ],
      "name": "setTotalStakedReader",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "sharesToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "name": "tokensToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedReader",
      "outputs": [
        {
          "internalType": "contract ITotalStakedReader",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2abbd1dbea9c2215f9f781e80b4e6565fab3756f781c56d3b7de122b1908174e",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x5ce5B48C0A1D6E01cAA44E5cee12Ac39eDb5d7FF",
    "transactionIndex": 0,
    "gasUsed": "25898246",
    "logsBloom": "0x
    "blockHash": "0xfd63eea8c5eb2ba88835a7796c9782fc8d9973dd49120f72505f767f80cd5667",
    "transactionHash": "0x2abbd1dbea9c2215f9f781e80b4e6565fab3756f781c56d3b7de122b1908174e",
    "logs": [],
    "blockNumber": 9588467,
    "cumulativeGasUsed": "189765",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "14b0e1ff9d2182625fa00645b9479363",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPooledTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract ITotalStakedReader\",\"name\":\"_totalStakedReader\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITotalStakedReader\",\"name\":\"_totalStakedReader\",\"type\":\"address\"}],\"name\":\"setTotalStakedReader\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"sharesToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedReader\",\"outputs\":[{\"internalType\":\"contract ITotalStakedReader\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Tenderize <info@tenderize.me>\",\"details\":\"TenderToken balances are dynamic and are calculated based on the accounts' shares and the total amount of Tokens controlled by the protocol. Account shares aren't normalized, so the contract also stores the sum of all shares to calculate each account's token balance which equals to: shares[account] * _getTotalPooledTokens() / _getTotalShares()\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"This value changes when `approve` or `transferFrom` is called.\",\"params\":{\"_owner\":\"address that approved the allowance\",\"_spender\":\"address that is allowed to spend the allowance\"},\"returns\":{\"_0\":\"allowance amount '_spender' is allowed to spend from '_owner'\"}},\"approve(address,uint256)\":{\"details\":\"Emits an `Approval` event.Requirements: - `_spender` cannot be the zero address.The `_amount` argument is the amount of tokens, not shares.\",\"params\":{\"_amount\":\"amount of tokens to allow '_spender' to spend\",\"_spender\":\"address of the spender allowed to approve tokens from caller\"},\"returns\":{\"_0\":\"success a boolean value indicating whether the operation succeeded.\"}},\"balanceOf(address)\":{\"details\":\"Balances are dynamic and equal the `_account`'s share in the amount of the total Tokens controlled by the protocol. See `sharesOf`.\",\"params\":{\"_account\":\"address of the account to check the balance for\"},\"returns\":{\"_0\":\"balance token balance of `_account`\"}},\"burn(address,uint256)\":{\"details\":\"Only callable by contract ownerCalculates the amount of shares to destroy based on the specified '_amount' and destroy shares rather than burning tokens'_recipient' should also withdraw from Tenderizer atomically\",\"params\":{\"_account\":\"address to burn the tokens from\",\"_amount\":\"amount to burn\"},\"returns\":{\"_0\":\"success a boolean value indicating whether the operation succeeded.\"}},\"decimals()\":{\"returns\":{\"_0\":\"decimals the number of decimals for getting user representation of a token amount.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the zero address. - `_spender` must have allowance for the caller of at least `_subtractedValue`.\",\"params\":{\"_spender\":\"address of the spender allowed to approve tokens from caller\",\"_subtractedValue\":\"amount to subtract from current allowance\"},\"returns\":{\"_0\":\"success a boolean value indicating whether the operation succeeded.\"}},\"getTotalPooledTokens()\":{\"details\":\"The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.\",\"returns\":{\"_0\":\"totalPooledTokens total amount of pooled tokens\"}},\"getTotalShares()\":{\"details\":\"The sum of all accounts' shares can be an arbitrary number, therefore it is necessary to store it in order to calculate each account's relative share.\",\"returns\":{\"_0\":\"totalShares total amount of shares\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the the zero address.\",\"params\":{\"_addedValue\":\"amount to add to allowance\",\"_spender\":\"address of the spender allowed to approve tokens from caller\"},\"returns\":{\"_0\":\"success a boolean value indicating whether the operation succeeded.\"}},\"initialize(string,string,address)\":{\"params\":{\"_name\":\"name of the token (steak)\",\"_stakedReader\":\"contract address implementing the ITotalStakedReader interface\",\"_symbol\":\"symbol of the token (steak)\"},\"returns\":{\"_0\":\"a boolean value indicating whether the init succeeded.\"}},\"mint(address,uint256)\":{\"details\":\"Only callable by contract ownerCalculates the amount of shares to create based on the specified '_amount' and creates new shares rather than minting actual tokens'_recipient' should also deposit into Tenderizer atomically to prevent diluation of existing particpants\",\"params\":{\"_amount\":\"amount to mint\",\"_recipient\":\"address to mint tokens for\"},\"returns\":{\"_0\":\"success a boolean value indicating whether the operation succeeded.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTotalStakedReader(address)\":{\"details\":\"Only callable by contract owner.Used to determine TenderToken total supply.\",\"params\":{\"_stakedReader\":\"contract address implementing the ITotalStakedReader interface\"}},\"sharesOf(address)\":{\"params\":{\"_account\":\"address of the account\"},\"returns\":{\"_0\":\"shares the amount of shares owned by `_account`.\"}},\"sharesToTokens(uint256)\":{\"params\":{\"_shares\":\"the amount of shares to calculate the amount of tokens for\"},\"returns\":{\"_0\":\"tokens the amount of tokens represented by the shares\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"tokensToShares(uint256)\":{\"params\":{\"_tokens\":\"amount of tokens to calculate shares for\"},\"returns\":{\"_0\":\"shares nominal amount of shares the tokens represent\"}},\"totalSupply()\":{\"details\":\"Always equals to `_getTotalPooledTokens()` since token amount is pegged to the total amount of Tokens controlled by the protocol.\",\"returns\":{\"_0\":\"totalSupply total supply\"}},\"transfer(address,uint256)\":{\"details\":\"Emits a `Transfer` event.Requirements: - `_recipient` cannot be the zero address. - the caller must have a balance of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.\",\"params\":{\"_amount\":\"amount of tokens to transfer\",\"_recipient\":\"address of the recipient\"},\"returns\":{\"_0\":\"success a boolean value indicating whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Emits a `Transfer` event.Emits an `Approval` event indicating the updated allowance.Requirements: - `_sender` and `_recipient` cannot be the zero addresses. - `_sender` must have a balance of at least `_amount`. - the caller must have allowance for `_sender`'s tokens of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.\",\"params\":{\"_recipient\":\"address of the recipient\",\"_sender\":\"address of the account to transfer tokens from\"},\"returns\":{\"_0\":\"success a boolean value indicating whether the operation succeeded.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"allowances\":{\"details\":\"Allowances nominated in tokens, not token shares.\"},\"shares\":{\"details\":\"Nominal amount of shares held by each account\"},\"totalShares\":{\"details\":\"Total amount of outstanding shares\"},\"totalStakedReader\":{\"details\":\"Tenderizer address, to read total staked tokens\"}},\"title\":\"Interest-bearing ERC20-like token for Tenderize protocol.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"The remaining number of tokens that `_spender` is allowed to spend behalf of `_owner` through `transferFrom`. This is zero by default.\"},\"approve(address,uint256)\":{\"notice\":\"Sets `_amount` as the allowance of `_spender` over the caller's tokens.\"},\"balanceOf(address)\":{\"notice\":\"the amount of tokens owned by the `_account`.\"},\"burn(address,uint256)\":{\"notice\":\"Burns '_amount' of tokens from '_recipient'\"},\"decimals()\":{\"notice\":\"The number of decimals the TenderToken uses.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\"},\"getTotalPooledTokens()\":{\"notice\":\"Total amount of underlying tokens controlled by the Tenderizer.\"},\"getTotalShares()\":{\"notice\":\"The total amount of shares in existence.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\"},\"initialize(string,string,address)\":{\"notice\":\"Initilize the TenderToken Contract\"},\"mint(address,uint256)\":{\"notice\":\"Mints '_amount' of tokens for '_recipient'\"},\"setTotalStakedReader(address)\":{\"notice\":\"sets a TotalStakedReader to read the total staked tokens from\"},\"sharesOf(address)\":{\"notice\":\"The amount of shares owned by an account\"},\"sharesToTokens(uint256)\":{\"notice\":\"The amount of tokens that corresponds to `_shares` token shares.\"},\"tokensToShares(uint256)\":{\"notice\":\"The amount of shares that corresponds to `_tokens` protocol-controlled Tokens.\"},\"totalSupply()\":{\"notice\":\"The total supply of tender tokens in existence.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers `_amount` tokens from the caller's account to the `_recipient` account.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `_amount` tokens from `_sender` to `_recipient` using the allowance mechanism. `_amount` is then deducted from the caller's allowance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TenderToken.sol\":\"TenderToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x4788b5ca1f6a1c34febfd25857b95e4c6c5494e2e062c820552ebaed21ae856b\",\"license\":\"MIT\"},\"contracts/tenderizer/ITotalStakedReader.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ITotalStakedReader {\\n    /**\\n     * @notice Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\\n     * @return _totalStakedTokens total amount staked by this Tenderizer\\n     */\\n    function totalStakedTokens() external view returns (uint256 _totalStakedTokens);\\n}\\n\",\"keccak256\":\"0x134a07faf2487ca55c05288c5d09e611ab5f9fde0d0635c790055bd28ffc5e0c\",\"license\":\"MIT\"},\"contracts/token/ITenderToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../tenderizer/ITotalStakedReader.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for Tenderize protocol.\\n * @author Tenderize <info@tenderize.me>\\n * @dev TenderToken balances are dynamic and are calculated based on the accounts' shares\\n * and the total amount of Tokens controlled by the protocol. Account shares aren't\\n * normalized, so the contract also stores the sum of all shares to calculate\\n * each account's token balance which equals to:\\n *\\n * shares[account] * _getTotalPooledTokens() / _getTotalShares()\\n */\\ninterface ITenderToken {\\n    /**\\n     * @notice Initilize the TenderToken Contract\\n     * @param _name name of the token (steak)\\n     * @param _symbol symbol of the token (steak)\\n     * @param _stakedReader contract address implementing the ITotalStakedReader interface\\n     * @return a boolean value indicating whether the init succeeded.\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        ITotalStakedReader _stakedReader\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice The number of decimals the TenderToken uses.\\n     * @return decimals the number of decimals for getting user representation of a token amount.\\n     */\\n    function decimals() external pure returns (uint8);\\n\\n    /**\\n     * @notice The total supply of tender tokens in existence.\\n     * @dev Always equals to `_getTotalPooledTokens()` since token amount\\n     * is pegged to the total amount of Tokens controlled by the protocol.\\n     * @return totalSupply total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Total amount of underlying tokens controlled by the Tenderizer.\\n     * @dev The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.\\n     * @return totalPooledTokens total amount of pooled tokens\\n     */\\n    function getTotalPooledTokens() external view returns (uint256);\\n\\n    /**\\n     * @notice The total amount of shares in existence.\\n     * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n     * it is necessary to store it in order to calculate each account's relative share.\\n     * @return totalShares total amount of shares\\n     */\\n    function getTotalShares() external view returns (uint256);\\n\\n    /**\\n     * @notice the amount of tokens owned by the `_account`.\\n     * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n        total Tokens controlled by the protocol. See `sharesOf`.\\n     * @param _account address of the account to check the balance for\\n     * @return balance token balance of `_account`\\n     */\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of shares owned by an account\\n     * @param _account address of the account\\n     * @return shares the amount of shares owned by `_account`.\\n     */\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice The remaining number of tokens that `_spender` is allowed to spend\\n     * behalf of `_owner` through `transferFrom`. This is zero by default.\\n     * @dev This value changes when `approve` or `transferFrom` is called.\\n     * @param _owner address that approved the allowance\\n     * @param _spender address that is allowed to spend the allowance\\n     * @return allowance amount '_spender' is allowed to spend from '_owner'\\n     */\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of shares that corresponds to `_tokens` protocol-controlled Tokens.\\n     * @param _tokens amount of tokens to calculate shares for\\n     * @return shares nominal amount of shares the tokens represent\\n     */\\n    function tokensToShares(uint256 _tokens) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of tokens that corresponds to `_shares` token shares.\\n     * @param _shares the amount of shares to calculate the amount of tokens for\\n     * @return tokens the amount of tokens represented by the shares\\n     */\\n    function sharesToTokens(uint256 _shares) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from the caller's account to the `_recipient` account.\\n     * @param _recipient address of the recipient\\n     * @param _amount amount of tokens to transfer\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Requirements:\\n     * - `_recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _amount amount of tokens to allow '_spender' to spend\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits an `Approval` event.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the zero address.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from `_sender` to `_recipient` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's allowance.\\n     * @param _sender address of the account to transfer tokens from\\n     * @param _recipient address of the recipient\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_sender` and `_recipient` cannot be the zero addresses.\\n     * - `_sender` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_sender`'s tokens of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _addedValue amount to add to allowance\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n\\n    /**\\n     * @notice Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _subtractedValue amount to subtract from current allowance\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the zero address.\\n     * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n\\n    /**\\n     * @notice Mints '_amount' of tokens for '_recipient'\\n     * @param _recipient address to mint tokens for\\n     * @param _amount amount to mint\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to create based on the specified '_amount'\\n     * and creates new shares rather than minting actual tokens\\n     * @dev '_recipient' should also deposit into Tenderizer\\n     * atomically to prevent diluation of existing particpants\\n     */\\n    function mint(address _recipient, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Burns '_amount' of tokens from '_recipient'\\n     * @param _account address to burn the tokens from\\n     * @param _amount amount to burn\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to destroy based on the specified '_amount'\\n     * and destroy shares rather than burning tokens\\n     * @dev '_recipient' should also withdraw from Tenderizer atomically\\n     */\\n    function burn(address _account, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice sets a TotalStakedReader to read the total staked tokens from\\n     * @param _stakedReader contract address implementing the ITotalStakedReader interface\\n     * @dev Only callable by contract owner.\\n     * @dev Used to determine TenderToken total supply.\\n     */\\n    function setTotalStakedReader(ITotalStakedReader _stakedReader) external;\\n}\\n\",\"keccak256\":\"0x8ded75ce98c4c0c99d5db628244e93f856900ed730b7164476f2b41da9d2a09d\",\"license\":\"MIT\"},\"contracts/token/TenderToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../libs/MathUtils.sol\\\";\\nimport \\\"../tenderizer/ITotalStakedReader.sol\\\";\\nimport \\\"./ITenderToken.sol\\\";\\n// solhint-disable-next-line max-line-length\\nimport { ERC20Upgradeable, ERC20PermitUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for Tenderize protocol.\\n * @author Tenderize <info@tenderize.me>\\n * @dev TenderToken balances are dynamic and are calculated based on the accounts' shares\\n * and the total amount of Tokens controlled by the protocol. Account shares aren't\\n * normalized, so the contract also stores the sum of all shares to calculate\\n * each account's token balance which equals to:\\n *\\n * shares[account] * _getTotalPooledTokens() / _getTotalShares()\\n */\\ncontract TenderToken is OwnableUpgradeable, ERC20PermitUpgradeable, ITenderToken {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    /**\\n     * @dev Total amount of outstanding shares\\n     */\\n    uint256 private totalShares;\\n\\n    /**\\n     * @dev Nominal amount of shares held by each account\\n     */\\n    mapping(address => uint256) private shares;\\n\\n    /**\\n     * @dev Allowances nominated in tokens, not token shares.\\n     */\\n    mapping(address => mapping(address => uint256)) private allowances;\\n\\n    /**\\n     * @dev Tenderizer address, to read total staked tokens\\n     */\\n    ITotalStakedReader public totalStakedReader;\\n\\n    /// @inheritdoc ITenderToken\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        ITotalStakedReader _totalStakedReader\\n    ) external override initializer returns (bool) {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ERC20_init_unchained(string(abi.encodePacked(\\\"tender \\\", _name)), string(abi.encodePacked(\\\"t\\\", _symbol)));\\n        __EIP712_init_unchained(string(abi.encodePacked(\\\"tender \\\", _name)), \\\"1\\\");\\n        __ERC20Permit_init_unchained(string(abi.encodePacked(\\\"tender \\\", _name)));\\n        totalStakedReader = _totalStakedReader;\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function decimals() public pure override(ITenderToken, ERC20Upgradeable) returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function totalSupply() public view override(ITenderToken, ERC20Upgradeable) returns (uint256) {\\n        return _getTotalPooledTokens();\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function getTotalPooledTokens() public view override returns (uint256) {\\n        return _getTotalPooledTokens();\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function getTotalShares() public view override returns (uint256) {\\n        return _getTotalShares();\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function balanceOf(address _account) public view override(ITenderToken, ERC20Upgradeable) returns (uint256) {\\n        return _sharesToTokens(_sharesOf(_account));\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function sharesOf(address _account) public view override returns (uint256) {\\n        return _sharesOf(_account);\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        override(ITenderToken, ERC20Upgradeable)\\n        returns (uint256)\\n    {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function tokensToShares(uint256 _tokens) public view override returns (uint256) {\\n        return _tokensToShares(_tokens);\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function sharesToTokens(uint256 _shares) public view override returns (uint256) {\\n        return _sharesToTokens(_shares);\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function transfer(address _recipient, uint256 _amount)\\n        public\\n        override(ITenderToken, ERC20Upgradeable)\\n        returns (bool)\\n    {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function approve(address _spender, uint256 _amount) public override(ITenderToken, ERC20Upgradeable) returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public override(ITenderToken, ERC20Upgradeable) returns (bool) {\\n        uint256 currentAllowance = allowances[_sender][msg.sender];\\n        require(currentAllowance >= _amount, \\\"TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE\\\");\\n\\n        _transfer(_sender, _recipient, _amount);\\n        _approve(_sender, msg.sender, currentAllowance - _amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        override(ITenderToken, ERC20Upgradeable)\\n        returns (bool)\\n    {\\n        _approve(msg.sender, _spender, allowances[msg.sender][_spender] + _addedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        override(ITenderToken, ERC20Upgradeable)\\n        returns (bool)\\n    {\\n        uint256 currentAllowance = allowances[msg.sender][_spender];\\n        require(currentAllowance >= _subtractedValue, \\\"DECREASED_ALLOWANCE_BELOW_ZERO\\\");\\n        _approve(msg.sender, _spender, currentAllowance - _subtractedValue);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function mint(address _recipient, uint256 _amount) public override onlyOwner returns (bool) {\\n        _mintShares(_recipient, _tokensToShares(_amount));\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function burn(address _account, uint256 _amount) public override onlyOwner returns (bool) {\\n        uint256 _sharesToburn = _tokensToShares(_amount);\\n        _burnShares(_account, _sharesToburn);\\n        return true;\\n    }\\n\\n    /// @inheritdoc ITenderToken\\n    function setTotalStakedReader(ITotalStakedReader _totalStakedReader) public override onlyOwner {\\n        require(address(_totalStakedReader) != address(0));\\n        totalStakedReader = _totalStakedReader;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /**\\n     * @return the total amount (in 10e18) of Tokens controlled by the protocol.\\n     * @dev This is used for calculating tokens from shares and vice versa.\\n     * @dev This function is required to be implemented in a derived contract.\\n     */\\n    function _getTotalPooledTokens() internal view returns (uint256) {\\n        return totalStakedReader.totalStakedTokens();\\n    }\\n\\n    /**\\n     * @dev Moves `_amount` tokens from `_sender` to `_recipient`.\\n     * @dev Emits a `Transfer` event.\\n     */\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal override {\\n        uint256 _sharesToTransfer = _tokensToShares(_amount);\\n        _transferShares(_sender, _recipient, _sharesToTransfer);\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.\\n     * @dev Emits an `Approval` event.\\n     */\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) internal override {\\n        require(_owner != address(0), \\\"APPROVE_FROM_ZERO_ADDRESS\\\");\\n        require(_spender != address(0), \\\"APPROVE_TO_ZERO_ADDRESS\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    /**\\n     * @dev the total amount of shares in existence.\\n     */\\n    function _getTotalShares() internal view returns (uint256) {\\n        return totalShares;\\n    }\\n\\n    /**\\n     * @dev the amount of shares owned by `_account`.\\n     */\\n    function _sharesOf(address _account) internal view returns (uint256) {\\n        return shares[_account];\\n    }\\n\\n    /**\\n     * @dev Moves `_shares` shares from `_sender` to `_recipient`.\\n     * @dev Requirements:\\n     * - `_sender` cannot be the zero address.\\n     * - `_recipient` cannot be the zero address.\\n     * - `_sender` must hold at least `_shares` shares.\\n     */\\n    function _transferShares(\\n        address _sender,\\n        address _recipient,\\n        uint256 _shares\\n    ) internal {\\n        require(_sender != address(0), \\\"TRANSFER_FROM_THE_ZERO_ADDRESS\\\");\\n        require(_recipient != address(0), \\\"TRANSFER_TO_THE_ZERO_ADDRESS\\\");\\n\\n        uint256 currentSenderShares = shares[_sender];\\n        require(_shares <= currentSenderShares, \\\"TRANSFER_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        shares[_sender] -= _shares;\\n        shares[_recipient] += _shares;\\n    }\\n\\n    /**\\n     * @dev Creates `_shares` shares and assigns them to `_recipient`, increasing the total amount of shares.\\n     * @dev This doesn't increase the token total supply.\\n     * @dev Requirements:\\n     * - `_recipient` cannot be the zero address.\\n     */\\n    function _mintShares(address _recipient, uint256 _shares) internal returns (uint256 newTotalShares) {\\n        require(_recipient != address(0), \\\"MINT_TO_THE_ZERO_ADDRESS\\\");\\n\\n        newTotalShares = totalShares + _shares;\\n\\n        shares[_recipient] += _shares;\\n\\n        // Notice: we're not emitting a Transfer event from the zero address here since shares mint\\n        // works by taking the amount of tokens corresponding to the minted shares from all other\\n        // token holders, proportionally to their share. The total supply of the token doesn't change\\n        // as the result. This is equivalent to performing a send from each other token holder's\\n        // address to `address`, but we cannot reflect this as it would require sending an unbounded\\n        // number of events.\\n        totalShares = newTotalShares;\\n    }\\n\\n    /**\\n     * @dev Destroys `_shares` shares from `_account`'s holdings, decreasing the total amount of shares.\\n     * @dev This doesn't decrease the token total supply.\\n     * @dev Requirements:\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must hold at least `_shares` shares.\\n     */\\n    function _burnShares(address _account, uint256 _shares) internal returns (uint256 newTotalShares) {\\n        require(_account != address(0), \\\"BURN_FROM_THE_ZERO_ADDRESS\\\");\\n\\n        uint256 accountShares = shares[_account];\\n        require(_shares <= accountShares, \\\"BURN_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        newTotalShares = totalShares - _shares;\\n\\n        shares[_account] -= _shares;\\n\\n        // Notice: we're not emitting a Transfer event to the zero address here since shares burn\\n        // works by redistributing the amount of tokens corresponding to the burned shares between\\n        // all other token holders. The total supply of the token doesn't change as the result.\\n        // This is equivalent to performing a send from `address` to each other token holder address,\\n        // but we cannot reflect this as it would require sending an unbounded number of events.\\n        totalShares = newTotalShares;\\n    }\\n\\n    function _tokensToShares(uint256 _tokens) internal view returns (uint256) {\\n        uint256 _totalPooledTokens = _getTotalPooledTokens();\\n        uint256 _totalShares = _getTotalShares();\\n        if (_totalShares == 0) {\\n            return _tokens;\\n        } else if (_totalPooledTokens == 0) {\\n            return 0;\\n        } else {\\n            return MathUtils.percOf(_tokens, _totalShares, _totalPooledTokens);\\n        }\\n    }\\n\\n    function _sharesToTokens(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalShares = _getTotalShares();\\n        if (_totalShares == 0) {\\n            return 0;\\n        } else {\\n            return MathUtils.percOf(_shares, _getTotalPooledTokens(), _totalShares);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x927910ed4601f2f160794e1b6f44ce3541a96d66d6bc88c1f2832fced5b8e682\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b5b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063a9059cbb11610097578063dd62ed3e11610071578063dd62ed3e1461050e578063f2fde38b1461053e578063f3044ac71461055a578063f5eb42dc1461058a576101a9565b8063a9059cbb146104a4578063d5002f2e146104d4578063d505accf146104f2576101a9565b80638da5cb5b116100d35780638da5cb5b1461040857806395d89b41146104265780639dc29fac14610444578063a457c2d714610474576101a9565b8063715018a6146103b05780637ecebe00146103ba5780638d7a7164146103ea576101a9565b806323b872dd116101665780633644e515116101405780633644e51514610302578063395093511461032057806340c10f191461035057806370a0823114610380576101a9565b806323b872dd1461028457806327def4fd146102b4578063313ce567146102e4576101a9565b80630216b5ec146101ae57806306fdde03146101cc578063077f224a146101ea578063095ea7b31461021a57806310eae6b51461024a57806318160ddd14610266575b600080fd5b6101b66105ba565b6040516101c39190612ff8565b60405180910390f35b6101d46105e1565b6040516101e19190613013565b60405180910390f35b61020460048036038101906101ff9190612985565b610673565b6040516102119190612ec9565b60405180910390f35b610234600480360381019061022f9190612920565b610876565b6040516102419190612ec9565b60405180910390f35b610264600480360381019061025f919061295c565b61088d565b005b61026e610988565b60405161027b9190613295565b60405180910390f35b61029e60048036038101906102999190612833565b610997565b6040516102ab9190612ec9565b60405180910390f35b6102ce60048036038101906102c99190612a04565b610a8a565b6040516102db9190613295565b60405180910390f35b6102ec610a9c565b6040516102f991906132b0565b60405180910390f35b61030a610aa5565b6040516103179190612ee4565b60405180910390f35b61033a60048036038101906103359190612920565b610ab4565b6040516103479190612ec9565b60405180910390f35b61036a60048036038101906103659190612920565b610b53565b6040516103779190612ec9565b60405180910390f35b61039a600480360381019061039591906127ce565b610bee565b6040516103a79190613295565b60405180910390f35b6103b8610c08565b005b6103d460048036038101906103cf91906127ce565b610c90565b6040516103e19190613295565b60405180910390f35b6103f2610ce0565b6040516103ff9190613295565b60405180910390f35b610410610cef565b60405161041d9190612eae565b60405180910390f35b61042e610d19565b60405161043b9190613013565b60405180910390f35b61045e60048036038101906104599190612920565b610dab565b60405161046b9190612ec9565b60405180910390f35b61048e60048036038101906104899190612920565b610e4c565b60405161049b9190612ec9565b60405180910390f35b6104be60048036038101906104b99190612920565b610f33565b6040516104cb9190612ec9565b60405180910390f35b6104dc610f4a565b6040516104e99190613295565b60405180910390f35b61050c60048036038101906105079190612882565b610f59565b005b610528600480360381019061052391906127f7565b61107d565b6040516105359190613295565b60405180910390f35b610558600480360381019061055391906127ce565b611105565b005b610574600480360381019061056f9190612a04565b6111fd565b6040516105819190613295565b60405180910390f35b6105a4600480360381019061059f91906127ce565b61120f565b6040516105b19190613295565b60405180910390f35b61010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060606880546105f090613534565b80601f016020809104026020016040519081016040528092919081815260200182805461061c90613534565b80156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b5050505050905090565b60008060019054906101000a900460ff168061069a575060008054906101000a900460ff16155b6106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d090613175565b60405180910390fd5b60008060019054906101000a900460ff161590508015610729576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610731611221565b6107396112fa565b6107818560405160200161074d9190612e6a565b6040516020818303038152906040528560405160200161076d9190612e8c565b6040516020818303038152906040526113e3565b6107df856040516020016107959190612e6a565b6040516020818303038152906040526040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506114ec565b610807856040516020016107f39190612e6a565b6040516020818303038152906040526115ef565b8261010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019150801561086e5760008060016101000a81548160ff0219169083151502179055505b509392505050565b60006108833384846116f0565b6001905092915050565b6108956118bc565b73ffffffffffffffffffffffffffffffffffffffff166108b3610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090090613215565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561094357600080fd5b8061010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006109926118c4565b905090565b60008061010060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5490613055565b60405180910390fd5b610a6885858561196c565b610a7e85338584610a799190613429565b6116f0565b60019150509392505050565b6000610a95826119ef565b9050919050565b60006012905090565b6000610aaf611a2a565b905090565b6000610b4933848461010060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b449190613348565b6116f0565b6001905092915050565b6000610b5d6118bc565b73ffffffffffffffffffffffffffffffffffffffff16610b7b610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890613215565b60405180910390fd5b610be383610bde84611a6a565b611abf565b506001905092915050565b6000610c01610bfc83611ba3565b6119ef565b9050919050565b610c106118bc565b73ffffffffffffffffffffffffffffffffffffffff16610c2e610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90613215565b60405180910390fd5b610c8e6000611bec565b565b6000610cd960cb60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611cb2565b9050919050565b6000610cea6118c4565b905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060698054610d2890613534565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5490613534565b8015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b5050505050905090565b6000610db56118bc565b73ffffffffffffffffffffffffffffffffffffffff16610dd3610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2090613215565b60405180910390fd5b6000610e3483611a6a565b9050610e408482611cc0565b50600191505092915050565b60008061010060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990613155565b60405180910390fd5b610f2833858584610f239190613429565b6116f0565b600191505092915050565b6000610f4033848461196c565b6001905092915050565b6000610f54611e2c565b905090565b83421115610f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9390613115565b60405180910390fd5b600060cc54888888610fad8c611e36565b89604051602001610fc396959493929190612eff565b6040516020818303038152906040528051906020012090506000610fe682611e94565b90506000610ff682878787611eae565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d906131f5565b60405180910390fd5b6110718a8a8a6116f0565b50505050505050505050565b600061010060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61110d6118bc565b73ffffffffffffffffffffffffffffffffffffffff1661112b610cef565b73ffffffffffffffffffffffffffffffffffffffff1614611181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117890613215565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e8906130d5565b60405180910390fd5b6111fa81611bec565b50565b600061120882611a6a565b9050919050565b600061121a82611ba3565b9050919050565b600060019054906101000a900460ff1680611247575060008054906101000a900460ff16155b611286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127d90613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156112d6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156112f75760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611320575060008054906101000a900460ff16155b61135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135690613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113af576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6113bf6113ba6118bc565b611bec565b80156113e05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611409575060008054906101000a900460ff16155b611448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143f90613175565b60405180910390fd5b60008060019054906101000a900460ff161590508015611498576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82606890805190602001906114ae929190612645565b5081606990805190602001906114c5929190612645565b5080156114e75760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680611512575060008054906101000a900460ff16155b611551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154890613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156115a1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000838051906020012090506000838051906020012090508160978190555080609881905550505080156115ea5760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680611615575060008054906101000a900460ff16155b611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156116a4576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960cc8190555080156116ec5760008060016101000a81548160ff0219169083151502179055505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175790613255565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c7906130f5565b60405180910390fd5b8061010060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118af9190613295565b60405180910390a3505050565b600033905090565b600061010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561192f57600080fd5b505afa158015611943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119679190612a2d565b905090565b600061197782611a6a565b9050611984848483611ed9565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119e19190613295565b60405180910390a350505050565b6000806119fa611e2c565b90506000811415611a0f576000915050611a25565b611a2183611a1b6118c4565b836120f2565b9150505b919050565b6000611a657f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611a58612126565b611a60612130565b61213a565b905090565b600080611a756118c4565b90506000611a81611e2c565b90506000811415611a96578392505050611aba565b6000821415611aaa57600092505050611aba565b611ab58482846120f2565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2790613275565b60405180910390fd5b8160fe54611b3e9190613348565b90508160ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b8f9190613348565b925050819055508060fe8190555092915050565b600060ff60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d28906130b5565b60405180910390fd5b600060ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daf906131d5565b60405180910390fd5b8260fe54611dc69190613429565b91508260ff60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e179190613429565b925050819055508160fe819055505092915050565b600060fe54905090565b60008060cb60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611e8381611cb2565b9150611e8e81612174565b50919050565b6000611ea7611ea1611a2a565b8361218a565b9050919050565b6000806000611ebf878787876121bd565b91509150611ecc816122ca565b8192505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4090613095565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb0906131b5565b60405180910390fd5b600060ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080821115612040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203790613235565b60405180910390fd5b8160ff60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461208f9190613429565b925050819055508160ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120e59190613348565b9250508190555050505050565b6000683635c9adc5dea00000612108848461261b565b8561211391906133cf565b61211d919061339e565b90509392505050565b6000609754905090565b6000609854905090565b60008383834630604051602001612155959493929190612f60565b6040516020818303038152906040528051906020012090509392505050565b6001816000016000828254019250508190555050565b6000828260405160200161219f929190612e33565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156121f85760006003915091506122c1565b601b8560ff16141580156122105750601c8560ff1614155b156122225760006004915091506122c1565b6000600187878787604051600081526020016040526040516122479493929190612fb3565b6020604051602081039080840390855afa158015612269573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122b8576000600192509250506122c1565b80600092509250505b94509492505050565b60006004811115612304577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561233d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561234857612618565b60016004811115612382577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156123bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156123fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f390613035565b60405180910390fd5b60026004811115612436577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561246f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156124b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a790613075565b60405180910390fd5b600360048111156124ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612523577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255b90613135565b60405180910390fd5b60048081111561259d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156125d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260e90613195565b60405180910390fd5b5b50565b600081683635c9adc5dea000008461263391906133cf565b61263d919061339e565b905092915050565b82805461265190613534565b90600052602060002090601f01602090048101928261267357600085556126ba565b82601f1061268c57805160ff19168380011785556126ba565b828001600101855582156126ba579182015b828111156126b957825182559160200191906001019061269e565b5b5090506126c791906126cb565b5090565b5b808211156126e45760008160009055506001016126cc565b5090565b60006126fb6126f6846132f0565b6132cb565b90508281526020810184848401111561271357600080fd5b61271e8482856134f2565b509392505050565b60008135905061273581613ab2565b92915050565b60008135905061274a81613ac9565b92915050565b60008135905061275f81613ae0565b92915050565b600082601f83011261277657600080fd5b81356127868482602086016126e8565b91505092915050565b60008135905061279e81613af7565b92915050565b6000815190506127b381613af7565b92915050565b6000813590506127c881613b0e565b92915050565b6000602082840312156127e057600080fd5b60006127ee84828501612726565b91505092915050565b6000806040838503121561280a57600080fd5b600061281885828601612726565b925050602061282985828601612726565b9150509250929050565b60008060006060848603121561284857600080fd5b600061285686828701612726565b935050602061286786828701612726565b92505060406128788682870161278f565b9150509250925092565b600080600080600080600060e0888a03121561289d57600080fd5b60006128ab8a828b01612726565b97505060206128bc8a828b01612726565b96505060406128cd8a828b0161278f565b95505060606128de8a828b0161278f565b94505060806128ef8a828b016127b9565b93505060a06129008a828b0161273b565b92505060c06129118a828b0161273b565b91505092959891949750929550565b6000806040838503121561293357600080fd5b600061294185828601612726565b92505060206129528582860161278f565b9150509250929050565b60006020828403121561296e57600080fd5b600061297c84828501612750565b91505092915050565b60008060006060848603121561299a57600080fd5b600084013567ffffffffffffffff8111156129b457600080fd5b6129c086828701612765565b935050602084013567ffffffffffffffff8111156129dd57600080fd5b6129e986828701612765565b92505060406129fa86828701612750565b9150509250925092565b600060208284031215612a1657600080fd5b6000612a248482850161278f565b91505092915050565b600060208284031215612a3f57600080fd5b6000612a4d848285016127a4565b91505092915050565b612a5f8161345d565b82525050565b612a6e8161346f565b82525050565b612a7d8161347b565b82525050565b612a94612a8f8261347b565b613597565b82525050565b612aa3816134ce565b82525050565b6000612ab482613321565b612abe818561332c565b9350612ace818560208601613501565b612ad78161365d565b840191505092915050565b6000612aed82613321565b612af7818561333d565b9350612b07818560208601613501565b80840191505092915050565b6000612b2060188361332c565b9150612b2b8261366e565b602082019050919050565b6000612b4360218361332c565b9150612b4e82613697565b604082019050919050565b6000612b66601f8361332c565b9150612b71826136e6565b602082019050919050565b6000612b89601e8361332c565b9150612b948261370f565b602082019050919050565b6000612bac601a8361332c565b9150612bb782613738565b602082019050919050565b6000612bcf60268361332c565b9150612bda82613761565b604082019050919050565b6000612bf260178361332c565b9150612bfd826137b0565b602082019050919050565b6000612c1560028361333d565b9150612c20826137d9565b600282019050919050565b6000612c38601d8361332c565b9150612c4382613802565b602082019050919050565b6000612c5b60228361332c565b9150612c668261382b565b604082019050919050565b6000612c7e601e8361332c565b9150612c898261387a565b602082019050919050565b6000612ca160078361333d565b9150612cac826138a3565b600782019050919050565b6000612cc4602e8361332c565b9150612ccf826138cc565b604082019050919050565b6000612ce760228361332c565b9150612cf28261391b565b604082019050919050565b6000612d0a601c8361332c565b9150612d158261396a565b602082019050919050565b6000612d2d601b8361332c565b9150612d3882613993565b602082019050919050565b6000612d50601e8361332c565b9150612d5b826139bc565b602082019050919050565b6000612d7360208361332c565b9150612d7e826139e5565b602082019050919050565b6000612d96601f8361332c565b9150612da182613a0e565b602082019050919050565b6000612db960018361333d565b9150612dc482613a37565b600182019050919050565b6000612ddc60198361332c565b9150612de782613a60565b602082019050919050565b6000612dff60188361332c565b9150612e0a82613a89565b602082019050919050565b612e1e816134b7565b82525050565b612e2d816134c1565b82525050565b6000612e3e82612c08565b9150612e4a8285612a83565b602082019150612e5a8284612a83565b6020820191508190509392505050565b6000612e7582612c94565b9150612e818284612ae2565b915081905092915050565b6000612e9782612dac565b9150612ea38284612ae2565b915081905092915050565b6000602082019050612ec36000830184612a56565b92915050565b6000602082019050612ede6000830184612a65565b92915050565b6000602082019050612ef96000830184612a74565b92915050565b600060c082019050612f146000830189612a74565b612f216020830188612a56565b612f2e6040830187612a56565b612f3b6060830186612e15565b612f486080830185612e15565b612f5560a0830184612e15565b979650505050505050565b600060a082019050612f756000830188612a74565b612f826020830187612a74565b612f8f6040830186612a74565b612f9c6060830185612e15565b612fa96080830184612a56565b9695505050505050565b6000608082019050612fc86000830187612a74565b612fd56020830186612e24565b612fe26040830185612a74565b612fef6060830184612a74565b95945050505050565b600060208201905061300d6000830184612a9a565b92915050565b6000602082019050818103600083015261302d8184612aa9565b905092915050565b6000602082019050818103600083015261304e81612b13565b9050919050565b6000602082019050818103600083015261306e81612b36565b9050919050565b6000602082019050818103600083015261308e81612b59565b9050919050565b600060208201905081810360008301526130ae81612b7c565b9050919050565b600060208201905081810360008301526130ce81612b9f565b9050919050565b600060208201905081810360008301526130ee81612bc2565b9050919050565b6000602082019050818103600083015261310e81612be5565b9050919050565b6000602082019050818103600083015261312e81612c2b565b9050919050565b6000602082019050818103600083015261314e81612c4e565b9050919050565b6000602082019050818103600083015261316e81612c71565b9050919050565b6000602082019050818103600083015261318e81612cb7565b9050919050565b600060208201905081810360008301526131ae81612cda565b9050919050565b600060208201905081810360008301526131ce81612cfd565b9050919050565b600060208201905081810360008301526131ee81612d20565b9050919050565b6000602082019050818103600083015261320e81612d43565b9050919050565b6000602082019050818103600083015261322e81612d66565b9050919050565b6000602082019050818103600083015261324e81612d89565b9050919050565b6000602082019050818103600083015261326e81612dcf565b9050919050565b6000602082019050818103600083015261328e81612df2565b9050919050565b60006020820190506132aa6000830184612e15565b92915050565b60006020820190506132c56000830184612e24565b92915050565b60006132d56132e6565b90506132e18282613566565b919050565b6000604051905090565b600067ffffffffffffffff82111561330b5761330a61362e565b5b6133148261365d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613353826134b7565b915061335e836134b7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613393576133926135a1565b5b828201905092915050565b60006133a9826134b7565b91506133b4836134b7565b9250826133c4576133c36135d0565b5b828204905092915050565b60006133da826134b7565b91506133e5836134b7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561341e5761341d6135a1565b5b828202905092915050565b6000613434826134b7565b915061343f836134b7565b925082821015613452576134516135a1565b5b828203905092915050565b600061346882613497565b9050919050565b60008115159050919050565b6000819050919050565b60006134908261345d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006134d9826134e0565b9050919050565b60006134eb82613497565b9050919050565b82818337600083830152505050565b60005b8381101561351f578082015181840152602081019050613504565b8381111561352e576000848401525b50505050565b6000600282049050600182168061354c57607f821691505b602082108114156135605761355f6135ff565b5b50919050565b61356f8261365d565b810181811067ffffffffffffffff8211171561358e5761358d61362e565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f5452414e534645525f414d4f554e545f455843454544535f414c4c4f57414e4360008201527f4500000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f5452414e534645525f46524f4d5f5448455f5a45524f5f414444524553530000600082015250565b7f4255524e5f46524f4d5f5448455f5a45524f5f41444452455353000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f415050524f56455f544f5f5a45524f5f41444452455353000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4445435245415345445f414c4c4f57414e43455f42454c4f575f5a45524f0000600082015250565b7f74656e6465722000000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5452414e534645525f544f5f5448455f5a45524f5f4144445245535300000000600082015250565b7f4255524e5f414d4f554e545f455843454544535f42414c414e43450000000000600082015250565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5452414e534645525f414d4f554e545f455843454544535f42414c414e434500600082015250565b7f7400000000000000000000000000000000000000000000000000000000000000600082015250565b7f415050524f56455f46524f4d5f5a45524f5f4144445245535300000000000000600082015250565b7f4d494e545f544f5f5448455f5a45524f5f414444524553530000000000000000600082015250565b613abb8161345d565b8114613ac657600080fd5b50565b613ad28161347b565b8114613add57600080fd5b50565b613ae981613485565b8114613af457600080fd5b50565b613b00816134b7565b8114613b0b57600080fd5b50565b613b17816134c1565b8114613b2257600080fd5b5056fea2646970667358221220878c66378b0f3429fb3f0e8c5cdce13befb933462e7f1d0694c45e9d0a980c1e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063a9059cbb11610097578063dd62ed3e11610071578063dd62ed3e1461050e578063f2fde38b1461053e578063f3044ac71461055a578063f5eb42dc1461058a576101a9565b8063a9059cbb146104a4578063d5002f2e146104d4578063d505accf146104f2576101a9565b80638da5cb5b116100d35780638da5cb5b1461040857806395d89b41146104265780639dc29fac14610444578063a457c2d714610474576101a9565b8063715018a6146103b05780637ecebe00146103ba5780638d7a7164146103ea576101a9565b806323b872dd116101665780633644e515116101405780633644e51514610302578063395093511461032057806340c10f191461035057806370a0823114610380576101a9565b806323b872dd1461028457806327def4fd146102b4578063313ce567146102e4576101a9565b80630216b5ec146101ae57806306fdde03146101cc578063077f224a146101ea578063095ea7b31461021a57806310eae6b51461024a57806318160ddd14610266575b600080fd5b6101b66105ba565b6040516101c39190612ff8565b60405180910390f35b6101d46105e1565b6040516101e19190613013565b60405180910390f35b61020460048036038101906101ff9190612985565b610673565b6040516102119190612ec9565b60405180910390f35b610234600480360381019061022f9190612920565b610876565b6040516102419190612ec9565b60405180910390f35b610264600480360381019061025f919061295c565b61088d565b005b61026e610988565b60405161027b9190613295565b60405180910390f35b61029e60048036038101906102999190612833565b610997565b6040516102ab9190612ec9565b60405180910390f35b6102ce60048036038101906102c99190612a04565b610a8a565b6040516102db9190613295565b60405180910390f35b6102ec610a9c565b6040516102f991906132b0565b60405180910390f35b61030a610aa5565b6040516103179190612ee4565b60405180910390f35b61033a60048036038101906103359190612920565b610ab4565b6040516103479190612ec9565b60405180910390f35b61036a60048036038101906103659190612920565b610b53565b6040516103779190612ec9565b60405180910390f35b61039a600480360381019061039591906127ce565b610bee565b6040516103a79190613295565b60405180910390f35b6103b8610c08565b005b6103d460048036038101906103cf91906127ce565b610c90565b6040516103e19190613295565b60405180910390f35b6103f2610ce0565b6040516103ff9190613295565b60405180910390f35b610410610cef565b60405161041d9190612eae565b60405180910390f35b61042e610d19565b60405161043b9190613013565b60405180910390f35b61045e60048036038101906104599190612920565b610dab565b60405161046b9190612ec9565b60405180910390f35b61048e60048036038101906104899190612920565b610e4c565b60405161049b9190612ec9565b60405180910390f35b6104be60048036038101906104b99190612920565b610f33565b6040516104cb9190612ec9565b60405180910390f35b6104dc610f4a565b6040516104e99190613295565b60405180910390f35b61050c60048036038101906105079190612882565b610f59565b005b610528600480360381019061052391906127f7565b61107d565b6040516105359190613295565b60405180910390f35b610558600480360381019061055391906127ce565b611105565b005b610574600480360381019061056f9190612a04565b6111fd565b6040516105819190613295565b60405180910390f35b6105a4600480360381019061059f91906127ce565b61120f565b6040516105b19190613295565b60405180910390f35b61010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060606880546105f090613534565b80601f016020809104026020016040519081016040528092919081815260200182805461061c90613534565b80156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b5050505050905090565b60008060019054906101000a900460ff168061069a575060008054906101000a900460ff16155b6106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d090613175565b60405180910390fd5b60008060019054906101000a900460ff161590508015610729576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610731611221565b6107396112fa565b6107818560405160200161074d9190612e6a565b6040516020818303038152906040528560405160200161076d9190612e8c565b6040516020818303038152906040526113e3565b6107df856040516020016107959190612e6a565b6040516020818303038152906040526040518060400160405280600181526020017f31000000000000000000000000000000000000000000000000000000000000008152506114ec565b610807856040516020016107f39190612e6a565b6040516020818303038152906040526115ef565b8261010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019150801561086e5760008060016101000a81548160ff0219169083151502179055505b509392505050565b60006108833384846116f0565b6001905092915050565b6108956118bc565b73ffffffffffffffffffffffffffffffffffffffff166108b3610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610909576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090090613215565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561094357600080fd5b8061010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006109926118c4565b905090565b60008061010060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5490613055565b60405180910390fd5b610a6885858561196c565b610a7e85338584610a799190613429565b6116f0565b60019150509392505050565b6000610a95826119ef565b9050919050565b60006012905090565b6000610aaf611a2a565b905090565b6000610b4933848461010060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b449190613348565b6116f0565b6001905092915050565b6000610b5d6118bc565b73ffffffffffffffffffffffffffffffffffffffff16610b7b610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890613215565b60405180910390fd5b610be383610bde84611a6a565b611abf565b506001905092915050565b6000610c01610bfc83611ba3565b6119ef565b9050919050565b610c106118bc565b73ffffffffffffffffffffffffffffffffffffffff16610c2e610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b90613215565b60405180910390fd5b610c8e6000611bec565b565b6000610cd960cb60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611cb2565b9050919050565b6000610cea6118c4565b905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060698054610d2890613534565b80601f0160208091040260200160405190810160405280929190818152602001828054610d5490613534565b8015610da15780601f10610d7657610100808354040283529160200191610da1565b820191906000526020600020905b815481529060010190602001808311610d8457829003601f168201915b5050505050905090565b6000610db56118bc565b73ffffffffffffffffffffffffffffffffffffffff16610dd3610cef565b73ffffffffffffffffffffffffffffffffffffffff1614610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2090613215565b60405180910390fd5b6000610e3483611a6a565b9050610e408482611cc0565b50600191505092915050565b60008061010060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610f12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0990613155565b60405180910390fd5b610f2833858584610f239190613429565b6116f0565b600191505092915050565b6000610f4033848461196c565b6001905092915050565b6000610f54611e2c565b905090565b83421115610f9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9390613115565b60405180910390fd5b600060cc54888888610fad8c611e36565b89604051602001610fc396959493929190612eff565b6040516020818303038152906040528051906020012090506000610fe682611e94565b90506000610ff682878787611eae565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611066576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105d906131f5565b60405180910390fd5b6110718a8a8a6116f0565b50505050505050505050565b600061010060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b61110d6118bc565b73ffffffffffffffffffffffffffffffffffffffff1661112b610cef565b73ffffffffffffffffffffffffffffffffffffffff1614611181576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117890613215565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156111f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e8906130d5565b60405180910390fd5b6111fa81611bec565b50565b600061120882611a6a565b9050919050565b600061121a82611ba3565b9050919050565b600060019054906101000a900460ff1680611247575060008054906101000a900460ff16155b611286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127d90613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156112d6576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156112f75760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611320575060008054906101000a900460ff16155b61135f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135690613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156113af576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6113bf6113ba6118bc565b611bec565b80156113e05760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611409575060008054906101000a900460ff16155b611448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143f90613175565b60405180910390fd5b60008060019054906101000a900460ff161590508015611498576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82606890805190602001906114ae929190612645565b5081606990805190602001906114c5929190612645565b5080156114e75760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680611512575060008054906101000a900460ff16155b611551576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154890613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156115a1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000838051906020012090506000838051906020012090508160978190555080609881905550505080156115ea5760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680611615575060008054906101000a900460ff16155b611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90613175565b60405180910390fd5b60008060019054906101000a900460ff1615905080156116a4576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960cc8190555080156116ec5760008060016101000a81548160ff0219169083151502179055505b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175790613255565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c7906130f5565b60405180910390fd5b8061010060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118af9190613295565b60405180910390a3505050565b600033905090565b600061010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561192f57600080fd5b505afa158015611943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119679190612a2d565b905090565b600061197782611a6a565b9050611984848483611ed9565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119e19190613295565b60405180910390a350505050565b6000806119fa611e2c565b90506000811415611a0f576000915050611a25565b611a2183611a1b6118c4565b836120f2565b9150505b919050565b6000611a657f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611a58612126565b611a60612130565b61213a565b905090565b600080611a756118c4565b90506000611a81611e2c565b90506000811415611a96578392505050611aba565b6000821415611aaa57600092505050611aba565b611ab58482846120f2565b925050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2790613275565b60405180910390fd5b8160fe54611b3e9190613348565b90508160ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b8f9190613348565b925050819055508060fe8190555092915050565b600060ff60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611d31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d28906130b5565b60405180910390fd5b600060ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115611db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daf906131d5565b60405180910390fd5b8260fe54611dc69190613429565b91508260ff60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e179190613429565b925050819055508160fe819055505092915050565b600060fe54905090565b60008060cb60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050611e8381611cb2565b9150611e8e81612174565b50919050565b6000611ea7611ea1611a2a565b8361218a565b9050919050565b6000806000611ebf878787876121bd565b91509150611ecc816122ca565b8192505050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4090613095565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb0906131b5565b60405180910390fd5b600060ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080821115612040576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203790613235565b60405180910390fd5b8160ff60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461208f9190613429565b925050819055508160ff60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546120e59190613348565b9250508190555050505050565b6000683635c9adc5dea00000612108848461261b565b8561211391906133cf565b61211d919061339e565b90509392505050565b6000609754905090565b6000609854905090565b60008383834630604051602001612155959493929190612f60565b6040516020818303038152906040528051906020012090509392505050565b6001816000016000828254019250508190555050565b6000828260405160200161219f929190612e33565b60405160208183030381529060405280519060200120905092915050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156121f85760006003915091506122c1565b601b8560ff16141580156122105750601c8560ff1614155b156122225760006004915091506122c1565b6000600187878787604051600081526020016040526040516122479493929190612fb3565b6020604051602081039080840390855afa158015612269573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156122b8576000600192509250506122c1565b80600092509250505b94509492505050565b60006004811115612304577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561233d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561234857612618565b60016004811115612382577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156123bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156123fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f390613035565b60405180910390fd5b60026004811115612436577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561246f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156124b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a790613075565b60405180910390fd5b600360048111156124ea577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115612523577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255b90613135565b60405180910390fd5b60048081111561259d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156125d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415612617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260e90613195565b60405180910390fd5b5b50565b600081683635c9adc5dea000008461263391906133cf565b61263d919061339e565b905092915050565b82805461265190613534565b90600052602060002090601f01602090048101928261267357600085556126ba565b82601f1061268c57805160ff19168380011785556126ba565b828001600101855582156126ba579182015b828111156126b957825182559160200191906001019061269e565b5b5090506126c791906126cb565b5090565b5b808211156126e45760008160009055506001016126cc565b5090565b60006126fb6126f6846132f0565b6132cb565b90508281526020810184848401111561271357600080fd5b61271e8482856134f2565b509392505050565b60008135905061273581613ab2565b92915050565b60008135905061274a81613ac9565b92915050565b60008135905061275f81613ae0565b92915050565b600082601f83011261277657600080fd5b81356127868482602086016126e8565b91505092915050565b60008135905061279e81613af7565b92915050565b6000815190506127b381613af7565b92915050565b6000813590506127c881613b0e565b92915050565b6000602082840312156127e057600080fd5b60006127ee84828501612726565b91505092915050565b6000806040838503121561280a57600080fd5b600061281885828601612726565b925050602061282985828601612726565b9150509250929050565b60008060006060848603121561284857600080fd5b600061285686828701612726565b935050602061286786828701612726565b92505060406128788682870161278f565b9150509250925092565b600080600080600080600060e0888a03121561289d57600080fd5b60006128ab8a828b01612726565b97505060206128bc8a828b01612726565b96505060406128cd8a828b0161278f565b95505060606128de8a828b0161278f565b94505060806128ef8a828b016127b9565b93505060a06129008a828b0161273b565b92505060c06129118a828b0161273b565b91505092959891949750929550565b6000806040838503121561293357600080fd5b600061294185828601612726565b92505060206129528582860161278f565b9150509250929050565b60006020828403121561296e57600080fd5b600061297c84828501612750565b91505092915050565b60008060006060848603121561299a57600080fd5b600084013567ffffffffffffffff8111156129b457600080fd5b6129c086828701612765565b935050602084013567ffffffffffffffff8111156129dd57600080fd5b6129e986828701612765565b92505060406129fa86828701612750565b9150509250925092565b600060208284031215612a1657600080fd5b6000612a248482850161278f565b91505092915050565b600060208284031215612a3f57600080fd5b6000612a4d848285016127a4565b91505092915050565b612a5f8161345d565b82525050565b612a6e8161346f565b82525050565b612a7d8161347b565b82525050565b612a94612a8f8261347b565b613597565b82525050565b612aa3816134ce565b82525050565b6000612ab482613321565b612abe818561332c565b9350612ace818560208601613501565b612ad78161365d565b840191505092915050565b6000612aed82613321565b612af7818561333d565b9350612b07818560208601613501565b80840191505092915050565b6000612b2060188361332c565b9150612b2b8261366e565b602082019050919050565b6000612b4360218361332c565b9150612b4e82613697565b604082019050919050565b6000612b66601f8361332c565b9150612b71826136e6565b602082019050919050565b6000612b89601e8361332c565b9150612b948261370f565b602082019050919050565b6000612bac601a8361332c565b9150612bb782613738565b602082019050919050565b6000612bcf60268361332c565b9150612bda82613761565b604082019050919050565b6000612bf260178361332c565b9150612bfd826137b0565b602082019050919050565b6000612c1560028361333d565b9150612c20826137d9565b600282019050919050565b6000612c38601d8361332c565b9150612c4382613802565b602082019050919050565b6000612c5b60228361332c565b9150612c668261382b565b604082019050919050565b6000612c7e601e8361332c565b9150612c898261387a565b602082019050919050565b6000612ca160078361333d565b9150612cac826138a3565b600782019050919050565b6000612cc4602e8361332c565b9150612ccf826138cc565b604082019050919050565b6000612ce760228361332c565b9150612cf28261391b565b604082019050919050565b6000612d0a601c8361332c565b9150612d158261396a565b602082019050919050565b6000612d2d601b8361332c565b9150612d3882613993565b602082019050919050565b6000612d50601e8361332c565b9150612d5b826139bc565b602082019050919050565b6000612d7360208361332c565b9150612d7e826139e5565b602082019050919050565b6000612d96601f8361332c565b9150612da182613a0e565b602082019050919050565b6000612db960018361333d565b9150612dc482613a37565b600182019050919050565b6000612ddc60198361332c565b9150612de782613a60565b602082019050919050565b6000612dff60188361332c565b9150612e0a82613a89565b602082019050919050565b612e1e816134b7565b82525050565b612e2d816134c1565b82525050565b6000612e3e82612c08565b9150612e4a8285612a83565b602082019150612e5a8284612a83565b6020820191508190509392505050565b6000612e7582612c94565b9150612e818284612ae2565b915081905092915050565b6000612e9782612dac565b9150612ea38284612ae2565b915081905092915050565b6000602082019050612ec36000830184612a56565b92915050565b6000602082019050612ede6000830184612a65565b92915050565b6000602082019050612ef96000830184612a74565b92915050565b600060c082019050612f146000830189612a74565b612f216020830188612a56565b612f2e6040830187612a56565b612f3b6060830186612e15565b612f486080830185612e15565b612f5560a0830184612e15565b979650505050505050565b600060a082019050612f756000830188612a74565b612f826020830187612a74565b612f8f6040830186612a74565b612f9c6060830185612e15565b612fa96080830184612a56565b9695505050505050565b6000608082019050612fc86000830187612a74565b612fd56020830186612e24565b612fe26040830185612a74565b612fef6060830184612a74565b95945050505050565b600060208201905061300d6000830184612a9a565b92915050565b6000602082019050818103600083015261302d8184612aa9565b905092915050565b6000602082019050818103600083015261304e81612b13565b9050919050565b6000602082019050818103600083015261306e81612b36565b9050919050565b6000602082019050818103600083015261308e81612b59565b9050919050565b600060208201905081810360008301526130ae81612b7c565b9050919050565b600060208201905081810360008301526130ce81612b9f565b9050919050565b600060208201905081810360008301526130ee81612bc2565b9050919050565b6000602082019050818103600083015261310e81612be5565b9050919050565b6000602082019050818103600083015261312e81612c2b565b9050919050565b6000602082019050818103600083015261314e81612c4e565b9050919050565b6000602082019050818103600083015261316e81612c71565b9050919050565b6000602082019050818103600083015261318e81612cb7565b9050919050565b600060208201905081810360008301526131ae81612cda565b9050919050565b600060208201905081810360008301526131ce81612cfd565b9050919050565b600060208201905081810360008301526131ee81612d20565b9050919050565b6000602082019050818103600083015261320e81612d43565b9050919050565b6000602082019050818103600083015261322e81612d66565b9050919050565b6000602082019050818103600083015261324e81612d89565b9050919050565b6000602082019050818103600083015261326e81612dcf565b9050919050565b6000602082019050818103600083015261328e81612df2565b9050919050565b60006020820190506132aa6000830184612e15565b92915050565b60006020820190506132c56000830184612e24565b92915050565b60006132d56132e6565b90506132e18282613566565b919050565b6000604051905090565b600067ffffffffffffffff82111561330b5761330a61362e565b5b6133148261365d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613353826134b7565b915061335e836134b7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613393576133926135a1565b5b828201905092915050565b60006133a9826134b7565b91506133b4836134b7565b9250826133c4576133c36135d0565b5b828204905092915050565b60006133da826134b7565b91506133e5836134b7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561341e5761341d6135a1565b5b828202905092915050565b6000613434826134b7565b915061343f836134b7565b925082821015613452576134516135a1565b5b828203905092915050565b600061346882613497565b9050919050565b60008115159050919050565b6000819050919050565b60006134908261345d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006134d9826134e0565b9050919050565b60006134eb82613497565b9050919050565b82818337600083830152505050565b60005b8381101561351f578082015181840152602081019050613504565b8381111561352e576000848401525b50505050565b6000600282049050600182168061354c57607f821691505b602082108114156135605761355f6135ff565b5b50919050565b61356f8261365d565b810181811067ffffffffffffffff8211171561358e5761358d61362e565b5b80604052505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f5452414e534645525f414d4f554e545f455843454544535f414c4c4f57414e4360008201527f4500000000000000000000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f5452414e534645525f46524f4d5f5448455f5a45524f5f414444524553530000600082015250565b7f4255524e5f46524f4d5f5448455f5a45524f5f41444452455353000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f415050524f56455f544f5f5a45524f5f41444452455353000000000000000000600082015250565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b7f45524332305065726d69743a206578706972656420646561646c696e65000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4445435245415345445f414c4c4f57414e43455f42454c4f575f5a45524f0000600082015250565b7f74656e6465722000000000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5452414e534645525f544f5f5448455f5a45524f5f4144445245535300000000600082015250565b7f4255524e5f414d4f554e545f455843454544535f42414c414e43450000000000600082015250565b7f45524332305065726d69743a20696e76616c6964207369676e61747572650000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5452414e534645525f414d4f554e545f455843454544535f42414c414e434500600082015250565b7f7400000000000000000000000000000000000000000000000000000000000000600082015250565b7f415050524f56455f46524f4d5f5a45524f5f4144445245535300000000000000600082015250565b7f4d494e545f544f5f5448455f5a45524f5f414444524553530000000000000000600082015250565b613abb8161345d565b8114613ac657600080fd5b50565b613ad28161347b565b8114613add57600080fd5b50565b613ae981613485565b8114613af457600080fd5b50565b613b00816134b7565b8114613b0b57600080fd5b50565b613b17816134c1565b8114613b2257600080fd5b5056fea2646970667358221220878c66378b0f3429fb3f0e8c5cdce13befb933462e7f1d0694c45e9d0a980c1e64736f6c63430008040033",
  "devdoc": {
    "author": "Tenderize <info@tenderize.me>",
    "details": "TenderToken balances are dynamic and are calculated based on the accounts' shares and the total amount of Tokens controlled by the protocol. Account shares aren't normalized, so the contract also stores the sum of all shares to calculate each account's token balance which equals to: shares[account] * _getTotalPooledTokens() / _getTotalShares()",
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
      },
      "allowance(address,address)": {
        "details": "This value changes when `approve` or `transferFrom` is called.",
        "params": {
          "_owner": "address that approved the allowance",
          "_spender": "address that is allowed to spend the allowance"
        },
        "returns": {
          "_0": "allowance amount '_spender' is allowed to spend from '_owner'"
        }
      },
      "approve(address,uint256)": {
        "details": "Emits an `Approval` event.Requirements: - `_spender` cannot be the zero address.The `_amount` argument is the amount of tokens, not shares.",
        "params": {
          "_amount": "amount of tokens to allow '_spender' to spend",
          "_spender": "address of the spender allowed to approve tokens from caller"
        },
        "returns": {
          "_0": "success a boolean value indicating whether the operation succeeded."
        }
      },
      "balanceOf(address)": {
        "details": "Balances are dynamic and equal the `_account`'s share in the amount of the total Tokens controlled by the protocol. See `sharesOf`.",
        "params": {
          "_account": "address of the account to check the balance for"
        },
        "returns": {
          "_0": "balance token balance of `_account`"
        }
      },
      "burn(address,uint256)": {
        "details": "Only callable by contract ownerCalculates the amount of shares to destroy based on the specified '_amount' and destroy shares rather than burning tokens'_recipient' should also withdraw from Tenderizer atomically",
        "params": {
          "_account": "address to burn the tokens from",
          "_amount": "amount to burn"
        },
        "returns": {
          "_0": "success a boolean value indicating whether the operation succeeded."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "decimals the number of decimals for getting user representation of a token amount."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the zero address. - `_spender` must have allowance for the caller of at least `_subtractedValue`.",
        "params": {
          "_spender": "address of the spender allowed to approve tokens from caller",
          "_subtractedValue": "amount to subtract from current allowance"
        },
        "returns": {
          "_0": "success a boolean value indicating whether the operation succeeded."
        }
      },
      "getTotalPooledTokens()": {
        "details": "The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.",
        "returns": {
          "_0": "totalPooledTokens total amount of pooled tokens"
        }
      },
      "getTotalShares()": {
        "details": "The sum of all accounts' shares can be an arbitrary number, therefore it is necessary to store it in order to calculate each account's relative share.",
        "returns": {
          "_0": "totalShares total amount of shares"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the the zero address.",
        "params": {
          "_addedValue": "amount to add to allowance",
          "_spender": "address of the spender allowed to approve tokens from caller"
        },
        "returns": {
          "_0": "success a boolean value indicating whether the operation succeeded."
        }
      },
      "initialize(string,string,address)": {
        "params": {
          "_name": "name of the token (steak)",
          "_stakedReader": "contract address implementing the ITotalStakedReader interface",
          "_symbol": "symbol of the token (steak)"
        },
        "returns": {
          "_0": "a boolean value indicating whether the init succeeded."
        }
      },
      "mint(address,uint256)": {
        "details": "Only callable by contract ownerCalculates the amount of shares to create based on the specified '_amount' and creates new shares rather than minting actual tokens'_recipient' should also deposit into Tenderizer atomically to prevent diluation of existing particpants",
        "params": {
          "_amount": "amount to mint",
          "_recipient": "address to mint tokens for"
        },
        "returns": {
          "_0": "success a boolean value indicating whether the operation succeeded."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "nonces(address)": {
        "details": "See {IERC20Permit-nonces}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "See {IERC20Permit-permit}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTotalStakedReader(address)": {
        "details": "Only callable by contract owner.Used to determine TenderToken total supply.",
        "params": {
          "_stakedReader": "contract address implementing the ITotalStakedReader interface"
        }
      },
      "sharesOf(address)": {
        "params": {
          "_account": "address of the account"
        },
        "returns": {
          "_0": "shares the amount of shares owned by `_account`."
        }
      },
      "sharesToTokens(uint256)": {
        "params": {
          "_shares": "the amount of shares to calculate the amount of tokens for"
        },
        "returns": {
          "_0": "tokens the amount of tokens represented by the shares"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "tokensToShares(uint256)": {
        "params": {
          "_tokens": "amount of tokens to calculate shares for"
        },
        "returns": {
          "_0": "shares nominal amount of shares the tokens represent"
        }
      },
      "totalSupply()": {
        "details": "Always equals to `_getTotalPooledTokens()` since token amount is pegged to the total amount of Tokens controlled by the protocol.",
        "returns": {
          "_0": "totalSupply total supply"
        }
      },
      "transfer(address,uint256)": {
        "details": "Emits a `Transfer` event.Requirements: - `_recipient` cannot be the zero address. - the caller must have a balance of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.",
        "params": {
          "_amount": "amount of tokens to transfer",
          "_recipient": "address of the recipient"
        },
        "returns": {
          "_0": "success a boolean value indicating whether the operation succeeded."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Emits a `Transfer` event.Emits an `Approval` event indicating the updated allowance.Requirements: - `_sender` and `_recipient` cannot be the zero addresses. - `_sender` must have a balance of at least `_amount`. - the caller must have allowance for `_sender`'s tokens of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.",
        "params": {
          "_recipient": "address of the recipient",
          "_sender": "address of the account to transfer tokens from"
        },
        "returns": {
          "_0": "success a boolean value indicating whether the operation succeeded."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "allowances": {
        "details": "Allowances nominated in tokens, not token shares."
      },
      "shares": {
        "details": "Nominal amount of shares held by each account"
      },
      "totalShares": {
        "details": "Total amount of outstanding shares"
      },
      "totalStakedReader": {
        "details": "Tenderizer address, to read total staked tokens"
      }
    },
    "title": "Interest-bearing ERC20-like token for Tenderize protocol.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "The remaining number of tokens that `_spender` is allowed to spend behalf of `_owner` through `transferFrom`. This is zero by default."
      },
      "approve(address,uint256)": {
        "notice": "Sets `_amount` as the allowance of `_spender` over the caller's tokens."
      },
      "balanceOf(address)": {
        "notice": "the amount of tokens owned by the `_account`."
      },
      "burn(address,uint256)": {
        "notice": "Burns '_amount' of tokens from '_recipient'"
      },
      "decimals()": {
        "notice": "The number of decimals the TenderToken uses."
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`."
      },
      "getTotalPooledTokens()": {
        "notice": "Total amount of underlying tokens controlled by the Tenderizer."
      },
      "getTotalShares()": {
        "notice": "The total amount of shares in existence."
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`."
      },
      "initialize(string,string,address)": {
        "notice": "Initilize the TenderToken Contract"
      },
      "mint(address,uint256)": {
        "notice": "Mints '_amount' of tokens for '_recipient'"
      },
      "setTotalStakedReader(address)": {
        "notice": "sets a TotalStakedReader to read the total staked tokens from"
      },
      "sharesOf(address)": {
        "notice": "The amount of shares owned by an account"
      },
      "sharesToTokens(uint256)": {
        "notice": "The amount of tokens that corresponds to `_shares` token shares."
      },
      "tokensToShares(uint256)": {
        "notice": "The amount of shares that corresponds to `_tokens` protocol-controlled Tokens."
      },
      "totalSupply()": {
        "notice": "The total supply of tender tokens in existence."
      },
      "transfer(address,uint256)": {
        "notice": "Transfers `_amount` tokens from the caller's account to the `_recipient` account."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers `_amount` tokens from `_sender` to `_recipient` using the allowance mechanism. `_amount` is then deducted from the caller's allowance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1267,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 253,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 255,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 257,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_name",
        "offset": 0,
        "slot": "104",
        "type": "t_string_storage"
      },
      {
        "astId": 259,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 800,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1718,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "151",
        "type": "t_bytes32"
      },
      {
        "astId": 1720,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "152",
        "type": "t_bytes32"
      },
      {
        "astId": 1857,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1017,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_nonces",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Counter)1274_storage)"
      },
      {
        "astId": 1019,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_PERMIT_TYPEHASH",
        "offset": 0,
        "slot": "204",
        "type": "t_bytes32"
      },
      {
        "astId": 1187,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14453,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "totalShares",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 14458,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "shares",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14465,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "allowances",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14469,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "totalStakedReader",
        "offset": 0,
        "slot": "257",
        "type": "t_contract(ITotalStakedReader)5644"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ITotalStakedReader)5644": {
        "encoding": "inplace",
        "label": "contract ITotalStakedReader",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Counter)1274_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CountersUpgradeable.Counter)",
        "numberOfBytes": "32",
        "value": "t_struct(Counter)1274_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1274_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 1273,
            "contract": "contracts/token/TenderToken.sol:TenderToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}