{
  "address": "0xda73ae74a09c70d27f76E15ad8F33D1D18589D87",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "NewSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenReceived",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenSold",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "A_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_A",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ADMIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SWAP_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL_PRECISION_DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "IERC20"
            },
            {
              "internalType": "uint256",
              "name": "precisionMultiplier",
              "type": "uint256"
            }
          ],
          "internalType": "struct SwapUtils.PooledToken[2]",
          "name": "tokens",
          "type": "tuple[2]"
        },
        {
          "internalType": "contract LiquidityPoolToken",
          "name": "lpToken",
          "type": "LiquidityPoolToken"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbab3bd099e5d4945fdb8124fe6e97a2ee527ca716553af456d9daccda7b67c23",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0xda73ae74a09c70d27f76E15ad8F33D1D18589D87",
    "transactionIndex": 0,
    "gasUsed": "76871506",
    "logsBloom": "0x
    "blockHash": "0x0b05dffc024de39f6cf5492fd96e077a55d2282e74a110136e877a11b5b6c051",
    "transactionHash": "0xbab3bd099e5d4945fdb8124fe6e97a2ee527ca716553af456d9daccda7b67c23",
    "logs": [],
    "blockNumber": 9588477,
    "cumulativeGasUsed": "37828545",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "14b0e1ff9d2182625fa00645b9479363",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenReceived\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenSold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"A_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_A\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ADMIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAP_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_PRECISION_DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"IERC20\"},{\"internalType\":\"uint256\",\"name\":\"precisionMultiplier\",\"type\":\"uint256\"}],\"internalType\":\"struct SwapUtils.PooledToken[2]\",\"name\":\"tokens\",\"type\":\"tuple[2]\"},{\"internalType\":\"contract LiquidityPoolToken\",\"name\":\"lpToken\",\"type\":\"LiquidityPoolToken\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)\":{\"params\":{\"amounts\":\"the amounts of each token to add, in their native precision according to the cardinality of 'tokens'\",\"amplificationParams\":\"amplification parameters for the pool\",\"feeParams\":\"fee parameters for the pool\",\"lpToken\":\"Liquidity pool token contract\",\"minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\",\"tokens\":\"Array of [token0, token1]\"},\"returns\":{\"_0\":\"amount of LP token user received\"}},\"calculateRemoveLiquidity(uint256,SwapUtils.PooledToken[2],LiquidityPoolToken)\":{\"params\":{\"amount\":\"the amount of LP tokens that would to be burned on withdrawal\",\"lpToken\":\"Liquidity pool token\",\"tokens\":\"the tokens of the pool in their cardinality [token0, token1]\"},\"returns\":{\"_0\":\"array of amounts of tokens user will receive\"}},\"calculateSwap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)\":{\"params\":{\"amplificationParams\":\"amplification parameters for the pool\",\"dx\":\"the number of tokens to sell\",\"feeParams\":\"fee parameters for the pool\",\"tokenFrom\":\"the token to sell\",\"tokenTo\":\"the token to buy\"},\"returns\":{\"dy\":\"the number of tokens the user will get\"}},\"calculateTokenAmount(SwapUtils.PooledToken[2],uint256[],bool,SwapUtils.Amplification storage,LiquidityPoolToken)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to tokens. The amount should be in each pooled token's native precision.\",\"amplificationParams\":\"amplification parameters for the pool\",\"deposit\":\"whether this is a deposit or a withdrawal\",\"lpToken\":\"liquidity pool token\",\"tokens\":\"Array of tokens in the pool          according to pool cardinality [token0, token1]\"},\"returns\":{\"_0\":\"if deposit was true, total amount of lp token that will be minted and if deposit was false, total amount of lp token that will be burned\"}},\"getA(SwapUtils.Amplification storage)\":{\"details\":\"See the StableSwap paper for details\",\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"A parameter\"}},\"getAPrecise(SwapUtils.Amplification storage)\":{\"details\":\"See the StableSwap paper for details\",\"params\":{\"self\":\"Swap struct to read from\"},\"returns\":{\"_0\":\"A parameter in its raw precision form\"}},\"getVirtualPrice(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,SwapUtils.Amplification storage,LiquidityPoolToken)\":{\"params\":{\"amplificationParams\":\"amplification parameters for the pool\",\"lpToken\":\"Liquidity pool token\",\"token0\":\"token0 in the pool\",\"token1\":\"token1 in the pool\"},\"returns\":{\"_0\":\"the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\"}},\"rampA(SwapUtils.Amplification storage,uint256,uint256)\":{\"params\":{\"futureA_\":\"the new A to ramp towards\",\"futureTime_\":\"timestamp when the new A should be reached\",\"self\":\"Swap struct to update\"}},\"removeLiquidity(uint256,SwapUtils.PooledToken[2],uint256[2],LiquidityPoolToken)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"lpToken\":\"Liquidity pool token contract\",\"minAmounts\":\"the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation. Should be according to the cardinality of 'tokens'\",\"tokens\":\"Array of [token0, token1]\"},\"returns\":{\"_0\":\"amounts of tokens the user receives for each token in the pool according to [token0, token1] cardinality\"}},\"removeLiquidityImbalance(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)\":{\"params\":{\"amounts\":\"how much of each token to withdraw according to cardinality of pooled tokens\",\"amplificationParams\":\"amplification parameters for the pool\",\"feeParams\":\"fee parameters for the pool\",\"lpToken\":\"Liquidity pool token contract\",\"maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\",\"tokens\":\"Array of [token0, token1]\"},\"returns\":{\"_0\":\"actual amount of LP tokens burned in the withdrawal\"}},\"removeLiquidityOneToken(uint256,SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)\":{\"params\":{\"amplificationParams\":\"amplification parameters for the pool\",\"feeParams\":\"fee parameters for the pool\",\"lpToken\":\"Liquidity pool token contract\",\"minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"tokenAmount\":\"the amount of the lp tokens to burn\",\"tokenCounterpart\":\"the counterpart token in the pool of the token you want to receive\",\"tokenReceive\":\"the token you want to receive\"},\"returns\":{\"_0\":\"amount chosen token that user received\"}},\"setAdminFee(SwapUtils.FeeParams storage,uint256)\":{\"details\":\"adminFee cannot be higher than 100% of the swap fee\",\"params\":{\"newAdminFee\":\"new admin fee to be applied on future transactions\",\"self\":\"Swap struct to update\"}},\"setSwapFee(SwapUtils.FeeParams storage,uint256)\":{\"details\":\"fee cannot be higher than 1% of each swap\",\"params\":{\"newSwapFee\":\"new swap fee to be applied on future transactions\",\"self\":\"Swap struct to update\"}},\"stopRampA(SwapUtils.Amplification storage)\":{\"params\":{\"self\":\"Swap struct to update\"}},\"swap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)\":{\"params\":{\"amplificationParams\":\"amplification parameters for the pool\",\"dx\":\"the number of tokens to sell\",\"feeParams\":\"fee parameters for the pool\",\"minDy\":\"the min amount the user would like to receive (revert if not met)\",\"tokenFrom\":\"the token to sell\",\"tokenTo\":\"the token to buy\"},\"returns\":{\"_0\":\"amount of token user received on swap\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)\":{\"notice\":\"Add liquidity to the pool\"},\"calculateRemoveLiquidity(uint256,SwapUtils.PooledToken[2],LiquidityPoolToken)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateSwap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)\":{\"notice\":\"Externally calculates a swap between two tokens.\"},\"calculateTokenAmount(SwapUtils.PooledToken[2],uint256[],bool,SwapUtils.Amplification storage,LiquidityPoolToken)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"},\"getA(SwapUtils.Amplification storage)\":{\"notice\":\"Return A, the amplification coefficient * n * (n - 1)\"},\"getAPrecise(SwapUtils.Amplification storage)\":{\"notice\":\"Return A in its raw precision\"},\"getVirtualPrice(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,SwapUtils.Amplification storage,LiquidityPoolToken)\":{\"notice\":\"Get the virtual price, to help calculate profit\"},\"rampA(SwapUtils.Amplification storage,uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"removeLiquidity(uint256,SwapUtils.PooledToken[2],uint256[2],LiquidityPoolToken)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool.\"},\"removeLiquidityImbalance(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances.\"},\"removeLiquidityOneToken(uint256,SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)\":{\"notice\":\"Remove liquidity from the pool all in one token.\"},\"setAdminFee(SwapUtils.FeeParams storage,uint256)\":{\"notice\":\"Sets the admin fee\"},\"setSwapFee(SwapUtils.FeeParams storage,uint256)\":{\"notice\":\"update the swap fee\"},\"stopRampA(SwapUtils.Amplification storage)\":{\"notice\":\"Stops ramping A immediately. Once this function is called, rampA() cannot be called for another 24 hours\"},\"swap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)\":{\"notice\":\"swap two tokens in the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tenderswap/SwapUtils.sol\":\"SwapUtils\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5321bbe08dd6e82e85222024dc300d4959ff8615742ad63135759883a19e02a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x4788b5ca1f6a1c34febfd25857b95e4c6c5494e2e062c820552ebaed21ae856b\",\"license\":\"MIT\"},\"contracts/tenderswap/LiquidityPoolToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\n\\ncontract LiquidityPoolToken is OwnableUpgradeable, ERC20BurnableUpgradeable, ERC20PermitUpgradeable {\\n    /**\\n     * @notice Initializes this LPToken contract with the given name and symbol\\n     * @dev The caller of this function will become the owner. A Swap contract should call this\\n     * in its initializer function.\\n     * @param name name of this token\\n     * @param symbol symbol of this token\\n     */\\n    function initialize(string memory name, string memory symbol) external initializer returns (bool) {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n        __Ownable_init_unchained();\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function.\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n        _mint(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x48df1192c11550b2c195c089f4d3138c598d7b92ff8cd1b12916b1e3ba517bc6\",\"license\":\"MIT\"},\"contracts/tenderswap/SwapUtils.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libs/MathUtils.sol\\\";\\nimport \\\"./LiquidityPoolToken.sol\\\";\\n\\npragma solidity 0.8.4;\\n\\nlibrary SwapUtils {\\n    using MathUtils for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // =============================================\\n    //                   EVENTS\\n    // =============================================\\n    event Swap(address indexed buyer, IERC20 tokenSold, uint256 amountSold, uint256 amountReceived);\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidity(address indexed provider, uint256[2] tokenAmounts, uint256 lpTokenSupply);\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        IERC20 tokenReceived,\\n        uint256 receivedAmount\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event NewAdminFee(uint256 newAdminFee);\\n    event NewSwapFee(uint256 newSwapFee);\\n\\n    // =============================================\\n    //                 SWAP LOGIC\\n    // =============================================\\n\\n    // the precision all pools tokens will be converted to\\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\\n\\n    // the denominator used to calculate admin and LP fees. For example, an\\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // Max swap fee is 1% or 100bps of each swap\\n    uint256 public constant MAX_SWAP_FEE = 10**8;\\n\\n    // Max adminFee is 100% of the swapFee\\n    // adminFee does not add additional fee on top of swapFee\\n    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n    // users but only on the earnings of LPs\\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\\n\\n    // Constant value used as max loop limit\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n\\n    uint256 internal constant NUM_TOKENS = 2;\\n\\n    struct FeeParams {\\n        uint256 swapFee;\\n        uint256 adminFee;\\n    }\\n\\n    struct PooledToken {\\n        IERC20 token;\\n        uint256 precisionMultiplier;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // {add,remove}Liquidity functions to avoid stack too deep errors\\n    struct ManageLiquidityInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n        LiquidityPoolToken lpToken;\\n        uint256 totalSupply;\\n        PooledToken[2] tokens;\\n        uint256[2] oldBalances;\\n        uint256[2] newBalances;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n    struct CalculateWithdrawOneTokenDYInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 newY;\\n        uint256 feePerToken;\\n        uint256 preciseA;\\n    }\\n\\n    /**\\n     * @notice swap two tokens in the pool\\n     * @param tokenFrom the token to sell\\n     * @param tokenTo the token to buy\\n     * @param dx the number of tokens to sell\\n     * @param minDy the min amount the user would like to receive (revert if not met)\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return amount of token user received on swap\\n     */\\n    function swap(\\n        PooledToken storage tokenFrom,\\n        PooledToken storage tokenTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) external returns (uint256) {\\n        require(dx <= tokenFrom.token.balanceOf(msg.sender), \\\"ERC20: transfer amount exceeds balance\\\");\\n        uint256 dy;\\n        uint256 dyFee;\\n        (dy, dyFee) = _calculateSwap(tokenFrom, tokenTo, dx, amplificationParams, feeParams);\\n\\n        require(dy >= minDy, \\\"Swap didn't result in min tokens\\\");\\n\\n        uint256 dyAdminFee = (dyFee * feeParams.adminFee) / FEE_DENOMINATOR / tokenTo.precisionMultiplier;\\n        // TODO: Need to handle keeping track of admin fees or transfer them instantly\\n\\n        // transfer tokens\\n        tokenFrom.token.safeTransferFrom(msg.sender, address(this), dx);\\n        tokenTo.token.safeTransfer(msg.sender, dy);\\n\\n        emit Swap(msg.sender, tokenFrom.token, dx, dy);\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Get the virtual price, to help calculate profit\\n     * @param token0 token0 in the pool\\n     * @param token1 token1 in the pool\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param lpToken Liquidity pool token\\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice(\\n        PooledToken storage token0,\\n        PooledToken storage token1,\\n        Amplification storage amplificationParams,\\n        LiquidityPoolToken lpToken\\n    ) external view returns (uint256) {\\n        uint256 xp0 = _xp(_getTokenBalance(token0.token), token0.precisionMultiplier);\\n        uint256 xp1 = _xp(_getTokenBalance(token1.token), token1.precisionMultiplier);\\n\\n        uint256 d = getD(xp0, xp1, _getAPrecise(amplificationParams));\\n        uint256 supply = lpToken.totalSupply();\\n        if (supply > 0) {\\n            return (d * (10**POOL_PRECISION_DECIMALS)) / supply;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Externally calculates a swap between two tokens.\\n     * @param tokenFrom the token to sell\\n     * @param tokenTo the token to buy\\n     * @param dx the number of tokens to sell\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return dy the number of tokens the user will get\\n     */\\n    function calculateSwap(\\n        PooledToken storage tokenFrom,\\n        PooledToken storage tokenTo,\\n        uint256 dx,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) external view returns (uint256 dy) {\\n        (dy, ) = _calculateSwap(tokenFrom, tokenTo, dx, amplificationParams, feeParams);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param tokens Array of [token0, token1]\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * according to the cardinality of 'tokens'\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken Liquidity pool token contract\\n     * @return amount of LP token user received\\n     */\\n    function addLiquidity(\\n        PooledToken[2] memory tokens,\\n        uint256[2] memory amounts,\\n        uint256 minToMint,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) external returns (uint256) {\\n        // current state\\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n            0,\\n            0,\\n            0,\\n            _getAPrecise(amplificationParams),\\n            lpToken,\\n            0,\\n            tokens,\\n            [uint256(0), uint256(0)],\\n            [uint256(0), uint256(0)]\\n        );\\n        v.totalSupply = v.lpToken.totalSupply();\\n\\n        // Get the current pool invariant d0\\n        if (v.totalSupply != 0) {\\n            uint256 _bal0 = _getTokenBalance(tokens[0].token);\\n            uint256 _bal1 = _getTokenBalance(tokens[1].token);\\n            v.oldBalances = [_bal0, _bal1];\\n            uint256 xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d0 = getD(xp0, xp1, v.preciseA);\\n        }\\n\\n        // Transfer the tokens\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokens[i].token.safeTransferFrom(msg.sender, address(this), amounts[i]);\\n        }\\n\\n        // calculate pool invariant after balance changes d1\\n        {\\n            uint256 _bal0 = _getTokenBalance(tokens[0].token);\\n            uint256 _bal1 = _getTokenBalance(tokens[1].token);\\n            v.newBalances = [_bal0, _bal1];\\n            uint256 _xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 _xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d1 = getD(_xp0, _xp1, v.preciseA);\\n            require(v.d1 > v.d0, \\\"D1 <= D0\\\");\\n        }\\n\\n        // calculate swap fees\\n        v.d2 = v.d1;\\n\\n        // first entrant doesn't pay fees\\n        uint256[2] memory fees;\\n        if (v.totalSupply != 0) {\\n            uint256 feePerToken = _feePerToken(feeParams.swapFee);\\n\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                uint256 idealBal = (v.d1 * v.oldBalances[i]) / v.d0;\\n                (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n                fees[i] = (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n                v.newBalances[i] = v.newBalances[i] - fees[i];\\n                // TODO: handle admin fee\\n            }\\n\\n            // calculate invariant after subtracting fees, d2\\n            {\\n                uint256 _xp0 = _xp(v.newBalances[0], tokens[0].precisionMultiplier);\\n                uint256 _xp1 = _xp(v.newBalances[1], tokens[1].precisionMultiplier);\\n                v.d2 = getD(_xp0, _xp1, v.preciseA);\\n            }\\n        }\\n\\n        uint256 toMint;\\n        if (v.totalSupply == 0) {\\n            toMint = v.d1;\\n        } else {\\n            toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n        }\\n\\n        require(toMint >= minToMint, \\\"Couldn't mint min requested\\\");\\n\\n        // mint the user's LP tokens\\n        v.lpToken.mint(msg.sender, toMint);\\n\\n        emit AddLiquidity(msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\n\\n        return toMint;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param tokens Array of [token0, token1]\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     * acceptable for this burn. Useful as a front-running mitigation.\\n     * Should be according to the cardinality of 'tokens'\\n     * @param lpToken Liquidity pool token contract\\n     * @return amounts of tokens the user receives for each token in the pool\\n     * according to [token0, token1] cardinality\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        PooledToken[2] calldata tokens,\\n        uint256[2] calldata minAmounts,\\n        LiquidityPoolToken lpToken\\n    ) external returns (uint256[2] memory) {\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        uint256[2] memory amounts = _calculateRemoveLiquidity(amount, tokens, totalSupply);\\n\\n        lpToken.burnFrom(msg.sender, amount);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n            tokens[i].token.safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidity(msg.sender, amounts, totalSupply - amount);\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token.\\n     * @param tokenAmount the amount of the lp tokens to burn\\n     * @param tokenReceive  the token you want to receive\\n     * @param tokenCounterpart the counterpart token in the pool of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken Liquidity pool token contract\\n     * @return amount chosen token that user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        uint256 minAmount,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) external returns (uint256) {\\n        uint256 totalSupply = lpToken.totalSupply();\\n        require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n\\n        (\\n            uint256 dy, /*uint256 dyFee*/\\n\\n        ) = _calculateWithdrawOneToken(\\n                tokenAmount,\\n                tokenReceive,\\n                tokenCounterpart,\\n                totalSupply,\\n                amplificationParams,\\n                feeParams\\n            );\\n\\n        require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n        // TODO: Handle admin fee from dyFee\\n\\n        // Transfer tokens\\n        tokenReceive.token.safeTransfer(msg.sender, dy);\\n\\n        // Burn LP tokens\\n        lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        emit RemoveLiquidityOne(msg.sender, tokenAmount, totalSupply, tokenReceive.token, dy);\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances.\\n     *\\n     * @param tokens Array of [token0, token1]\\n     * @param amounts how much of each token to withdraw according to cardinality of pooled tokens\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken Liquidity pool token contract\\n     * @return actual amount of LP tokens burned in the withdrawal\\n     */\\n    function removeLiquidityImbalance(\\n        PooledToken[2] memory tokens,\\n        uint256[2] memory amounts,\\n        uint256 maxBurnAmount,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) public returns (uint256) {\\n        ManageLiquidityInfo memory v = ManageLiquidityInfo({\\n            d0: 0,\\n            d1: 0,\\n            d2: 0,\\n            preciseA: _getAPrecise(amplificationParams),\\n            lpToken: lpToken,\\n            totalSupply: 0,\\n            tokens: tokens,\\n            oldBalances: [uint256(0), uint256(0)],\\n            newBalances: [uint256(0), uint256(0)]\\n        });\\n\\n        v.totalSupply = v.lpToken.totalSupply();\\n\\n        // Get the current pool invariant d0\\n        if (v.totalSupply != 0) {\\n            uint256 _bal0 = _getTokenBalance(tokens[0].token);\\n            uint256 _bal1 = _getTokenBalance(tokens[1].token);\\n            v.oldBalances = [_bal0, _bal1];\\n            uint256 xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d0 = getD(xp0, xp1, v.preciseA);\\n        }\\n\\n        // calculate pool invariant after balance changes d1\\n        {\\n            require(v.oldBalances[0] >= amounts[0], \\\"AMOUNT_EXCEEDS_BALANCE\\\");\\n            require(v.oldBalances[1] >= amounts[1], \\\"AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n            uint256 _bal0 = v.oldBalances[0] - amounts[0];\\n            uint256 _bal1 = v.oldBalances[1] - amounts[1];\\n            v.newBalances = [_bal0, _bal1];\\n            uint256 _xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 _xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d1 = getD(_xp0, _xp1, v.preciseA);\\n        }\\n\\n        // calculate swap fees\\n        v.d2 = v.d1;\\n\\n        // first entrant doesn't pay fees\\n        uint256[2] memory fees;\\n        uint256 feePerToken = _feePerToken(feeParams.swapFee);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 idealBal = (v.d1 * v.oldBalances[i]) / v.d0;\\n            (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n            fees[i] = (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n            v.newBalances[i] = v.newBalances[i] - fees[i];\\n            // TODO: handle admin fee\\n        }\\n\\n        // calculate invariant after subtracting fees, d2\\n        {\\n            uint256 _xp0 = _xp(v.newBalances[0], tokens[0].precisionMultiplier);\\n            uint256 _xp1 = _xp(v.newBalances[1], tokens[1].precisionMultiplier);\\n            v.d2 = getD(_xp0, _xp1, v.preciseA);\\n        }\\n\\n        uint256 tokenAmount = ((v.d0 - v.d2) * v.totalSupply) / v.d0;\\n        require(tokenAmount != 0, \\\"Burnt amount cannot be zero\\\");\\n\\n        require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n        v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokens[i].token.safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, v.d1, v.totalSupply - tokenAmount);\\n\\n        return tokenAmount;\\n    }\\n\\n    /**\\n     * @notice Calculate the dy, the amount of selected token that user receives and\\n     * the fee of withdrawing in one token\\n     * @param tokenAmount the amount to withdraw in the pool's precision\\n     * @param tokenReceive which token will be withdrawn\\n     * @param tokenCounterpart the token we need to swap for\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken liquidity pool token\\n     * @return the amount of token user will receive\\n     */\\n    function calculateWithdrawOneToken(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) internal view returns (uint256) {\\n        (uint256 availableAmount, ) = _calculateWithdrawOneToken(\\n            tokenAmount,\\n            tokenReceive,\\n            tokenCounterpart,\\n            lpToken.totalSupply(),\\n            amplificationParams,\\n            feeParams\\n        );\\n        return availableAmount;\\n    }\\n\\n    /**\\n     * @notice Calculate the dy, the amount of selected token that user receives and\\n     * the fee of withdrawing in one token\\n     * @param tokenAmount the amount to withdraw in the pool's precision\\n     * @param tokenReceive which token will be withdrawn\\n     * @param tokenCounterpart the token we need to swap for\\n     * @param totalSupply total supply of LP tokens\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return the amount of token user will receive\\n     */\\n    function _calculateWithdrawOneToken(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        uint256 totalSupply,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) internal view returns (uint256, uint256) {\\n        uint256 dy;\\n        uint256 newY;\\n        uint256 currentY;\\n\\n        (dy, newY, currentY) = calculateWithdrawOneTokenDY(\\n            tokenAmount,\\n            tokenReceive,\\n            tokenCounterpart,\\n            totalSupply,\\n            _getAPrecise(amplificationParams),\\n            feeParams.swapFee\\n        );\\n\\n        // dy_0 (without fees)\\n        // dy, dy_0 - dy\\n\\n        uint256 dySwapFee = (currentY - newY) / tokenReceive.precisionMultiplier - dy;\\n\\n        return (dy, dySwapFee);\\n    }\\n\\n    /**\\n     * @notice Calculate the dy of withdrawing in one token\\n     * @param tokenAmount the amount to withdraw in the pools precision\\n     * @param tokenReceive Swap struct to read from\\n     * @param tokenCounterpart which token will be withdrawn\\n     * @param totalSupply total supply of the lp token\\n     * @return the d and the new y after withdrawing one token\\n     */\\n    function calculateWithdrawOneTokenDY(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        uint256 totalSupply,\\n        uint256 preciseA,\\n        uint256 swapFee\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Get the current D, then solve the stableswap invariant\\n        // y_i for D - tokenAmount\\n        uint256 trBal = _getTokenBalance(tokenReceive.token);\\n        uint256 xpR = _xp(trBal, tokenReceive.precisionMultiplier);\\n\\n        uint256 tcBal = _getTokenBalance(tokenCounterpart.token);\\n        uint256 xpC = _xp(tcBal, tokenCounterpart.precisionMultiplier);\\n\\n        CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n        v.preciseA = preciseA;\\n        // swap from counterpart to receive (so counterpart is from and receive is to)\\n        v.d0 = getD(xpC, xpR, v.preciseA);\\n        v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n        require(tokenAmount <= xpR, \\\"AMOUNT_EXCEEDS_AVAILABLE\\\");\\n\\n        v.newY = getYD(v.preciseA, xpC, v.d1);\\n\\n        v.feePerToken = _feePerToken(swapFee);\\n\\n        // For xpR => dxExpected = xpR * d1 / d0 - newY\\n        // For xpC => dxExpected = xpC - (xpC * d1 / d0)\\n        // xpReduced -= dxExpected * fee / FEE_DENOMINATOR\\n        uint256 xpRReduced = xpR - (((xpR * v.d1) / v.d0 - v.newY) * v.feePerToken) / FEE_DENOMINATOR;\\n        uint256 xpCReduced = xpC - ((xpC - ((xpC * v.d1) / v.d0)) * v.feePerToken) / FEE_DENOMINATOR;\\n\\n        uint256 dy = xpRReduced - getYD(v.preciseA, xpCReduced, v.d1);\\n\\n        dy = (dy - 1) / tokenReceive.precisionMultiplier;\\n\\n        return (dy, v.newY, xpR);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param tokens Array of tokens in the pool\\n     *          according to pool cardinality [token0, token1]\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to tokens. The amount should be in each\\n     * pooled token's native precision.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param lpToken liquidity pool token\\n     * @return if deposit was true, total amount of lp token that will be minted and if\\n     * deposit was false, total amount of lp token that will be burned\\n     */\\n    function calculateTokenAmount(\\n        PooledToken[2] memory tokens,\\n        uint256[] calldata amounts,\\n        bool deposit,\\n        Amplification storage amplificationParams,\\n        LiquidityPoolToken lpToken\\n    ) external view returns (uint256) {\\n        uint256 a = _getAPrecise(amplificationParams);\\n\\n        uint256 xp0;\\n        uint256 xp0_;\\n        {\\n            uint256 prec0 = tokens[0].precisionMultiplier;\\n            uint256 bal0 = _getTokenBalance(tokens[0].token);\\n            xp0 = _xp(bal0, prec0);\\n            if (!deposit && bal0 < amounts[0]) revert(\\\"AMOUNT_EXCEEDS_SUPPLY\\\");\\n            xp0_ = _xp(deposit ? bal0 + amounts[0] : bal0 - amounts[0], prec0);\\n        }\\n\\n        uint256 xp1;\\n        uint256 xp1_;\\n        {\\n            uint256 prec1 = tokens[1].precisionMultiplier;\\n            uint256 bal1 = _getTokenBalance(tokens[1].token);\\n            xp1 = _xp(bal1, prec1);\\n            if (!deposit && bal1 < amounts[1]) revert(\\\"AMOUNT_EXCEEDS_SUPPLY\\\");\\n            xp1_ = _xp(deposit ? bal1 + amounts[1] : bal1 - amounts[1], prec1);\\n        }\\n\\n        uint256 d0 = getD(xp0, xp1, a);\\n        uint256 d1 = getD(xp0_, xp1_, a);\\n\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        if (deposit) {\\n            return totalSupply == 0 ? d1 : ((d1 - d0) * totalSupply) / d0;\\n        } else {\\n            return ((d0 - d1) * totalSupply) / d0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the price of a token in the pool with given\\n     * precision-adjusted balances and a particular D.\\n     *\\n     * @dev This is accomplished via solving the invariant iteratively.\\n     * See the StableSwap paper and Curve.fi implementation for further details.\\n     *\\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     * x_1**2 + b*x_1 = c\\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     *\\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n     * @param xpFrom a precision-adjusted balance of the token to send\\n     * @param d the stableswap invariant\\n     * @return the price of the token, in the same precision as in xp\\n     */\\n    function getYD(\\n        uint256 a,\\n        uint256 xpFrom,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        uint256 c = (d * d) / (xpFrom * NUM_TOKENS);\\n        uint256 s = xpFrom;\\n        uint256 nA = a * NUM_TOKENS;\\n\\n        c = (c * d * A_PRECISION) / (nA * NUM_TOKENS);\\n\\n        uint256 b = s + ((d * A_PRECISION) / nA);\\n\\n        uint256 yPrev;\\n        uint256 y = d;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            uint256 num = y * y + c;\\n            uint256 denom = y * 2 + b - d;\\n            y = num / denom;\\n            // y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Internally calculates a swap between two tokens.\\n     *\\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n     * using the token contracts.\\n     *\\n     * @param tokenFrom the token to sell\\n     * @param tokenTo the token to buy\\n     * @param dx the number of tokens to sell\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return dy the number of tokens the user will get\\n     * @return dyFee the associated fee\\n     */\\n    function _calculateSwap(\\n        PooledToken storage tokenFrom,\\n        PooledToken storage tokenTo,\\n        uint256 dx,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) internal view returns (uint256 dy, uint256 dyFee) {\\n        // tokenFrom balance\\n        uint256 fromBalance = _getTokenBalance(tokenFrom.token);\\n        // precision adjusted balance\\n        uint256 fromXp = _xp(fromBalance, tokenFrom.precisionMultiplier);\\n\\n        // tokenTo balance\\n        uint256 toBalance = _getTokenBalance(tokenTo.token);\\n        // precision adjusted balance\\n        uint256 toXp = _xp(toBalance, tokenTo.precisionMultiplier);\\n\\n        // x is the new total amount of tokenFrom\\n        uint256 x = _xp(dx, tokenFrom.precisionMultiplier) + fromXp;\\n\\n        uint256 y = getY(_getAPrecise(amplificationParams), fromXp, toXp, x);\\n\\n        dy = toXp - y - 1;\\n        dyFee = (dy * feeParams.swapFee) / FEE_DENOMINATOR;\\n        dy = (dy - dyFee) / tokenTo.precisionMultiplier;\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of\\n     * LP tokens\\n     *\\n     * @param amount the amount of LP tokens that would to be burned on\\n     * withdrawal\\n     * @param tokens the tokens of the pool in their cardinality [token0, token1]\\n     * @param lpToken Liquidity pool token\\n     * @return array of amounts of tokens user will receive\\n     */\\n    function calculateRemoveLiquidity(\\n        uint256 amount,\\n        PooledToken[2] calldata tokens,\\n        LiquidityPoolToken lpToken\\n    ) external view returns (uint256[2] memory) {\\n        uint256 totalSupply = lpToken.totalSupply();\\n        uint256[2] memory amounts = _calculateRemoveLiquidity(amount, tokens, totalSupply);\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of\\n     * LP tokens\\n     *\\n     * @param amount the amount of LP tokens that would to be burned on\\n     * withdrawal\\n     * @param tokens the tokens of the pool in their cardinality [token0, token1]\\n     * @param totalSupply total supply of the LP token\\n     * @return array of amounts of tokens user will receive\\n     */\\n    function _calculateRemoveLiquidity(\\n        uint256 amount,\\n        PooledToken[2] calldata tokens,\\n        uint256 totalSupply\\n    ) internal view returns (uint256[2] memory) {\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256[2] memory outAmounts;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 balance = _getTokenBalance(tokens[i].token);\\n            outAmounts[i] = (balance * amount) / totalSupply;\\n        }\\n        return outAmounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given FROM and TO tokens.\\n     * This function is used as a helper function to calculate how much TO token\\n     * the user should receive on swap.\\n     *\\n     * @param preciseA precise form of amplification coefficient\\n     * @param fromXp FROM precision-adjusted balance in the pool\\n     * @param toXp TO precision-adjusted balance in the pool\\n     * @param x the new total amount of precision-adjusted FROM token\\n     * @return the amount of TO token that should remain in the pool\\n     */\\n    function getY(\\n        uint256 preciseA,\\n        uint256 fromXp,\\n        uint256 toXp,\\n        uint256 x\\n    ) internal pure returns (uint256) {\\n        // d is the invariant of the pool\\n        uint256 d = getD(fromXp, toXp, preciseA);\\n        uint256 nA = NUM_TOKENS * preciseA;\\n        uint256 c = (d * d) / (x * NUM_TOKENS);\\n        c = (c * d * A_PRECISION) / (nA * NUM_TOKENS);\\n\\n        uint256 b = x + ((d * A_PRECISION) / nA);\\n        uint256 yPrev;\\n        uint256 y = d;\\n\\n        // iterative approximation\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (y * 2 + b - d);\\n            // y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n     * @param fromXp a precision-adjusted balance of the token to sell\\n     * @param toXp a precision-adjusted balance of the token to buy\\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n     * See the StableSwap paper for details\\n     * @return the invariant, at the precision of the pool\\n     */\\n    function getD(\\n        uint256 fromXp,\\n        uint256 toXp,\\n        uint256 a\\n    ) internal pure returns (uint256) {\\n        uint256 s = fromXp + toXp;\\n        if (s == 0) return 0;\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a * NUM_TOKENS;\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = d;\\n\\n            // dP = dP.mul(d).div(xp[j].mul(numTokens));\\n\\n            dP = (dP * d) / (fromXp * NUM_TOKENS);\\n            dP = (dP * d) / (toXp * NUM_TOKENS);\\n\\n            prevD = d;\\n\\n            uint256 num = ((nA * s) / A_PRECISION + (dP * NUM_TOKENS)) * d;\\n            uint256 denom = ((nA - A_PRECISION) * d) / A_PRECISION + (NUM_TOKENS + 1) * dP;\\n            d = num / denom;\\n            // d = nA\\n            //     .mul(s)\\n            //     .div(A_PRECISION)\\n            //     .add(dP.mul(NUM_TOKENS))\\n            //     .mul(d)\\n            //     .div(\\n            //         nA\\n            //             .sub(A_PRECISION)\\n            //             .mul(d)\\n            //             .div(A_PRECISION)\\n            //             .add(NUM_TOKENS.add(1).mul(dP))\\n            //     );\\n            if (d.within1(prevD)) {\\n                return d;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"D does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Given a a balance and precision multiplier, return the\\n     * precision-adjusted balance.\\n     *\\n     * @param balance a token balance in its native precision\\n     *\\n     * @param precisionMultiplier a precision multiplier for the token, When multiplied together they\\n     * should yield amounts at the pool's precision.\\n     *\\n     * @return an amount  \\\"scaled\\\" to the pool's precision\\n     */\\n    function _xp(uint256 balance, uint256 precisionMultiplier) internal pure returns (uint256) {\\n        return balance * precisionMultiplier;\\n    }\\n\\n    /**\\n     * @notice internal helper function to calculate fee per token multiplier used in\\n     * swap fee calculations\\n     * @param swapFee swap fee for the tokens\\n     */\\n    function _feePerToken(uint256 swapFee) internal pure returns (uint256) {\\n        return swapFee / NUM_TOKENS;\\n    }\\n\\n    // =============================================\\n    //             AMPLIFICATION LOGIC\\n    // =============================================\\n\\n    // Constant values used in ramping A calculations\\n    uint256 public constant A_PRECISION = 100;\\n    uint256 public constant MAX_A = 10**6;\\n    uint256 private constant MAX_A_CHANGE = 2;\\n    uint256 private constant MIN_RAMP_TIME = 14 days;\\n\\n    struct Amplification {\\n        // variables around the ramp management of A,\\n        // the amplification coefficient * n * (n - 1)\\n        // see https://www.curve.fi/stableswap-paper.pdf for details\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n    }\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter\\n     */\\n    function getA(Amplification storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function getAPrecise(Amplification storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function _getAPrecise(Amplification storage self) internal view returns (uint256) {\\n        uint256 t1 = self.futureATime; // time when ramp is finished\\n        uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n        if (block.timestamp < t1) {\\n            uint256 t0 = self.initialATime; // time when ramp is started\\n            uint256 a0 = self.initialA; // initial A value when ramp is started\\n            if (a1 > a0) {\\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n                return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\\n            } else {\\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n                return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\\n            }\\n        } else {\\n            return a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param self Swap struct to update\\n     * @param futureA_ the new A to ramp towards\\n     * @param futureTime_ timestamp when the new A should be reached\\n     */\\n    function rampA(\\n        Amplification storage self,\\n        uint256 futureA_,\\n        uint256 futureTime_\\n    ) external {\\n        require(block.timestamp >= self.initialATime + 1 days, \\\"Wait 1 day before starting ramp\\\");\\n        require(futureTime_ >= block.timestamp + MIN_RAMP_TIME, \\\"Insufficient ramp time\\\");\\n        require(futureA_ > 0 && futureA_ < MAX_A, \\\"futureA_ must be > 0 and < MAX_A\\\");\\n\\n        uint256 initialAPrecise = _getAPrecise(self);\\n        uint256 futureAPrecise = futureA_ * A_PRECISION;\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(futureAPrecise * MAX_A_CHANGE >= initialAPrecise, \\\"futureA_ is too small\\\");\\n        } else {\\n            require(futureAPrecise <= initialAPrecise * MAX_A_CHANGE, \\\"futureA_ is too large\\\");\\n        }\\n\\n        self.initialA = initialAPrecise;\\n        self.futureA = futureAPrecise;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = futureTime_;\\n\\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\n    }\\n\\n    /**\\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\\n     * cannot be called for another 24 hours\\n     * @param self Swap struct to update\\n     */\\n    function stopRampA(Amplification storage self) external {\\n        require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n\\n        uint256 currentA = _getAPrecise(self);\\n        self.initialA = currentA;\\n        self.futureA = currentA;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n\\n    // =============================================\\n    //            TOKEN INTERACTIONS\\n    // =============================================\\n\\n    function getTokenBalance(PooledToken storage _token) external view returns (uint256) {\\n        return _getTokenBalance(_token.token);\\n    }\\n\\n    function _getTokenBalance(IERC20 _token) internal view returns (uint256) {\\n        return _token.balanceOf(address(this));\\n    }\\n\\n    // =============================================\\n    //            FEE MANAGEMENT\\n    // =============================================\\n\\n    /**\\n     * @notice Sets the admin fee\\n     * @dev adminFee cannot be higher than 100% of the swap fee\\n     * @param self Swap struct to update\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(FeeParams storage self, uint256 newAdminFee) external {\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"Fee is too high\\\");\\n        self.adminFee = newAdminFee;\\n\\n        emit NewAdminFee(newAdminFee);\\n    }\\n\\n    /**\\n     * @notice update the swap fee\\n     * @dev fee cannot be higher than 1% of each swap\\n     * @param self Swap struct to update\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(FeeParams storage self, uint256 newSwapFee) external {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"Fee is too high\\\");\\n        self.swapFee = newSwapFee;\\n\\n        emit NewSwapFee(newSwapFee);\\n    }\\n}\\n\",\"keccak256\":\"0x27d47fd804ea440ab6d540aeb26b92e69924bfd57343fe76ab08da6bf3f9971d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)": {
        "params": {
          "amounts": "the amounts of each token to add, in their native precision according to the cardinality of 'tokens'",
          "amplificationParams": "amplification parameters for the pool",
          "feeParams": "fee parameters for the pool",
          "lpToken": "Liquidity pool token contract",
          "minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.",
          "tokens": "Array of [token0, token1]"
        },
        "returns": {
          "_0": "amount of LP token user received"
        }
      },
      "calculateRemoveLiquidity(uint256,SwapUtils.PooledToken[2],LiquidityPoolToken)": {
        "params": {
          "amount": "the amount of LP tokens that would to be burned on withdrawal",
          "lpToken": "Liquidity pool token",
          "tokens": "the tokens of the pool in their cardinality [token0, token1]"
        },
        "returns": {
          "_0": "array of amounts of tokens user will receive"
        }
      },
      "calculateSwap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)": {
        "params": {
          "amplificationParams": "amplification parameters for the pool",
          "dx": "the number of tokens to sell",
          "feeParams": "fee parameters for the pool",
          "tokenFrom": "the token to sell",
          "tokenTo": "the token to buy"
        },
        "returns": {
          "dy": "the number of tokens the user will get"
        }
      },
      "calculateTokenAmount(SwapUtils.PooledToken[2],uint256[],bool,SwapUtils.Amplification storage,LiquidityPoolToken)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to tokens. The amount should be in each pooled token's native precision.",
          "amplificationParams": "amplification parameters for the pool",
          "deposit": "whether this is a deposit or a withdrawal",
          "lpToken": "liquidity pool token",
          "tokens": "Array of tokens in the pool          according to pool cardinality [token0, token1]"
        },
        "returns": {
          "_0": "if deposit was true, total amount of lp token that will be minted and if deposit was false, total amount of lp token that will be burned"
        }
      },
      "getA(SwapUtils.Amplification storage)": {
        "details": "See the StableSwap paper for details",
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "A parameter"
        }
      },
      "getAPrecise(SwapUtils.Amplification storage)": {
        "details": "See the StableSwap paper for details",
        "params": {
          "self": "Swap struct to read from"
        },
        "returns": {
          "_0": "A parameter in its raw precision form"
        }
      },
      "getVirtualPrice(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,SwapUtils.Amplification storage,LiquidityPoolToken)": {
        "params": {
          "amplificationParams": "amplification parameters for the pool",
          "lpToken": "Liquidity pool token",
          "token0": "token0 in the pool",
          "token1": "token1 in the pool"
        },
        "returns": {
          "_0": "the virtual price, scaled to precision of POOL_PRECISION_DECIMALS"
        }
      },
      "rampA(SwapUtils.Amplification storage,uint256,uint256)": {
        "params": {
          "futureA_": "the new A to ramp towards",
          "futureTime_": "timestamp when the new A should be reached",
          "self": "Swap struct to update"
        }
      },
      "removeLiquidity(uint256,SwapUtils.PooledToken[2],uint256[2],LiquidityPoolToken)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "lpToken": "Liquidity pool token contract",
          "minAmounts": "the minimum amounts of each token in the pool acceptable for this burn. Useful as a front-running mitigation. Should be according to the cardinality of 'tokens'",
          "tokens": "Array of [token0, token1]"
        },
        "returns": {
          "_0": "amounts of tokens the user receives for each token in the pool according to [token0, token1] cardinality"
        }
      },
      "removeLiquidityImbalance(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)": {
        "params": {
          "amounts": "how much of each token to withdraw according to cardinality of pooled tokens",
          "amplificationParams": "amplification parameters for the pool",
          "feeParams": "fee parameters for the pool",
          "lpToken": "Liquidity pool token contract",
          "maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.",
          "tokens": "Array of [token0, token1]"
        },
        "returns": {
          "_0": "actual amount of LP tokens burned in the withdrawal"
        }
      },
      "removeLiquidityOneToken(uint256,SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)": {
        "params": {
          "amplificationParams": "amplification parameters for the pool",
          "feeParams": "fee parameters for the pool",
          "lpToken": "Liquidity pool token contract",
          "minAmount": "the minimum amount to withdraw, otherwise revert",
          "tokenAmount": "the amount of the lp tokens to burn",
          "tokenCounterpart": "the counterpart token in the pool of the token you want to receive",
          "tokenReceive": "the token you want to receive"
        },
        "returns": {
          "_0": "amount chosen token that user received"
        }
      },
      "setAdminFee(SwapUtils.FeeParams storage,uint256)": {
        "details": "adminFee cannot be higher than 100% of the swap fee",
        "params": {
          "newAdminFee": "new admin fee to be applied on future transactions",
          "self": "Swap struct to update"
        }
      },
      "setSwapFee(SwapUtils.FeeParams storage,uint256)": {
        "details": "fee cannot be higher than 1% of each swap",
        "params": {
          "newSwapFee": "new swap fee to be applied on future transactions",
          "self": "Swap struct to update"
        }
      },
      "stopRampA(SwapUtils.Amplification storage)": {
        "params": {
          "self": "Swap struct to update"
        }
      },
      "swap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)": {
        "params": {
          "amplificationParams": "amplification parameters for the pool",
          "dx": "the number of tokens to sell",
          "feeParams": "fee parameters for the pool",
          "minDy": "the min amount the user would like to receive (revert if not met)",
          "tokenFrom": "the token to sell",
          "tokenTo": "the token to buy"
        },
        "returns": {
          "_0": "amount of token user received on swap"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)": {
        "notice": "Add liquidity to the pool"
      },
      "calculateRemoveLiquidity(uint256,SwapUtils.PooledToken[2],LiquidityPoolToken)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateSwap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)": {
        "notice": "Externally calculates a swap between two tokens."
      },
      "calculateTokenAmount(SwapUtils.PooledToken[2],uint256[],bool,SwapUtils.Amplification storage,LiquidityPoolToken)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running"
      },
      "getA(SwapUtils.Amplification storage)": {
        "notice": "Return A, the amplification coefficient * n * (n - 1)"
      },
      "getAPrecise(SwapUtils.Amplification storage)": {
        "notice": "Return A in its raw precision"
      },
      "getVirtualPrice(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,SwapUtils.Amplification storage,LiquidityPoolToken)": {
        "notice": "Get the virtual price, to help calculate profit"
      },
      "rampA(SwapUtils.Amplification storage,uint256,uint256)": {
        "notice": "Start ramping up or down A parameter towards given futureA_ and futureTime_ Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
      },
      "removeLiquidity(uint256,SwapUtils.PooledToken[2],uint256[2],LiquidityPoolToken)": {
        "notice": "Burn LP tokens to remove liquidity from the pool."
      },
      "removeLiquidityImbalance(SwapUtils.PooledToken[2],uint256[2],uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances."
      },
      "removeLiquidityOneToken(uint256,SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage,LiquidityPoolToken)": {
        "notice": "Remove liquidity from the pool all in one token."
      },
      "setAdminFee(SwapUtils.FeeParams storage,uint256)": {
        "notice": "Sets the admin fee"
      },
      "setSwapFee(SwapUtils.FeeParams storage,uint256)": {
        "notice": "update the swap fee"
      },
      "stopRampA(SwapUtils.Amplification storage)": {
        "notice": "Stops ramping A immediately. Once this function is called, rampA() cannot be called for another 24 hours"
      },
      "swap(SwapUtils.PooledToken storage,SwapUtils.PooledToken storage,uint256,uint256,SwapUtils.Amplification storage,SwapUtils.FeeParams storage)": {
        "notice": "swap two tokens in the pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}