{
  "address": "0x63bdF8109F712dA3AF34F07C038C27b185d86Bb3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "NewAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "NewSwapFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "RampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "tokenAmounts",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "fees",
          "type": "uint256[2]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "invariant",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityImbalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenReceived",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidityOne",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "StopRampA",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "tokenSold",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_minToMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amplificationParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "initialA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialATime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureATime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRemoveLiquidity",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenReceive",
          "type": "address"
        }
      ],
      "name": "calculateRemoveLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dx",
          "type": "uint256"
        }
      ],
      "name": "calculateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "deposit",
          "type": "bool"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "adminFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAPrecise",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken1",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken1Balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVirtualPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "lpTokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lpTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFee",
          "type": "uint256"
        },
        {
          "internalType": "contract LiquidityPoolToken",
          "name": "lpTokenTargetAddress",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract LiquidityPoolToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "_data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "futureA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "futureTime",
          "type": "uint256"
        }
      ],
      "name": "rampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "minAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_amounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenReceive",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitIfNecessary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAdminFee",
          "type": "uint256"
        }
      ],
      "name": "setAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopRampA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_dx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwnner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9178d1d3b844e8ef9c479a798104a6d9dbd00e2aa124f22faa3439265abfa99c",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x63bdF8109F712dA3AF34F07C038C27b185d86Bb3",
    "transactionIndex": 0,
    "gasUsed": "76377426",
    "logsBloom": "0x
    "blockHash": "0x9ca2d5fd608d97f38b298c42756c1f12a622bd0eb0cee2fd06461fbbe976cedc",
    "transactionHash": "0x9178d1d3b844e8ef9c479a798104a6d9dbd00e2aa124f22faa3439265abfa99c",
    "logs": [],
    "blockNumber": 9588493,
    "cumulativeGasUsed": "36477025",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "14b0e1ff9d2182625fa00645b9479363",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"NewAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"NewSwapFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"RampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"fees\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"invariant\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityImbalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenReceived\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidityOne\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StopRampA\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenSold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_minToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amplificationParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialATime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureATime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRemoveLiquidity\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenReceive\",\"type\":\"address\"}],\"name\":\"calculateRemoveLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dx\",\"type\":\"uint256\"}],\"name\":\"calculateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAPrecise\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1Balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVirtualPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lpTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lpTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFee\",\"type\":\"uint256\"},{\"internalType\":\"contract LiquidityPoolToken\",\"name\":\"lpTokenTargetAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract LiquidityPoolToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"futureA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"futureTime\",\"type\":\"uint256\"}],\"name\":\"rampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"minAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_amounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenReceive\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAdminFee\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopRampA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_dx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwnner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"TenderSwap is a light-weight StableSwap implementation for two assets. See the Curve StableSwap paper for more details (https://curve.fi/files/stableswap-paper.pdf). that trade 1:1 with eachother (e.g. USD stablecoins or tenderToken derivatives vs their underlying assets). It supports Elastic Supply ERC20 tokens, which are tokens of which the balances can change as the total supply of the token 'rebases'.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(uint256[2],uint256,uint256)\":{\"params\":{\"_amounts\":\"the amounts of each token to add, in their native precision          according to the cardinality of the pool [token0, token1]\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_minToMint\":\"the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation\"},\"returns\":{\"_0\":\"amount of LP token user minted and received\"}},\"calculateRemoveLiquidity(uint256)\":{\"params\":{\"amount\":\"the amount of LP tokens that would be burned on withdrawal\"},\"returns\":{\"_0\":\"array of token balances that the user will receive\"}},\"calculateRemoveLiquidityOneToken(uint256,address)\":{\"params\":{\"tokenAmount\":\"the amount of LP token to burn\",\"tokenReceive\":\"the token to receive\"},\"returns\":{\"_0\":\"calculated amount of underlying token to be received. available to withdraw\"}},\"calculateSwap(address,uint256)\":{\"params\":{\"_dx\":\"the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.\",\"_tokenFrom\":\"the token the user wants to sell\"},\"returns\":{\"_0\":\"amount of tokens the user will receive\"}},\"calculateTokenAmount(uint256[],bool)\":{\"details\":\"This shouldn't be used outside frontends for user estimates.\",\"params\":{\"amounts\":\"an array of token amounts to deposit or withdrawal, corresponding to pool cardinality of [token0, token1]. The amount should be in each pooled token's native precision.\",\"deposit\":\"whether this is a deposit or a withdrawal\"},\"returns\":{\"_0\":\"token amount the user will receive\"}},\"getA()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"_0\":\"the amplifaction coefficient\"}},\"getAPrecise()\":{\"details\":\"See the StableSwap paper for details\",\"returns\":{\"_0\":\"A parameter in its raw precision form\"}},\"getToken0()\":{\"details\":\"EVM return type is IERC20\",\"returns\":{\"_0\":\"contract address\"}},\"getToken0Balance()\":{\"returns\":{\"_0\":\"current balance of the pooled tendertoken\"}},\"getToken1()\":{\"details\":\"EVM return type is IERC20\",\"returns\":{\"_0\":\"contract address\"}},\"getToken1Balance()\":{\"returns\":{\"_0\":\"current balance of the pooled underlying token\"}},\"getVirtualPrice()\":{\"returns\":{\"_0\":\"the override price, scaled to the POOL_PRECISION_DECIMALS\"}},\"initialize(address,address,string,string,uint256,uint256,uint256,address)\":{\"params\":{\"_a\":\"the amplification coefficient * n * (n - 1). See the StableSwap paper for details\",\"_adminFee\":\"default adminFee to be initialized with\",\"_fee\":\"default swap fee to be initialized with\",\"_token0\":\"First token in the pool\",\"_token1\":\"Second token in the pool\",\"lpTokenName\":\"the long-form name of the token to be deployed\",\"lpTokenSymbol\":\"the short symbol for the token to be deployed\",\"lpTokenTargetAddress\":\"the address of an existing LiquidityPoolToken contract to use as a target\"},\"returns\":{\"_0\":\"true is successfully initialized\"}},\"multicall(bytes[])\":{\"details\":\"The `msg.value` should not be trusted for any method callable from multicall.\",\"params\":{\"_data\":\"The encoded function data for each of the calls to make to this contract\"},\"returns\":{\"results\":\"The results from each of the calls passed in via data\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rampA(uint256,uint256)\":{\"params\":{\"futureA\":\"the new A to ramp towards\",\"futureTime\":\"timestamp when the new A should be reached\"}},\"removeLiquidity(uint256,uint256[2],uint256)\":{\"details\":\"Liquidity can always be removed, even when the pool is paused.\",\"params\":{\"amount\":\"the amount of LP tokens to burn\",\"deadline\":\"latest timestamp to accept this transaction\",\"minAmounts\":\"the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation        according to the cardinality of the pool [token0, token1]\"},\"returns\":{\"_0\":\"is the amounts of tokens user received\"}},\"removeLiquidityImbalance(uint256[2],uint256,uint256)\":{\"params\":{\"_amounts\":\"how much of each token to withdraw\",\"_deadline\":\"latest timestamp to accept this transaction\",\"_maxBurnAmount\":\"the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation.\"},\"returns\":{\"_0\":\"amount of LP tokens burned\"}},\"removeLiquidityOneToken(uint256,address,uint256,uint256)\":{\"params\":{\"_deadline\":\"latest timestamp to accept this transaction\",\"_minAmount\":\"the minimum amount to withdraw, otherwise revert\",\"_tokenAmount\":\"the amount of the token you want to receive\",\"_tokenReceive\":\"the  token you want to receive\"},\"returns\":{\"_0\":\"amount of chosen token user received\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"_deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_token\":\"The address of the token spent\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"_value\":\"The amount that can be spent of token\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"_deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_token\":\"The address of the token spent\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"_value\":\"The amount that can be spent of token\"}},\"setAdminFee(uint256)\":{\"params\":{\"newAdminFee\":\"new admin fee to be applied on future transactions\"}},\"setSwapFee(uint256)\":{\"params\":{\"newSwapFee\":\"new swap fee to be applied on future transactions\"}},\"swap(address,uint256,uint256,uint256)\":{\"details\":\"revert is token being sold is not in the pool.\",\"params\":{\"_deadline\":\"latest timestamp to accept this transaction\",\"_dx\":\"the amount of tokens the user wants to swap from\",\"_minDy\":\"the min amount the user would like to receive, or revert\",\"_tokenFrom\":\"the token the user wants to sell\"},\"returns\":{\"_0\":\"amount of tokens received\"}},\"transferOwnership(address)\":{\"params\":{\"_newOwner\":\"address of the new owner\"}}},\"stateVariables\":{\"lpToken\":{\"return\":\"lpTokenContract Liquidity pool token contract.\",\"returns\":{\"_0\":\"lpTokenContract Liquidity pool token contract.\"}}},\"title\":\"TenderSwap\",\"version\":1},\"userdoc\":{\"events\":{\"AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)\":{\"notice\":\"AddLiquidity gets emitted when liquidity is added to the pool.\"},\"NewAdminFee(uint256)\":{\"notice\":\"NewAdminFee gets emitted when the admin fee is updated.\"},\"NewSwapFee(uint256)\":{\"notice\":\"NewSwapFee gets emitted when the swap fee is updated.\"},\"RampA(uint256,uint256,uint256,uint256)\":{\"notice\":\"RampA gets emitted when A has started ramping up.\"},\"RemoveLiquidity(address,uint256[2],uint256)\":{\"notice\":\"RemoveLiquidity gets emitted when liquidity for both tokens  is removed from the pool.\"},\"RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)\":{\"notice\":\"RemoveLiquidityImbalance gets emitted when liquidity is removed weighted differently than the pool's current balances. with different weights than that of the pool.\"},\"RemoveLiquidityOne(address,uint256,uint256,address,uint256)\":{\"notice\":\"RemoveLiquidityOne gets emitted when single-sided liquidity is removed \"},\"StopRampA(uint256,uint256)\":{\"notice\":\"StopRampA gets emitted when ramping A is stopped manually\"},\"Swap(address,address,uint256,uint256)\":{\"notice\":\"Swap gets emitted when an accounts exchanges tokens.\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(uint256[2],uint256,uint256)\":{\"notice\":\"Add liquidity to the pool with the given amounts of tokens\"},\"calculateRemoveLiquidity(uint256)\":{\"notice\":\"A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens\"},\"calculateRemoveLiquidityOneToken(uint256,address)\":{\"notice\":\"Calculate the amount of underlying token available to withdraw when withdrawing via only single token\"},\"calculateSwap(address,uint256)\":{\"notice\":\"Calculate amount of tokens you receive on swap\"},\"calculateTokenAmount(uint256[],bool)\":{\"notice\":\"A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \\\"min\\\" parameters on calls to fight front-running\"},\"getA()\":{\"notice\":\"Return A, the amplification coefficient * n * (n - 1)\"},\"getAPrecise()\":{\"notice\":\"Return A in its raw precision form\"},\"getToken0()\":{\"notice\":\"Returns the contract address for token0\"},\"getToken0Balance()\":{\"notice\":\"Return current balance of token0 (tender) in the pool\"},\"getToken1()\":{\"notice\":\"Returns the contract address for token1\"},\"getToken1Balance()\":{\"notice\":\"Return current balance of token1 (underlying) in the pool\"},\"getVirtualPrice()\":{\"notice\":\"Get the override price, to help calculate profit\"},\"initialize(address,address,string,string,uint256,uint256,uint256,address)\":{\"notice\":\"Initializes this Swap contract with the given parameters. This will also clone a LPToken contract that represents users' LP positions. The owner of LPToken will be this contract - which means only this contract is allowed to mint/burn tokens.\"},\"lpToken()\":{\"notice\":\"Returns the liquidity pool token contract.\"},\"multicall(bytes[])\":{\"notice\":\"Call multiple functions in the current contract and return the data from all of them if they all succeed\"},\"rampA(uint256,uint256)\":{\"notice\":\"Start ramping up or down A parameter towards given futureA and futureTime Checks if the change is too rapid, and commits the new A value only when it falls under the limit range.\"},\"removeLiquidity(uint256,uint256[2],uint256)\":{\"notice\":\"Burn LP tokens to remove liquidity from the pool.\"},\"removeLiquidityImbalance(uint256[2],uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool, weighted differently than the pool's current balances.\"},\"removeLiquidityOneToken(uint256,address,uint256,uint256)\":{\"notice\":\"Remove liquidity from the pool all in one token.\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"setAdminFee(uint256)\":{\"notice\":\"Update the admin fee. Admin fee takes portion of the swap fee.\"},\"setSwapFee(uint256)\":{\"notice\":\"Update the swap fee to be applied on swaps\"},\"stopRampA()\":{\"notice\":\"Stop ramping A immediately. Reverts if ramp A is already stopped.\"},\"swap(address,uint256,uint256,uint256)\":{\"notice\":\"Swap two tokens using this pool\"},\"transferOwnership(address)\":{\"notice\":\"Changes the owner of the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tenderswap/TenderSwap.sol\":\"TenderSwap\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5321bbe08dd6e82e85222024dc300d4959ff8615742ad63135759883a19e02a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/helpers/Multicall.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IMulticall {\\n    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\\n    /// @param _data The encoded function data for each of the calls to make to this contract\\n    /// @return results The results from each of the calls passed in via data\\n    function multicall(bytes[] calldata _data) external payable returns (bytes[] memory results);\\n}\\n\\n/// @title Multicall\\n/// @notice Enables calling multiple methods in a single call to the contract\\nabstract contract Multicall is IMulticall {\\n    /// @inheritdoc IMulticall\\n    function multicall(bytes[] calldata _data) public payable override returns (bytes[] memory results) {\\n        results = new bytes[](_data.length);\\n        for (uint256 i = 0; i < _data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(_data[i]);\\n\\n            if (!success) {\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\n                if (result.length < 68) revert();\\n                assembly {\\n                    result := add(result, 0x04)\\n                }\\n                revert(abi.decode(result, (string)));\\n            }\\n\\n            results[i] = result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7223ca27a1066b2464558e0c8b1eb5dcd086689da6238dd271d2bdf143c219c5\",\"license\":\"MIT\"},\"contracts/helpers/SelfPermit.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param _token The address of the token spent\\n    /// @param _value The amount that can be spent of token\\n    /// @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param _token The address of the token spent\\n    /// @param _value The amount that can be spent of token\\n    /// @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable;\\n}\\n\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public payable override {\\n        _selfPermit(_token, _value, _deadline, _v, _r, _s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable override {\\n        uint256 allowance = IERC20(_token).allowance(msg.sender, address(this));\\n        if (allowance < _value) _selfPermit(_token, _value - allowance, _deadline, _v, _r, _s);\\n    }\\n\\n    function _selfPermit(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal {\\n        IERC20Permit(_token).permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\\n    }\\n}\\n\",\"keccak256\":\"0x5a5461cc114c3546997ee4e8dbdf0db9e7127cde66eb561e8ff9f29c8015c9db\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x4788b5ca1f6a1c34febfd25857b95e4c6c5494e2e062c820552ebaed21ae856b\",\"license\":\"MIT\"},\"contracts/tenderswap/ITenderSwap.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./LiquidityPoolToken.sol\\\";\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title TenderSwap\\n * @dev TenderSwap is a light-weight StableSwap implementation for two assets.\\n * See the Curve StableSwap paper for more details (https://curve.fi/files/stableswap-paper.pdf).\\n * that trade 1:1 with eachother (e.g. USD stablecoins or tenderToken derivatives vs their underlying assets).\\n * It supports Elastic Supply ERC20 tokens, which are tokens of which the balances can change\\n * as the total supply of the token 'rebases'.\\n */\\n\\ninterface ITenderSwap {\\n    /*** EVENTS ***/\\n\\n    // events replicated from SwapUtils to make the ABI easier for dumb\\n    // clients\\n\\n    /**\\n     * @notice Swap gets emitted when an accounts exchanges tokens.\\n     * @param buyer address of the account initiating the swap\\n     * @param tokenSold address of the swapped token\\n     * @param amountSold amount of tokens swapped\\n     * @param amountReceived amount of tokens received in exchange\\n     */\\n    event Swap(address indexed buyer, IERC20 tokenSold, uint256 amountSold, uint256 amountReceived);\\n\\n    /**\\n     * @notice AddLiquidity gets emitted when liquidity is added to the pool.\\n     * @param provider address of the account providing liquidity\\n     * @param tokenAmounts array of token amounts provided corresponding to pool cardinality of [token0, token1]\\n     * @param fees fees deducted for each of the tokens added corresponding to pool cardinality of [token0, token1]\\n     * @param invariant pool invariant after adding liquidity\\n     * @param lpTokenSupply the lpToken supply after minting\\n     */\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n\\n    /**\\n     * @notice RemoveLiquidity gets emitted when liquidity for both tokens \\n     * is removed from the pool.\\n     * @param provider address of the account removing liquidity\\n     * @param tokenAmounts array of token amounts removed corresponding to pool cardinality of [token0, token1]\\n     * @param lpTokenSupply total supply of liquidity pool token after removing liquidity\\n     */\\n    event RemoveLiquidity(address indexed provider, uint256[2] tokenAmounts, uint256 lpTokenSupply);\\n\\n    /**\\n     * @notice RemoveLiquidityOne gets emitted when single-sided liquidity is removed \\n     * @param provider address of the account removing liquidity\\n     * @param lpTokenAmount amount of liquidity pool tokens burnt\\n     * @param lpTokenSupply total supply of liquidity pool token after removing liquidity\\n\\n     * @param tokenReceived address of the token for which liquidity was removed\\n     * @param receivedAmount amount of tokens received\\n     */\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        IERC20 tokenReceived,\\n        uint256 receivedAmount\\n    );\\n\\n    /**\\n     * @notice RemoveLiquidityImbalance gets emitted when liquidity is removed weighted differently than the\\n     * pool's current balances.\\n     * with different weights than that of the pool.\\n     * @param provider address of the the account removing liquidity imbalanced\\n     * @param tokenAmounts array of amounts of tokens being removed corresponding \\n     * to pool cardinality of [token0, token1]\\n     * @param fees fees for each of the tokens removed corresponding to pool cardinality of [token0, token1]\\n     * @param invariant pool invariant after removing liquidity\\n     * @param lpTokenSupply total supply of liquidity pool token after removing liquidity\\n     */\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n\\n    /**\\n     * @notice NewAdminFee gets emitted when the admin fee is updated.\\n     * @param newAdminFee admin fee after update\\n     */\\n    event NewAdminFee(uint256 newAdminFee);\\n\\n    /**\\n     * @notice NewSwapFee gets emitted when the swap fee is updated.\\n     * @param newSwapFee swap fee after update\\n     */\\n    event NewSwapFee(uint256 newSwapFee);\\n\\n    /**\\n     * @notice RampA gets emitted when A has started ramping up.\\n     * @param oldA initial A value\\n     * @param newA target value of A to ramp up to\\n     * @param initialTime ramp start timestamp\\n     * @param futureTime ramp end timestamp\\n     */\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    /**\\n     * @notice StopRampA gets emitted when ramping A is stopped manually\\n     * @param currentA current value of A\\n     * @param time timestamp of when ramp is stopped\\n     */\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    /**\\n     * @notice Initializes this Swap contract with the given parameters.\\n     * This will also clone a LPToken contract that represents users'\\n     * LP positions. The owner of LPToken will be this contract - which means\\n     * only this contract is allowed to mint/burn tokens.\\n     *\\n     * @param _token0 First token in the pool\\n     * @param _token1 Second token in the pool\\n     * @param lpTokenName the long-form name of the token to be deployed\\n     * @param lpTokenSymbol the short symbol for the token to be deployed\\n     * @param _a the amplification coefficient * n * (n - 1). See the\\n     * StableSwap paper for details\\n     * @param _fee default swap fee to be initialized with\\n     * @param _adminFee default adminFee to be initialized with\\n     * @param lpTokenTargetAddress the address of an existing LiquidityPoolToken contract to use as a target\\n     * @return success true is successfully initialized\\n     */\\n    function initialize(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        LiquidityPoolToken lpTokenTargetAddress\\n    ) external returns (bool success);\\n\\n    /*** VIEW FUNCTIONS ***/\\n    /**\\n     * @notice Returns the liquidity pool token contract.\\n     * @return lpTokenContract Liquidity pool token contract.\\n     */\\n    function lpToken() external view returns (LiquidityPoolToken lpTokenContract);\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @return a the amplifaction coefficient\\n     */\\n    function getA() external view returns (uint256 a);\\n\\n    /**\\n     * @notice Return A in its raw precision form\\n     * @dev See the StableSwap paper for details\\n     * @return aPrecise A parameter in its raw precision form\\n     */\\n    function getAPrecise() external view returns (uint256 aPrecise);\\n\\n    /**\\n     * @notice Returns the contract address for token0\\n     * @dev EVM return type is IERC20\\n     * @return token0 contract address\\n     */\\n    function getToken0() external view returns (IERC20 token0);\\n\\n    /**\\n     * @notice Returns the contract address for token1\\n     * @dev EVM return type is IERC20\\n     * @return token1 contract address\\n     */\\n    function getToken1() external view returns (IERC20 token1);\\n\\n    /**\\n     * @notice Return current balance of token0 (tender) in the pool\\n     * @return token0Balance current balance of the pooled tendertoken\\n     */\\n    function getToken0Balance() external view returns (uint256 token0Balance);\\n\\n    /**\\n     * @notice Return current balance of token1 (underlying) in the pool\\n     * @return token1Balance current balance of the pooled underlying token\\n     */\\n    function getToken1Balance() external view returns (uint256 token1Balance);\\n\\n    /**\\n     * @notice Get the override price, to help calculate profit\\n     * @return virtualPrice the override price, scaled to the POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice() external view returns (uint256 virtualPrice);\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param _tokenFrom the token the user wants to sell\\n     * @param _dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return tokensToReceive amount of tokens the user will receive\\n     */\\n    function calculateSwap(IERC20 _tokenFrom, uint256 _dx) external view returns (uint256 tokensToReceive);\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param amount the amount of LP tokens that would be burned on withdrawal\\n     * @return tokensToReceive array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[2] memory tokensToReceive);\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param tokenAmount the amount of LP token to burn\\n     * @param tokenReceive the token to receive\\n     * @return tokensToReceive calculated amount of underlying token to be received.\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, IERC20 tokenReceive)\\n        external\\n        view\\n        returns (uint256 tokensToReceive);\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pool cardinality of [token0, token1]. The amount should be in each\\n     * pooled token's native precision.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return tokensToReceive token amount the user will receive\\n     */\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256 tokensToReceive);\\n\\n    /*** POOL FUNCTIONALITY ***/\\n\\n    /**\\n     * @notice Swap two tokens using this pool\\n     * @dev revert is token being sold is not in the pool.\\n     * @param _tokenFrom the token the user wants to sell\\n     * @param _dx the amount of tokens the user wants to swap from\\n     * @param _minDy the min amount the user would like to receive, or revert\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return _dy amount of tokens received\\n     */\\n    function swap(\\n        IERC20 _tokenFrom,\\n        uint256 _dx,\\n        uint256 _minDy,\\n        uint256 _deadline\\n    ) external returns (uint256 _dy);\\n\\n    /**\\n     * @notice Add liquidity to the pool with the given amounts of tokens\\n     * @param _amounts the amounts of each token to add, in their native precision\\n     *          according to the cardinality of the pool [token0, token1]\\n     * @param _minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return lpMinted amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        uint256[2] calldata _amounts,\\n        uint256 _minToMint,\\n        uint256 _deadline\\n    ) external returns (uint256 lpMinted);\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     *        according to the cardinality of the pool [token0, token1]\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return tokensReceived is the amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[2] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[2] memory tokensReceived);\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token.\\n     * @param _tokenAmount the amount of the token you want to receive\\n     * @param _tokenReceive the  token you want to receive\\n     * @param _minAmount the minimum amount to withdraw, otherwise revert\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return tokensReceived amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 _tokenAmount,\\n        IERC20 _tokenReceive,\\n        uint256 _minAmount,\\n        uint256 _deadline\\n    ) external returns (uint256 tokensReceived);\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances.\\n     * @param _amounts how much of each token to withdraw\\n     * @param _maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return lpBurned amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        uint256[2] calldata _amounts,\\n        uint256 _maxBurnAmount,\\n        uint256 _deadline\\n    ) external returns (uint256 lpBurned);\\n\\n    /*** ADMIN FUNCTIONALITY ***/\\n    /**\\n     * @notice Update the admin fee. Admin fee takes portion of the swap fee.\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(uint256 newAdminFee) external;\\n\\n    /**\\n     * @notice Update the swap fee to be applied on swaps\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(uint256 newSwapFee) external;\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA and futureTime\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param futureA the new A to ramp towards\\n     * @param futureTime timestamp when the new A should be reached\\n     */\\n    function rampA(uint256 futureA, uint256 futureTime) external;\\n\\n    /**\\n     * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\\n     */\\n    function stopRampA() external;\\n\\n    /**\\n     * @notice Changes the owner of the contract\\n     * @param _newOwner address of the new owner\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xf468d8c7cecfdbe5afc3b3cf8facfb0a8fa82f9c6a9e6287fc5f83edf993d9a0\",\"license\":\"MIT\"},\"contracts/tenderswap/LiquidityPoolToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\n\\ncontract LiquidityPoolToken is OwnableUpgradeable, ERC20BurnableUpgradeable, ERC20PermitUpgradeable {\\n    /**\\n     * @notice Initializes this LPToken contract with the given name and symbol\\n     * @dev The caller of this function will become the owner. A Swap contract should call this\\n     * in its initializer function.\\n     * @param name name of this token\\n     * @param symbol symbol of this token\\n     */\\n    function initialize(string memory name, string memory symbol) external initializer returns (bool) {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n        __Ownable_init_unchained();\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function.\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n        _mint(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x48df1192c11550b2c195c089f4d3138c598d7b92ff8cd1b12916b1e3ba517bc6\",\"license\":\"MIT\"},\"contracts/tenderswap/SwapUtils.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../libs/MathUtils.sol\\\";\\nimport \\\"./LiquidityPoolToken.sol\\\";\\n\\npragma solidity 0.8.4;\\n\\nlibrary SwapUtils {\\n    using MathUtils for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // =============================================\\n    //                   EVENTS\\n    // =============================================\\n    event Swap(address indexed buyer, IERC20 tokenSold, uint256 amountSold, uint256 amountReceived);\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event RemoveLiquidity(address indexed provider, uint256[2] tokenAmounts, uint256 lpTokenSupply);\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        IERC20 tokenReceived,\\n        uint256 receivedAmount\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n    event NewAdminFee(uint256 newAdminFee);\\n    event NewSwapFee(uint256 newSwapFee);\\n\\n    // =============================================\\n    //                 SWAP LOGIC\\n    // =============================================\\n\\n    // the precision all pools tokens will be converted to\\n    uint8 public constant POOL_PRECISION_DECIMALS = 18;\\n\\n    // the denominator used to calculate admin and LP fees. For example, an\\n    // LP fee might be something like tradeAmount.mul(fee).div(FEE_DENOMINATOR)\\n    uint256 private constant FEE_DENOMINATOR = 10**10;\\n\\n    // Max swap fee is 1% or 100bps of each swap\\n    uint256 public constant MAX_SWAP_FEE = 10**8;\\n\\n    // Max adminFee is 100% of the swapFee\\n    // adminFee does not add additional fee on top of swapFee\\n    // Instead it takes a certain % of the swapFee. Therefore it has no impact on the\\n    // users but only on the earnings of LPs\\n    uint256 public constant MAX_ADMIN_FEE = 10**10;\\n\\n    // Constant value used as max loop limit\\n    uint256 private constant MAX_LOOP_LIMIT = 256;\\n\\n    uint256 internal constant NUM_TOKENS = 2;\\n\\n    struct FeeParams {\\n        uint256 swapFee;\\n        uint256 adminFee;\\n    }\\n\\n    struct PooledToken {\\n        IERC20 token;\\n        uint256 precisionMultiplier;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // {add,remove}Liquidity functions to avoid stack too deep errors\\n    struct ManageLiquidityInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 d2;\\n        uint256 preciseA;\\n        LiquidityPoolToken lpToken;\\n        uint256 totalSupply;\\n        PooledToken[2] tokens;\\n        uint256[2] oldBalances;\\n        uint256[2] newBalances;\\n    }\\n\\n    // Struct storing variables used in calculations in the\\n    // calculateWithdrawOneTokenDY function to avoid stack too deep errors\\n    struct CalculateWithdrawOneTokenDYInfo {\\n        uint256 d0;\\n        uint256 d1;\\n        uint256 newY;\\n        uint256 feePerToken;\\n        uint256 preciseA;\\n    }\\n\\n    /**\\n     * @notice swap two tokens in the pool\\n     * @param tokenFrom the token to sell\\n     * @param tokenTo the token to buy\\n     * @param dx the number of tokens to sell\\n     * @param minDy the min amount the user would like to receive (revert if not met)\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return amount of token user received on swap\\n     */\\n    function swap(\\n        PooledToken storage tokenFrom,\\n        PooledToken storage tokenTo,\\n        uint256 dx,\\n        uint256 minDy,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) external returns (uint256) {\\n        require(dx <= tokenFrom.token.balanceOf(msg.sender), \\\"ERC20: transfer amount exceeds balance\\\");\\n        uint256 dy;\\n        uint256 dyFee;\\n        (dy, dyFee) = _calculateSwap(tokenFrom, tokenTo, dx, amplificationParams, feeParams);\\n\\n        require(dy >= minDy, \\\"Swap didn't result in min tokens\\\");\\n\\n        uint256 dyAdminFee = (dyFee * feeParams.adminFee) / FEE_DENOMINATOR / tokenTo.precisionMultiplier;\\n        // TODO: Need to handle keeping track of admin fees or transfer them instantly\\n\\n        // transfer tokens\\n        tokenFrom.token.safeTransferFrom(msg.sender, address(this), dx);\\n        tokenTo.token.safeTransfer(msg.sender, dy);\\n\\n        emit Swap(msg.sender, tokenFrom.token, dx, dy);\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Get the virtual price, to help calculate profit\\n     * @param token0 token0 in the pool\\n     * @param token1 token1 in the pool\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param lpToken Liquidity pool token\\n     * @return the virtual price, scaled to precision of POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice(\\n        PooledToken storage token0,\\n        PooledToken storage token1,\\n        Amplification storage amplificationParams,\\n        LiquidityPoolToken lpToken\\n    ) external view returns (uint256) {\\n        uint256 xp0 = _xp(_getTokenBalance(token0.token), token0.precisionMultiplier);\\n        uint256 xp1 = _xp(_getTokenBalance(token1.token), token1.precisionMultiplier);\\n\\n        uint256 d = getD(xp0, xp1, _getAPrecise(amplificationParams));\\n        uint256 supply = lpToken.totalSupply();\\n        if (supply > 0) {\\n            return (d * (10**POOL_PRECISION_DECIMALS)) / supply;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Externally calculates a swap between two tokens.\\n     * @param tokenFrom the token to sell\\n     * @param tokenTo the token to buy\\n     * @param dx the number of tokens to sell\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return dy the number of tokens the user will get\\n     */\\n    function calculateSwap(\\n        PooledToken storage tokenFrom,\\n        PooledToken storage tokenTo,\\n        uint256 dx,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) external view returns (uint256 dy) {\\n        (dy, ) = _calculateSwap(tokenFrom, tokenTo, dx, amplificationParams, feeParams);\\n    }\\n\\n    /**\\n     * @notice Add liquidity to the pool\\n     * @param tokens Array of [token0, token1]\\n     * @param amounts the amounts of each token to add, in their native precision\\n     * according to the cardinality of 'tokens'\\n     * @param minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * allowed addresses. If the pool is not in the guarded launch phase, this parameter will be ignored.\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken Liquidity pool token contract\\n     * @return amount of LP token user received\\n     */\\n    function addLiquidity(\\n        PooledToken[2] memory tokens,\\n        uint256[2] memory amounts,\\n        uint256 minToMint,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) external returns (uint256) {\\n        // current state\\n        ManageLiquidityInfo memory v = ManageLiquidityInfo(\\n            0,\\n            0,\\n            0,\\n            _getAPrecise(amplificationParams),\\n            lpToken,\\n            0,\\n            tokens,\\n            [uint256(0), uint256(0)],\\n            [uint256(0), uint256(0)]\\n        );\\n        v.totalSupply = v.lpToken.totalSupply();\\n\\n        // Get the current pool invariant d0\\n        if (v.totalSupply != 0) {\\n            uint256 _bal0 = _getTokenBalance(tokens[0].token);\\n            uint256 _bal1 = _getTokenBalance(tokens[1].token);\\n            v.oldBalances = [_bal0, _bal1];\\n            uint256 xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d0 = getD(xp0, xp1, v.preciseA);\\n        }\\n\\n        // Transfer the tokens\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokens[i].token.safeTransferFrom(msg.sender, address(this), amounts[i]);\\n        }\\n\\n        // calculate pool invariant after balance changes d1\\n        {\\n            uint256 _bal0 = _getTokenBalance(tokens[0].token);\\n            uint256 _bal1 = _getTokenBalance(tokens[1].token);\\n            v.newBalances = [_bal0, _bal1];\\n            uint256 _xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 _xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d1 = getD(_xp0, _xp1, v.preciseA);\\n            require(v.d1 > v.d0, \\\"D1 <= D0\\\");\\n        }\\n\\n        // calculate swap fees\\n        v.d2 = v.d1;\\n\\n        // first entrant doesn't pay fees\\n        uint256[2] memory fees;\\n        if (v.totalSupply != 0) {\\n            uint256 feePerToken = _feePerToken(feeParams.swapFee);\\n\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                uint256 idealBal = (v.d1 * v.oldBalances[i]) / v.d0;\\n                (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n                fees[i] = (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n                v.newBalances[i] = v.newBalances[i] - fees[i];\\n                // TODO: handle admin fee\\n            }\\n\\n            // calculate invariant after subtracting fees, d2\\n            {\\n                uint256 _xp0 = _xp(v.newBalances[0], tokens[0].precisionMultiplier);\\n                uint256 _xp1 = _xp(v.newBalances[1], tokens[1].precisionMultiplier);\\n                v.d2 = getD(_xp0, _xp1, v.preciseA);\\n            }\\n        }\\n\\n        uint256 toMint;\\n        if (v.totalSupply == 0) {\\n            toMint = v.d1;\\n        } else {\\n            toMint = ((v.d2 - v.d0) * v.totalSupply) / v.d0;\\n        }\\n\\n        require(toMint >= minToMint, \\\"Couldn't mint min requested\\\");\\n\\n        // mint the user's LP tokens\\n        v.lpToken.mint(msg.sender, toMint);\\n\\n        emit AddLiquidity(msg.sender, amounts, fees, v.d1, v.totalSupply + toMint);\\n\\n        return toMint;\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param tokens Array of [token0, token1]\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     * acceptable for this burn. Useful as a front-running mitigation.\\n     * Should be according to the cardinality of 'tokens'\\n     * @param lpToken Liquidity pool token contract\\n     * @return amounts of tokens the user receives for each token in the pool\\n     * according to [token0, token1] cardinality\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        PooledToken[2] calldata tokens,\\n        uint256[2] calldata minAmounts,\\n        LiquidityPoolToken lpToken\\n    ) external returns (uint256[2] memory) {\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        uint256[2] memory amounts = _calculateRemoveLiquidity(amount, tokens, totalSupply);\\n\\n        lpToken.burnFrom(msg.sender, amount);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            require(amounts[i] >= minAmounts[i], \\\"amounts[i] < minAmounts[i]\\\");\\n            tokens[i].token.safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidity(msg.sender, amounts, totalSupply - amount);\\n\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token.\\n     * @param tokenAmount the amount of the lp tokens to burn\\n     * @param tokenReceive  the token you want to receive\\n     * @param tokenCounterpart the counterpart token in the pool of the token you want to receive\\n     * @param minAmount the minimum amount to withdraw, otherwise revert\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken Liquidity pool token contract\\n     * @return amount chosen token that user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        uint256 minAmount,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) external returns (uint256) {\\n        uint256 totalSupply = lpToken.totalSupply();\\n        require(tokenAmount <= lpToken.balanceOf(msg.sender), \\\">LP.balanceOf\\\");\\n\\n        (\\n            uint256 dy, /*uint256 dyFee*/\\n\\n        ) = _calculateWithdrawOneToken(\\n                tokenAmount,\\n                tokenReceive,\\n                tokenCounterpart,\\n                totalSupply,\\n                amplificationParams,\\n                feeParams\\n            );\\n\\n        require(dy >= minAmount, \\\"dy < minAmount\\\");\\n\\n        // TODO: Handle admin fee from dyFee\\n\\n        // Transfer tokens\\n        tokenReceive.token.safeTransfer(msg.sender, dy);\\n\\n        // Burn LP tokens\\n        lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        emit RemoveLiquidityOne(msg.sender, tokenAmount, totalSupply, tokenReceive.token, dy);\\n\\n        return dy;\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances.\\n     *\\n     * @param tokens Array of [token0, token1]\\n     * @param amounts how much of each token to withdraw according to cardinality of pooled tokens\\n     * @param maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken Liquidity pool token contract\\n     * @return actual amount of LP tokens burned in the withdrawal\\n     */\\n    function removeLiquidityImbalance(\\n        PooledToken[2] memory tokens,\\n        uint256[2] memory amounts,\\n        uint256 maxBurnAmount,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) public returns (uint256) {\\n        ManageLiquidityInfo memory v = ManageLiquidityInfo({\\n            d0: 0,\\n            d1: 0,\\n            d2: 0,\\n            preciseA: _getAPrecise(amplificationParams),\\n            lpToken: lpToken,\\n            totalSupply: 0,\\n            tokens: tokens,\\n            oldBalances: [uint256(0), uint256(0)],\\n            newBalances: [uint256(0), uint256(0)]\\n        });\\n\\n        v.totalSupply = v.lpToken.totalSupply();\\n\\n        // Get the current pool invariant d0\\n        if (v.totalSupply != 0) {\\n            uint256 _bal0 = _getTokenBalance(tokens[0].token);\\n            uint256 _bal1 = _getTokenBalance(tokens[1].token);\\n            v.oldBalances = [_bal0, _bal1];\\n            uint256 xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d0 = getD(xp0, xp1, v.preciseA);\\n        }\\n\\n        // calculate pool invariant after balance changes d1\\n        {\\n            require(v.oldBalances[0] >= amounts[0], \\\"AMOUNT_EXCEEDS_BALANCE\\\");\\n            require(v.oldBalances[1] >= amounts[1], \\\"AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n            uint256 _bal0 = v.oldBalances[0] - amounts[0];\\n            uint256 _bal1 = v.oldBalances[1] - amounts[1];\\n            v.newBalances = [_bal0, _bal1];\\n            uint256 _xp0 = _xp(_bal0, tokens[0].precisionMultiplier);\\n            uint256 _xp1 = _xp(_bal1, tokens[1].precisionMultiplier);\\n            v.d1 = getD(_xp0, _xp1, v.preciseA);\\n        }\\n\\n        // calculate swap fees\\n        v.d2 = v.d1;\\n\\n        // first entrant doesn't pay fees\\n        uint256[2] memory fees;\\n        uint256 feePerToken = _feePerToken(feeParams.swapFee);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 idealBal = (v.d1 * v.oldBalances[i]) / v.d0;\\n            (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n            fees[i] = (feePerToken * idealBal.difference(v.newBalances[i])) / FEE_DENOMINATOR;\\n            v.newBalances[i] = v.newBalances[i] - fees[i];\\n            // TODO: handle admin fee\\n        }\\n\\n        // calculate invariant after subtracting fees, d2\\n        {\\n            uint256 _xp0 = _xp(v.newBalances[0], tokens[0].precisionMultiplier);\\n            uint256 _xp1 = _xp(v.newBalances[1], tokens[1].precisionMultiplier);\\n            v.d2 = getD(_xp0, _xp1, v.preciseA);\\n        }\\n\\n        uint256 tokenAmount = ((v.d0 - v.d2) * v.totalSupply) / v.d0;\\n        require(tokenAmount != 0, \\\"Burnt amount cannot be zero\\\");\\n\\n        require(tokenAmount <= maxBurnAmount, \\\"tokenAmount > maxBurnAmount\\\");\\n\\n        v.lpToken.burnFrom(msg.sender, tokenAmount);\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokens[i].token.safeTransfer(msg.sender, amounts[i]);\\n        }\\n\\n        emit RemoveLiquidityImbalance(msg.sender, amounts, fees, v.d1, v.totalSupply - tokenAmount);\\n\\n        return tokenAmount;\\n    }\\n\\n    /**\\n     * @notice Calculate the dy, the amount of selected token that user receives and\\n     * the fee of withdrawing in one token\\n     * @param tokenAmount the amount to withdraw in the pool's precision\\n     * @param tokenReceive which token will be withdrawn\\n     * @param tokenCounterpart the token we need to swap for\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @param lpToken liquidity pool token\\n     * @return the amount of token user will receive\\n     */\\n    function calculateWithdrawOneToken(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams,\\n        LiquidityPoolToken lpToken\\n    ) internal view returns (uint256) {\\n        (uint256 availableAmount, ) = _calculateWithdrawOneToken(\\n            tokenAmount,\\n            tokenReceive,\\n            tokenCounterpart,\\n            lpToken.totalSupply(),\\n            amplificationParams,\\n            feeParams\\n        );\\n        return availableAmount;\\n    }\\n\\n    /**\\n     * @notice Calculate the dy, the amount of selected token that user receives and\\n     * the fee of withdrawing in one token\\n     * @param tokenAmount the amount to withdraw in the pool's precision\\n     * @param tokenReceive which token will be withdrawn\\n     * @param tokenCounterpart the token we need to swap for\\n     * @param totalSupply total supply of LP tokens\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return the amount of token user will receive\\n     */\\n    function _calculateWithdrawOneToken(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        uint256 totalSupply,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) internal view returns (uint256, uint256) {\\n        uint256 dy;\\n        uint256 newY;\\n        uint256 currentY;\\n\\n        (dy, newY, currentY) = calculateWithdrawOneTokenDY(\\n            tokenAmount,\\n            tokenReceive,\\n            tokenCounterpart,\\n            totalSupply,\\n            _getAPrecise(amplificationParams),\\n            feeParams.swapFee\\n        );\\n\\n        // dy_0 (without fees)\\n        // dy, dy_0 - dy\\n\\n        uint256 dySwapFee = (currentY - newY) / tokenReceive.precisionMultiplier - dy;\\n\\n        return (dy, dySwapFee);\\n    }\\n\\n    /**\\n     * @notice Calculate the dy of withdrawing in one token\\n     * @param tokenAmount the amount to withdraw in the pools precision\\n     * @param tokenReceive Swap struct to read from\\n     * @param tokenCounterpart which token will be withdrawn\\n     * @param totalSupply total supply of the lp token\\n     * @return the d and the new y after withdrawing one token\\n     */\\n    function calculateWithdrawOneTokenDY(\\n        uint256 tokenAmount,\\n        PooledToken storage tokenReceive,\\n        PooledToken storage tokenCounterpart,\\n        uint256 totalSupply,\\n        uint256 preciseA,\\n        uint256 swapFee\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        // Get the current D, then solve the stableswap invariant\\n        // y_i for D - tokenAmount\\n        uint256 trBal = _getTokenBalance(tokenReceive.token);\\n        uint256 xpR = _xp(trBal, tokenReceive.precisionMultiplier);\\n\\n        uint256 tcBal = _getTokenBalance(tokenCounterpart.token);\\n        uint256 xpC = _xp(tcBal, tokenCounterpart.precisionMultiplier);\\n\\n        CalculateWithdrawOneTokenDYInfo memory v = CalculateWithdrawOneTokenDYInfo(0, 0, 0, 0, 0);\\n        v.preciseA = preciseA;\\n        // swap from counterpart to receive (so counterpart is from and receive is to)\\n        v.d0 = getD(xpC, xpR, v.preciseA);\\n        v.d1 = v.d0 - ((tokenAmount * v.d0) / totalSupply);\\n\\n        require(tokenAmount <= xpR, \\\"AMOUNT_EXCEEDS_AVAILABLE\\\");\\n\\n        v.newY = getYD(v.preciseA, xpC, v.d1);\\n\\n        v.feePerToken = _feePerToken(swapFee);\\n\\n        // For xpR => dxExpected = xpR * d1 / d0 - newY\\n        // For xpC => dxExpected = xpC - (xpC * d1 / d0)\\n        // xpReduced -= dxExpected * fee / FEE_DENOMINATOR\\n        uint256 xpRReduced = xpR - (((xpR * v.d1) / v.d0 - v.newY) * v.feePerToken) / FEE_DENOMINATOR;\\n        uint256 xpCReduced = xpC - ((xpC - ((xpC * v.d1) / v.d0)) * v.feePerToken) / FEE_DENOMINATOR;\\n\\n        uint256 dy = xpRReduced - getYD(v.preciseA, xpCReduced, v.d1);\\n\\n        dy = (dy - 1) / tokenReceive.precisionMultiplier;\\n\\n        return (dy, v.newY, xpR);\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param tokens Array of tokens in the pool\\n     *          according to pool cardinality [token0, token1]\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to tokens. The amount should be in each\\n     * pooled token's native precision.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param lpToken liquidity pool token\\n     * @return if deposit was true, total amount of lp token that will be minted and if\\n     * deposit was false, total amount of lp token that will be burned\\n     */\\n    function calculateTokenAmount(\\n        PooledToken[2] memory tokens,\\n        uint256[] calldata amounts,\\n        bool deposit,\\n        Amplification storage amplificationParams,\\n        LiquidityPoolToken lpToken\\n    ) external view returns (uint256) {\\n        uint256 a = _getAPrecise(amplificationParams);\\n\\n        uint256 xp0;\\n        uint256 xp0_;\\n        {\\n            uint256 prec0 = tokens[0].precisionMultiplier;\\n            uint256 bal0 = _getTokenBalance(tokens[0].token);\\n            xp0 = _xp(bal0, prec0);\\n            if (!deposit && bal0 < amounts[0]) revert(\\\"AMOUNT_EXCEEDS_SUPPLY\\\");\\n            xp0_ = _xp(deposit ? bal0 + amounts[0] : bal0 - amounts[0], prec0);\\n        }\\n\\n        uint256 xp1;\\n        uint256 xp1_;\\n        {\\n            uint256 prec1 = tokens[1].precisionMultiplier;\\n            uint256 bal1 = _getTokenBalance(tokens[1].token);\\n            xp1 = _xp(bal1, prec1);\\n            if (!deposit && bal1 < amounts[1]) revert(\\\"AMOUNT_EXCEEDS_SUPPLY\\\");\\n            xp1_ = _xp(deposit ? bal1 + amounts[1] : bal1 - amounts[1], prec1);\\n        }\\n\\n        uint256 d0 = getD(xp0, xp1, a);\\n        uint256 d1 = getD(xp0_, xp1_, a);\\n\\n        uint256 totalSupply = lpToken.totalSupply();\\n\\n        if (deposit) {\\n            return totalSupply == 0 ? d1 : ((d1 - d0) * totalSupply) / d0;\\n        } else {\\n            return ((d0 - d1) * totalSupply) / d0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate the price of a token in the pool with given\\n     * precision-adjusted balances and a particular D.\\n     *\\n     * @dev This is accomplished via solving the invariant iteratively.\\n     * See the StableSwap paper and Curve.fi implementation for further details.\\n     *\\n     * x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\\n     * x_1**2 + b*x_1 = c\\n     * x_1 = (x_1**2 + c) / (2*x_1 + b)\\n     *\\n     * @param a the amplification coefficient * n * (n - 1). See the StableSwap paper for details.\\n     * @param xpFrom a precision-adjusted balance of the token to send\\n     * @param d the stableswap invariant\\n     * @return the price of the token, in the same precision as in xp\\n     */\\n    function getYD(\\n        uint256 a,\\n        uint256 xpFrom,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        uint256 c = (d * d) / (xpFrom * NUM_TOKENS);\\n        uint256 s = xpFrom;\\n        uint256 nA = a * NUM_TOKENS;\\n\\n        c = (c * d * A_PRECISION) / (nA * NUM_TOKENS);\\n\\n        uint256 b = s + ((d * A_PRECISION) / nA);\\n\\n        uint256 yPrev;\\n        uint256 y = d;\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            uint256 num = y * y + c;\\n            uint256 denom = y * 2 + b - d;\\n            y = num / denom;\\n            // y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Internally calculates a swap between two tokens.\\n     *\\n     * @dev The caller is expected to transfer the actual amounts (dx and dy)\\n     * using the token contracts.\\n     *\\n     * @param tokenFrom the token to sell\\n     * @param tokenTo the token to buy\\n     * @param dx the number of tokens to sell\\n     * @param amplificationParams amplification parameters for the pool\\n     * @param feeParams fee parameters for the pool\\n     * @return dy the number of tokens the user will get\\n     * @return dyFee the associated fee\\n     */\\n    function _calculateSwap(\\n        PooledToken storage tokenFrom,\\n        PooledToken storage tokenTo,\\n        uint256 dx,\\n        Amplification storage amplificationParams,\\n        FeeParams storage feeParams\\n    ) internal view returns (uint256 dy, uint256 dyFee) {\\n        // tokenFrom balance\\n        uint256 fromBalance = _getTokenBalance(tokenFrom.token);\\n        // precision adjusted balance\\n        uint256 fromXp = _xp(fromBalance, tokenFrom.precisionMultiplier);\\n\\n        // tokenTo balance\\n        uint256 toBalance = _getTokenBalance(tokenTo.token);\\n        // precision adjusted balance\\n        uint256 toXp = _xp(toBalance, tokenTo.precisionMultiplier);\\n\\n        // x is the new total amount of tokenFrom\\n        uint256 x = _xp(dx, tokenFrom.precisionMultiplier) + fromXp;\\n\\n        uint256 y = getY(_getAPrecise(amplificationParams), fromXp, toXp, x);\\n\\n        dy = toXp - y - 1;\\n        dyFee = (dy * feeParams.swapFee) / FEE_DENOMINATOR;\\n        dy = (dy - dyFee) / tokenTo.precisionMultiplier;\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of\\n     * LP tokens\\n     *\\n     * @param amount the amount of LP tokens that would to be burned on\\n     * withdrawal\\n     * @param tokens the tokens of the pool in their cardinality [token0, token1]\\n     * @param lpToken Liquidity pool token\\n     * @return array of amounts of tokens user will receive\\n     */\\n    function calculateRemoveLiquidity(\\n        uint256 amount,\\n        PooledToken[2] calldata tokens,\\n        LiquidityPoolToken lpToken\\n    ) external view returns (uint256[2] memory) {\\n        uint256 totalSupply = lpToken.totalSupply();\\n        uint256[2] memory amounts = _calculateRemoveLiquidity(amount, tokens, totalSupply);\\n        return amounts;\\n    }\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of\\n     * LP tokens\\n     *\\n     * @param amount the amount of LP tokens that would to be burned on\\n     * withdrawal\\n     * @param tokens the tokens of the pool in their cardinality [token0, token1]\\n     * @param totalSupply total supply of the LP token\\n     * @return array of amounts of tokens user will receive\\n     */\\n    function _calculateRemoveLiquidity(\\n        uint256 amount,\\n        PooledToken[2] calldata tokens,\\n        uint256 totalSupply\\n    ) internal view returns (uint256[2] memory) {\\n        require(amount <= totalSupply, \\\"Cannot exceed total supply\\\");\\n\\n        uint256[2] memory outAmounts;\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            uint256 balance = _getTokenBalance(tokens[i].token);\\n            outAmounts[i] = (balance * amount) / totalSupply;\\n        }\\n        return outAmounts;\\n    }\\n\\n    /**\\n     * @notice Calculate the new balances of the tokens given FROM and TO tokens.\\n     * This function is used as a helper function to calculate how much TO token\\n     * the user should receive on swap.\\n     *\\n     * @param preciseA precise form of amplification coefficient\\n     * @param fromXp FROM precision-adjusted balance in the pool\\n     * @param toXp TO precision-adjusted balance in the pool\\n     * @param x the new total amount of precision-adjusted FROM token\\n     * @return the amount of TO token that should remain in the pool\\n     */\\n    function getY(\\n        uint256 preciseA,\\n        uint256 fromXp,\\n        uint256 toXp,\\n        uint256 x\\n    ) internal pure returns (uint256) {\\n        // d is the invariant of the pool\\n        uint256 d = getD(fromXp, toXp, preciseA);\\n        uint256 nA = NUM_TOKENS * preciseA;\\n        uint256 c = (d * d) / (x * NUM_TOKENS);\\n        c = (c * d * A_PRECISION) / (nA * NUM_TOKENS);\\n\\n        uint256 b = x + ((d * A_PRECISION) / nA);\\n        uint256 yPrev;\\n        uint256 y = d;\\n\\n        // iterative approximation\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            yPrev = y;\\n            y = (y * y + c) / (y * 2 + b - d);\\n            // y = y.mul(y).add(c).div(y.mul(2).add(b).sub(d));\\n            if (y.within1(yPrev)) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"Approximation did not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Get D, the StableSwap invariant, based on a set of balances and a particular A.\\n     * @param fromXp a precision-adjusted balance of the token to sell\\n     * @param toXp a precision-adjusted balance of the token to buy\\n     * @param a the amplification coefficient * n * (n - 1) in A_PRECISION.\\n     * See the StableSwap paper for details\\n     * @return the invariant, at the precision of the pool\\n     */\\n    function getD(\\n        uint256 fromXp,\\n        uint256 toXp,\\n        uint256 a\\n    ) internal pure returns (uint256) {\\n        uint256 s = fromXp + toXp;\\n        if (s == 0) return 0;\\n\\n        uint256 prevD;\\n        uint256 d = s;\\n        uint256 nA = a * NUM_TOKENS;\\n\\n        for (uint256 i = 0; i < MAX_LOOP_LIMIT; i++) {\\n            uint256 dP = d;\\n\\n            // dP = dP.mul(d).div(xp[j].mul(numTokens));\\n\\n            dP = (dP * d) / (fromXp * NUM_TOKENS);\\n            dP = (dP * d) / (toXp * NUM_TOKENS);\\n\\n            prevD = d;\\n\\n            uint256 num = ((nA * s) / A_PRECISION + (dP * NUM_TOKENS)) * d;\\n            uint256 denom = ((nA - A_PRECISION) * d) / A_PRECISION + (NUM_TOKENS + 1) * dP;\\n            d = num / denom;\\n            // d = nA\\n            //     .mul(s)\\n            //     .div(A_PRECISION)\\n            //     .add(dP.mul(NUM_TOKENS))\\n            //     .mul(d)\\n            //     .div(\\n            //         nA\\n            //             .sub(A_PRECISION)\\n            //             .mul(d)\\n            //             .div(A_PRECISION)\\n            //             .add(NUM_TOKENS.add(1).mul(dP))\\n            //     );\\n            if (d.within1(prevD)) {\\n                return d;\\n            }\\n        }\\n\\n        // Convergence should occur in 4 loops or less. If this is reached, there may be something wrong\\n        // with the pool. If this were to occur repeatedly, LPs should withdraw via `removeLiquidity()`\\n        // function which does not rely on D.\\n        revert(\\\"D does not converge\\\");\\n    }\\n\\n    /**\\n     * @notice Given a a balance and precision multiplier, return the\\n     * precision-adjusted balance.\\n     *\\n     * @param balance a token balance in its native precision\\n     *\\n     * @param precisionMultiplier a precision multiplier for the token, When multiplied together they\\n     * should yield amounts at the pool's precision.\\n     *\\n     * @return an amount  \\\"scaled\\\" to the pool's precision\\n     */\\n    function _xp(uint256 balance, uint256 precisionMultiplier) internal pure returns (uint256) {\\n        return balance * precisionMultiplier;\\n    }\\n\\n    /**\\n     * @notice internal helper function to calculate fee per token multiplier used in\\n     * swap fee calculations\\n     * @param swapFee swap fee for the tokens\\n     */\\n    function _feePerToken(uint256 swapFee) internal pure returns (uint256) {\\n        return swapFee / NUM_TOKENS;\\n    }\\n\\n    // =============================================\\n    //             AMPLIFICATION LOGIC\\n    // =============================================\\n\\n    // Constant values used in ramping A calculations\\n    uint256 public constant A_PRECISION = 100;\\n    uint256 public constant MAX_A = 10**6;\\n    uint256 private constant MAX_A_CHANGE = 2;\\n    uint256 private constant MIN_RAMP_TIME = 14 days;\\n\\n    struct Amplification {\\n        // variables around the ramp management of A,\\n        // the amplification coefficient * n * (n - 1)\\n        // see https://www.curve.fi/stableswap-paper.pdf for details\\n        uint256 initialA;\\n        uint256 futureA;\\n        uint256 initialATime;\\n        uint256 futureATime;\\n    }\\n\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter\\n     */\\n    function getA(Amplification storage self) external view returns (uint256) {\\n        return _getAPrecise(self) / A_PRECISION;\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function getAPrecise(Amplification storage self) external view returns (uint256) {\\n        return _getAPrecise(self);\\n    }\\n\\n    /**\\n     * @notice Return A in its raw precision\\n     * @dev See the StableSwap paper for details\\n     * @param self Swap struct to read from\\n     * @return A parameter in its raw precision form\\n     */\\n    function _getAPrecise(Amplification storage self) internal view returns (uint256) {\\n        uint256 t1 = self.futureATime; // time when ramp is finished\\n        uint256 a1 = self.futureA; // final A value when ramp is finished\\n\\n        if (block.timestamp < t1) {\\n            uint256 t0 = self.initialATime; // time when ramp is started\\n            uint256 a0 = self.initialA; // initial A value when ramp is started\\n            if (a1 > a0) {\\n                // a0 + (a1 - a0) * (block.timestamp - t0) / (t1 - t0)\\n                return a0 + ((a1 - a0) * (block.timestamp - t0)) / (t1 - t0);\\n            } else {\\n                // a0 - (a0 - a1) * (block.timestamp - t0) / (t1 - t0)\\n                return a0 - ((a0 - a1) * (block.timestamp - t0)) / (t1 - t0);\\n            }\\n        } else {\\n            return a1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA_ and futureTime_\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param self Swap struct to update\\n     * @param futureA_ the new A to ramp towards\\n     * @param futureTime_ timestamp when the new A should be reached\\n     */\\n    function rampA(\\n        Amplification storage self,\\n        uint256 futureA_,\\n        uint256 futureTime_\\n    ) external {\\n        require(block.timestamp >= self.initialATime + 1 days, \\\"Wait 1 day before starting ramp\\\");\\n        require(futureTime_ >= block.timestamp + MIN_RAMP_TIME, \\\"Insufficient ramp time\\\");\\n        require(futureA_ > 0 && futureA_ < MAX_A, \\\"futureA_ must be > 0 and < MAX_A\\\");\\n\\n        uint256 initialAPrecise = _getAPrecise(self);\\n        uint256 futureAPrecise = futureA_ * A_PRECISION;\\n\\n        if (futureAPrecise < initialAPrecise) {\\n            require(futureAPrecise * MAX_A_CHANGE >= initialAPrecise, \\\"futureA_ is too small\\\");\\n        } else {\\n            require(futureAPrecise <= initialAPrecise * MAX_A_CHANGE, \\\"futureA_ is too large\\\");\\n        }\\n\\n        self.initialA = initialAPrecise;\\n        self.futureA = futureAPrecise;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = futureTime_;\\n\\n        emit RampA(initialAPrecise, futureAPrecise, block.timestamp, futureTime_);\\n    }\\n\\n    /**\\n     * @notice Stops ramping A immediately. Once this function is called, rampA()\\n     * cannot be called for another 24 hours\\n     * @param self Swap struct to update\\n     */\\n    function stopRampA(Amplification storage self) external {\\n        require(self.futureATime > block.timestamp, \\\"Ramp is already stopped\\\");\\n\\n        uint256 currentA = _getAPrecise(self);\\n        self.initialA = currentA;\\n        self.futureA = currentA;\\n        self.initialATime = block.timestamp;\\n        self.futureATime = block.timestamp;\\n\\n        emit StopRampA(currentA, block.timestamp);\\n    }\\n\\n    // =============================================\\n    //            TOKEN INTERACTIONS\\n    // =============================================\\n\\n    function getTokenBalance(PooledToken storage _token) external view returns (uint256) {\\n        return _getTokenBalance(_token.token);\\n    }\\n\\n    function _getTokenBalance(IERC20 _token) internal view returns (uint256) {\\n        return _token.balanceOf(address(this));\\n    }\\n\\n    // =============================================\\n    //            FEE MANAGEMENT\\n    // =============================================\\n\\n    /**\\n     * @notice Sets the admin fee\\n     * @dev adminFee cannot be higher than 100% of the swap fee\\n     * @param self Swap struct to update\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(FeeParams storage self, uint256 newAdminFee) external {\\n        require(newAdminFee <= MAX_ADMIN_FEE, \\\"Fee is too high\\\");\\n        self.adminFee = newAdminFee;\\n\\n        emit NewAdminFee(newAdminFee);\\n    }\\n\\n    /**\\n     * @notice update the swap fee\\n     * @dev fee cannot be higher than 1% of each swap\\n     * @param self Swap struct to update\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(FeeParams storage self, uint256 newSwapFee) external {\\n        require(newSwapFee <= MAX_SWAP_FEE, \\\"Fee is too high\\\");\\n        self.swapFee = newSwapFee;\\n\\n        emit NewSwapFee(newSwapFee);\\n    }\\n}\\n\",\"keccak256\":\"0x27d47fd804ea440ab6d540aeb26b92e69924bfd57343fe76ab08da6bf3f9971d\",\"license\":\"MIT\"},\"contracts/tenderswap/TenderSwap.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport { Multicall } from \\\"../helpers/Multicall.sol\\\";\\nimport { SelfPermit } from \\\"../helpers/SelfPermit.sol\\\";\\n\\nimport \\\"./LiquidityPoolToken.sol\\\";\\nimport \\\"./SwapUtils.sol\\\";\\nimport \\\"./ITenderSwap.sol\\\";\\n\\n// TODO: flat withdraw LP token fee ?\\n\\ninterface IERC20Decimals is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @title TenderSwap\\n * @dev TenderSwap is a light-weight StableSwap implementation for two assets.\\n * See the Curve StableSwap paper for more details (https://curve.fi/files/stableswap-paper.pdf).\\n * that trade 1:1 with eachother (e.g. USD stablecoins or tenderToken derivatives vs their underlying assets).\\n * It supports Elastic Supply ERC20 tokens, which are tokens of which the balances can change\\n * as the total supply of the token 'rebases'.\\n */\\n\\ncontract TenderSwap is OwnableUpgradeable, ReentrancyGuardUpgradeable, ITenderSwap, Multicall, SelfPermit {\\n    using SwapUtils for SwapUtils.Amplification;\\n    using SwapUtils for SwapUtils.PooledToken;\\n    using SwapUtils for SwapUtils.FeeParams;\\n\\n    // Fee parameters\\n    SwapUtils.FeeParams public feeParams;\\n\\n    // Amplification coefficient parameters\\n    SwapUtils.Amplification public amplificationParams;\\n\\n    // Pool Tokens\\n    SwapUtils.PooledToken private token0;\\n    SwapUtils.PooledToken private token1;\\n\\n    // Liquidity pool shares\\n    LiquidityPoolToken public override lpToken;\\n\\n    /*** MODIFIERS ***/\\n\\n    /**\\n     * @notice Modifier to check deadline against current timestamp\\n     * @param _deadline latest timestamp to accept this transaction\\n     */\\n    modifier deadlineCheck(uint256 _deadline) {\\n        _deadlineCheck(_deadline);\\n        _;\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function initialize(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        LiquidityPoolToken lpTokenTargetAddress\\n    ) public override initializer returns (bool) {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        // Check token addresses are different and not 0\\n        require(_token0 != _token1, \\\"DUPLICATE_TOKENS\\\");\\n        require(address(_token0) != address(0), \\\"TOKEN0_ZEROADDRESS\\\");\\n        require(address(_token1) != address(0), \\\"TOKEN1_ZEROADDRESS\\\");\\n\\n        // Set precision multipliers\\n        uint8 _tenderTokenDecimals = IERC20Decimals(address(_token0)).decimals();\\n        require(_tenderTokenDecimals > 0);\\n        token0 = SwapUtils.PooledToken({\\n            token: _token0,\\n            precisionMultiplier: 10**(SwapUtils.POOL_PRECISION_DECIMALS - _tenderTokenDecimals)\\n        });\\n\\n        uint8 _tokenDecimals = IERC20Decimals(address(_token1)).decimals();\\n        require(_tokenDecimals > 0);\\n        token1 = SwapUtils.PooledToken({\\n            token: _token1,\\n            precisionMultiplier: 10**(SwapUtils.POOL_PRECISION_DECIMALS - _tokenDecimals)\\n        });\\n\\n        // Check _a and Set Amplifaction Parameters\\n        require(_a < SwapUtils.MAX_A, \\\"_a exceeds maximum\\\");\\n        amplificationParams.initialA = _a * SwapUtils.A_PRECISION;\\n        amplificationParams.futureA = _a * SwapUtils.A_PRECISION;\\n\\n        // Check _fee, _adminFee and set fee parameters\\n        require(_fee < SwapUtils.MAX_SWAP_FEE, \\\"_fee exceeds maximum\\\");\\n        require(_adminFee < SwapUtils.MAX_ADMIN_FEE, \\\"_adminFee exceeds maximum\\\");\\n        feeParams = SwapUtils.FeeParams({ swapFee: _fee, adminFee: _adminFee });\\n\\n        // Clone an existing LP token deployment in an immutable way\\n        // see https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.2.0/contracts/proxy/Clones.sol\\n        lpToken = LiquidityPoolToken(Clones.clone(address(lpTokenTargetAddress)));\\n        require(lpToken.initialize(lpTokenName, lpTokenSymbol), \\\"could not init lpToken clone\\\");\\n\\n        return true;\\n    }\\n\\n    /*** VIEW FUNCTIONS ***/\\n\\n    /// @inheritdoc ITenderSwap\\n    function getA() external view override returns (uint256) {\\n        return amplificationParams.getA();\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function getAPrecise() external view override returns (uint256) {\\n        return amplificationParams.getAPrecise();\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function getToken0() external view override returns (IERC20) {\\n        return token0.token;\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function getToken1() external view override returns (IERC20) {\\n        return token1.token;\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function getToken0Balance() external view override returns (uint256) {\\n        return token0.getTokenBalance();\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function getToken1Balance() external view override returns (uint256) {\\n        return token1.getTokenBalance();\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function getVirtualPrice() external view override returns (uint256) {\\n        return SwapUtils.getVirtualPrice(token0, token1, amplificationParams, lpToken);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function calculateSwap(IERC20 _tokenFrom, uint256 _dx) external view override returns (uint256) {\\n        return\\n            _tokenFrom == token0.token\\n                ? SwapUtils.calculateSwap(token0, token1, _dx, amplificationParams, feeParams)\\n                : SwapUtils.calculateSwap(token1, token0, _dx, amplificationParams, feeParams);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function calculateRemoveLiquidity(uint256 amount) external view override returns (uint256[2] memory) {\\n        SwapUtils.PooledToken[2] memory tokens_ = [token0, token1];\\n        return SwapUtils.calculateRemoveLiquidity(amount, tokens_, lpToken);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, IERC20 tokenReceive)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            tokenReceive == token0.token\\n                ? SwapUtils.calculateWithdrawOneToken(\\n                    tokenAmount,\\n                    token0,\\n                    token1,\\n                    amplificationParams,\\n                    feeParams,\\n                    lpToken\\n                )\\n                : SwapUtils.calculateWithdrawOneToken(\\n                    tokenAmount,\\n                    token1,\\n                    token0,\\n                    amplificationParams,\\n                    feeParams,\\n                    lpToken\\n                );\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit) external view override returns (uint256) {\\n        SwapUtils.PooledToken[2] memory tokens_ = [token0, token1];\\n\\n        return SwapUtils.calculateTokenAmount(tokens_, amounts, deposit, amplificationParams, lpToken);\\n    }\\n\\n    /*** STATE MODIFYING FUNCTIONS ***/\\n\\n    /// @inheritdoc ITenderSwap\\n    function swap(\\n        IERC20 _tokenFrom,\\n        uint256 _dx,\\n        uint256 _minDy,\\n        uint256 _deadline\\n    ) external override nonReentrant deadlineCheck(_deadline) returns (uint256) {\\n        if (_tokenFrom == token0.token) {\\n            return SwapUtils.swap(token0, token1, _dx, _minDy, amplificationParams, feeParams);\\n        } else if (_tokenFrom == token1.token) {\\n            return SwapUtils.swap(token1, token0, _dx, _minDy, amplificationParams, feeParams);\\n        } else {\\n            revert(\\\"BAD_TOKEN_FROM\\\");\\n        }\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function addLiquidity(\\n        uint256[2] calldata _amounts,\\n        uint256 _minToMint,\\n        uint256 _deadline\\n    ) external override nonReentrant deadlineCheck(_deadline) returns (uint256) {\\n        SwapUtils.PooledToken[2] memory tokens_ = [token0, token1];\\n\\n        return SwapUtils.addLiquidity(tokens_, _amounts, _minToMint, amplificationParams, feeParams, lpToken);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[2] calldata minAmounts,\\n        uint256 deadline\\n    ) external override nonReentrant deadlineCheck(deadline) returns (uint256[2] memory) {\\n        SwapUtils.PooledToken[2] memory tokens_ = [token0, token1];\\n\\n        return SwapUtils.removeLiquidity(amount, tokens_, minAmounts, lpToken);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function removeLiquidityOneToken(\\n        uint256 _tokenAmount,\\n        IERC20 _tokenReceive,\\n        uint256 _minAmount,\\n        uint256 _deadline\\n    ) external override nonReentrant deadlineCheck(_deadline) returns (uint256) {\\n        if (_tokenReceive == token0.token) {\\n            return\\n                SwapUtils.removeLiquidityOneToken(\\n                    _tokenAmount,\\n                    token0,\\n                    token1,\\n                    _minAmount,\\n                    amplificationParams,\\n                    feeParams,\\n                    lpToken\\n                );\\n        } else {\\n            return\\n                SwapUtils.removeLiquidityOneToken(\\n                    _tokenAmount,\\n                    token1,\\n                    token0,\\n                    _minAmount,\\n                    amplificationParams,\\n                    feeParams,\\n                    lpToken\\n                );\\n        }\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function removeLiquidityImbalance(\\n        uint256[2] calldata _amounts,\\n        uint256 _maxBurnAmount,\\n        uint256 _deadline\\n    ) external override nonReentrant deadlineCheck(_deadline) returns (uint256) {\\n        SwapUtils.PooledToken[2] memory tokens_ = [token0, token1];\\n\\n        return\\n            SwapUtils.removeLiquidityImbalance(\\n                tokens_,\\n                _amounts,\\n                _maxBurnAmount,\\n                amplificationParams,\\n                feeParams,\\n                lpToken\\n            );\\n    }\\n\\n    /*** ADMIN FUNCTIONS ***/\\n\\n    /// @inheritdoc ITenderSwap\\n    function setAdminFee(uint256 newAdminFee) external override onlyOwner {\\n        feeParams.setAdminFee(newAdminFee);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function setSwapFee(uint256 newSwapFee) external override onlyOwner {\\n        feeParams.setSwapFee(newSwapFee);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function rampA(uint256 futureA, uint256 futureTime) external override onlyOwner {\\n        amplificationParams.rampA(futureA, futureTime);\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function stopRampA() external override onlyOwner {\\n        amplificationParams.stopRampA();\\n    }\\n\\n    /*** INTERNAL FUNCTIONS ***/\\n\\n    function _deadlineCheck(uint256 _deadline) internal view {\\n        require(block.timestamp <= _deadline, \\\"Deadline not met\\\");\\n    }\\n\\n    /// @inheritdoc ITenderSwap\\n    function transferOwnership(address _newOwnner) public override(OwnableUpgradeable, ITenderSwap) onlyOwner {\\n        OwnableUpgradeable.transferOwnership(_newOwnner);\\n    }\\n}\\n\",\"keccak256\":\"0xf02b8a6b2b3811ba992a341373ff67efdf7bb3944deba5661a2614e3ce13f50a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101cd5760003560e01c8063afcd5f4b116100f7578063ce1fdb8b11610095578063e6ab280611610064578063e6ab28061461068c578063f2fad2b6146106c9578063f2fde38b14610706578063f3995c671461072f576101cd565b8063ce1fdb8b146105bc578063d46300fd146105f9578063d6f0df6214610624578063e25aa5fa14610661576101cd565b8063c2d9ecfa116100d1578063c2d9ecfa14610521578063c2e3140a1461054c578063c4db7fa014610568578063c9ec92481461057f576101cd565b8063afcd5f4b1461047c578063ba94a315146104b9578063bfc65c9b146104e4576101cd565b80635fcbd2851161016f5780638beb60b61161013e5780638beb60b6146103cc5780638da5cb5b146103f55780639242164f14610420578063ac9650d81461044c576101cd565b80635fcbd285146103225780636f26a7101461034d578063715018a614610378578063805d27661461038f576101cd565b806334e19907116101ab57806334e199071461026857806346eda749146102915780635153786b146102ce578063593d132c146102f9576101cd565b80630ba81959146101d25780631de8d8cb146101fd578063256967ac1461023a575b600080fd5b3480156101de57600080fd5b506101e761074b565b6040516101f49190614d8d565b60405180910390f35b34801561020957600080fd5b50610224600480360381019061021f9190613f10565b6107dc565b6040516102319190614d8d565b60405180910390f35b34801561024657600080fd5b5061024f61096a565b60405161025f9493929190614ebd565b60405180910390f35b34801561027457600080fd5b5061028f600480360381019061028a9190613ff0565b610988565b005b34801561029d57600080fd5b506102b860048036038101906102b39190613d35565b610a73565b6040516102c59190614d8d565b60405180910390f35b3480156102da57600080fd5b506102e3610c86565b6040516102f09190614d8d565b60405180910390f35b34801561030557600080fd5b50610320600480360381019061031b9190614130565b610d17565b005b34801561032e57600080fd5b50610337610e05565b604051610344919061496a565b60405180910390f35b34801561035957600080fd5b50610362610e2b565b60405161036f919061494f565b60405180910390f35b34801561038457600080fd5b5061038d610e58565b005b34801561039b57600080fd5b506103b660048036038101906103b19190614091565b610ee0565b6040516103c39190614d8d565b60405180910390f35b3480156103d857600080fd5b506103f360048036038101906103ee9190613ff0565b610fb0565b005b34801561040157600080fd5b5061040a61109b565b6040516104179190614783565b60405180910390f35b34801561042c57600080fd5b506104356110c5565b604051610443929190614e94565b60405180910390f35b61046660048036038101906104619190613cf0565b6110d7565b6040516104739190614836565b60405180910390f35b34801561048857600080fd5b506104a3600480360381019061049e9190613e2e565b6112e3565b6040516104b09190614934565b60405180910390f35b3480156104c557600080fd5b506104ce6119ed565b6040516104db919061494f565b60405180910390f35b3480156104f057600080fd5b5061050b60048036038101906105069190613d35565b611a1a565b6040516105189190614d8d565b60405180910390f35b34801561052d57600080fd5b50610536611c2d565b6040516105439190614d8d565b60405180910390f35b61056660048036038101906105619190613c67565b611cbe565b005b34801561057457600080fd5b5061057d611d78565b005b34801561058b57600080fd5b506105a660048036038101906105a19190613f4c565b611e60565b6040516105b39190614d8d565b60405180910390f35b3480156105c857600080fd5b506105e360048036038101906105de91906140cd565b6120f0565b6040516105f09190614d8d565b60405180910390f35b34801561060557600080fd5b5061060e612330565b60405161061b9190614d8d565b60405180910390f35b34801561063057600080fd5b5061064b60048036038101906106469190614042565b6123c1565b6040516106589190614919565b60405180910390f35b34801561066d57600080fd5b506106766125d3565b6040516106839190614d8d565b60405180910390f35b34801561069857600080fd5b506106b360048036038101906106ae9190613dad565b61268c565b6040516106c09190614d8d565b60405180910390f35b3480156106d557600080fd5b506106f060048036038101906106eb9190613ff0565b61283c565b6040516106fd9190614919565b60405180910390f35b34801561071257600080fd5b5061072d60048036038101906107289190613c3e565b6129e9565b005b61074960048036038101906107449190613c67565b612a71565b005b6000609973__$134e00c0bcac37abc21e465e57a9b81eef$__635d5c4f9690916040518263ffffffff1660e01b81526004016107879190614bfe565b60206040518083038186803b15801561079f57600080fd5b505af41580156107b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d79190614019565b905090565b6000609d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146108ce5773__$134e00c0bcac37abc21e465e57a9b81eef$__63e5537d20609f609d85609960976040518663ffffffff1660e01b8152600401610879959493929190614cd9565b60206040518083038186803b15801561089157600080fd5b505af41580156108a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c99190614019565b610962565b73__$134e00c0bcac37abc21e465e57a9b81eef$__63e5537d20609d609f85609960976040518663ffffffff1660e01b8152600401610911959493929190614cd9565b60206040518083038186803b15801561092957600080fd5b505af415801561093d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109619190614019565b5b905092915050565b60998060000154908060010154908060020154908060030154905084565b610990612a87565b73ffffffffffffffffffffffffffffffffffffffff166109ae61109b565b73ffffffffffffffffffffffffffffffffffffffff1614610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90614afe565b60405180910390fd5b609773__$134e00c0bcac37abc21e465e57a9b81eef$__6344b4519c9091836040518363ffffffff1660e01b8152600401610a40929190614c50565b60006040518083038186803b158015610a5857600080fd5b505af4158015610a6c573d6000803e3d6000fd5b5050505050565b600060026065541415610abb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab290614bbe565b60405180910390fd5b600260658190555081610acd81612a8f565b60006040518060400160405280609d6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001609f6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815250905073__$134e00c0bcac37abc21e465e57a9b81eef$__635aa533ee8288886099609760a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518763ffffffff1660e01b8152600401610c2396959493929190614858565b60206040518083038186803b158015610c3b57600080fd5b505af4158015610c4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c739190614019565b9250505060016065819055509392505050565b6000609f73__$134e00c0bcac37abc21e465e57a9b81eef$__636cc631fa90916040518263ffffffff1660e01b8152600401610cc29190614c79565b60206040518083038186803b158015610cda57600080fd5b505af4158015610cee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d129190614019565b905090565b610d1f612a87565b73ffffffffffffffffffffffffffffffffffffffff16610d3d61109b565b73ffffffffffffffffffffffffffffffffffffffff1614610d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8a90614afe565b60405180910390fd5b609973__$134e00c0bcac37abc21e465e57a9b81eef$__6314f685c3909184846040518463ffffffff1660e01b8152600401610dd193929190614c19565b60006040518083038186803b158015610de957600080fd5b505af4158015610dfd573d6000803e3d6000fd5b505050505050565b60a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609f60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e60612a87565b73ffffffffffffffffffffffffffffffffffffffff16610e7e61109b565b73ffffffffffffffffffffffffffffffffffffffff1614610ed4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ecb90614afe565b60405180910390fd5b610ede6000612ad5565b565b6000609d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f7357610f6e83609f609d6099609760a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b9b565b610fa8565b610fa783609d609f6099609760a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612b9b565b5b905092915050565b610fb8612a87565b73ffffffffffffffffffffffffffffffffffffffff16610fd661109b565b73ffffffffffffffffffffffffffffffffffffffff161461102c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102390614afe565b60405180910390fd5b609773__$134e00c0bcac37abc21e465e57a9b81eef$__6327d047759091836040518363ffffffff1660e01b8152600401611068929190614c50565b60006040518083038186803b15801561108057600080fd5b505af4158015611094573d6000803e3d6000fd5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60978060000154908060010154905082565b60608282905067ffffffffffffffff81111561111c577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561114f57816020015b606081526020019060019003908161113a5790505b50905060005b838390508110156112dc576000803073ffffffffffffffffffffffffffffffffffffffff168686858181106111b3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906111c59190614f02565b6040516111d392919061476a565b600060405180830381855af49150503d806000811461120e576040519150601f19603f3d011682016040523d82523d6000602084013e611213565b606091505b5091509150816112825760448151101561122c57600080fd5b600481019050808060200190518101906112469190613faf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112799190614985565b60405180910390fd5b808484815181106112bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250505080806112d4906154b4565b915050611155565b5092915050565b60008060019054906101000a900460ff168061130a575060008054906101000a900460ff16155b611349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134090614ade565b60405180910390fd5b60008060019054906101000a900460ff161590508015611399576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6113a1612c3a565b6113a9612d13565b6113b1612dfc565b8873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415611420576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611417906149fe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161415611490576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148790614a5e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff161415611500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f790614b3e565b60405180910390fd5b60008a73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561154857600080fd5b505afa15801561155c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611580919061416c565b905060008160ff161161159257600080fd5b60405180604001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018260126115c69190615342565b600a6115d29190615196565b815250609d60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015590505060008a73ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561167357600080fd5b505afa158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab919061416c565b905060008160ff16116116bd57600080fd5b60405180604001604052808c73ffffffffffffffffffffffffffffffffffffffff1681526020018260126116f19190615342565b600a6116fd9190615196565b815250609f60008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050620f4240881061179b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179290614abe565b60405180910390fd5b6064886117a891906152b4565b6099600001819055506064886117be91906152b4565b6099600101819055506305f5e100871061180d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180490614b5e565b60405180910390fd5b6402540be4008610611854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184b90614a3e565b60405180910390fd5b6040518060400160405280888152602001878152506097600082015181600001556020820151816001015590505061188b85612edd565b60a160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634cd88b768b8b6040518363ffffffff1660e01b81526004016119289291906149a7565b602060405180830381600087803b15801561194257600080fd5b505af1158015611956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197a9190613e05565b6119b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b090614bde565b60405180910390fd5b60019350505080156119e05760008060016101000a81548160ff0219169083151502179055505b5098975050505050505050565b6000609d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060026065541415611a62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5990614bbe565b60405180910390fd5b600260658190555081611a7481612a8f565b60006040518060400160405280609d6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001609f6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815250905073__$134e00c0bcac37abc21e465e57a9b81eef$__6302eb2c228288886099609760a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518763ffffffff1660e01b8152600401611bca96959493929190614858565b60206040518083038186803b158015611be257600080fd5b505af4158015611bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1a9190614019565b9250505060016065819055509392505050565b6000609d73__$134e00c0bcac37abc21e465e57a9b81eef$__636cc631fa90916040518263ffffffff1660e01b8152600401611c699190614c79565b60206040518083038186803b158015611c8157600080fd5b505af4158015611c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb99190614019565b905090565b60008673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611cfb92919061479e565b60206040518083038186803b158015611d1357600080fd5b505afa158015611d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4b9190614019565b905085811015611d6f57611d6e878288611d65919061530e565b87878787612fb2565b5b50505050505050565b611d80612a87565b73ffffffffffffffffffffffffffffffffffffffff16611d9e61109b565b73ffffffffffffffffffffffffffffffffffffffff1614611df4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611deb90614afe565b60405180910390fd5b609973__$134e00c0bcac37abc21e465e57a9b81eef$__63b0845bc590916040518263ffffffff1660e01b8152600401611e2e9190614bfe565b60006040518083038186803b158015611e4657600080fd5b505af4158015611e5a573d6000803e3d6000fd5b50505050565b600060026065541415611ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9f90614bbe565b60405180910390fd5b600260658190555081611eba81612a8f565b609d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415611faf5773__$134e00c0bcac37abc21e465e57a9b81eef$__63cbab294f609d609f8888609960976040518763ffffffff1660e01b8152600401611f5896959493929190614d2c565b60206040518083038186803b158015611f7057600080fd5b505af4158015611f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa89190614019565b91506120df565b609f60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156120a45773__$134e00c0bcac37abc21e465e57a9b81eef$__63cbab294f609f609d8888609960976040518763ffffffff1660e01b815260040161204d96959493929190614d2c565b60206040518083038186803b15801561206557600080fd5b505af4158015612079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209d9190614019565b91506120df565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d690614a7e565b60405180910390fd5b506001606581905550949350505050565b600060026065541415612138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212f90614bbe565b60405180910390fd5b60026065819055508161214a81612a8f565b609d60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614156122635773__$134e00c0bcac37abc21e465e57a9b81eef$__63a7abb39687609d609f886099609760a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518863ffffffff1660e01b815260040161220c9796959493929190614e25565b60206040518083038186803b15801561222457600080fd5b505af4158015612238573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225c9190614019565b915061231f565b73__$134e00c0bcac37abc21e465e57a9b81eef$__63a7abb39687609f609d886099609760a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518863ffffffff1660e01b81526004016122cc9796959493929190614e25565b60206040518083038186803b1580156122e457600080fd5b505af41580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190614019565b91505b506001606581905550949350505050565b6000609973__$134e00c0bcac37abc21e465e57a9b81eef$__63c15dc17c90916040518263ffffffff1660e01b815260040161236c9190614bfe565b60206040518083038186803b15801561238457600080fd5b505af4158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc9190614019565b905090565b6123c961393e565b6002606554141561240f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240690614bbe565b60405180910390fd5b60026065819055508161242181612a8f565b60006040518060400160405280609d6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001609f6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815250905073__$134e00c0bcac37abc21e465e57a9b81eef$__632657942987838860a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b81526004016125719493929190614da8565b604080518083038186803b15801561258857600080fd5b505af415801561259c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c09190613d84565b9250505060016065819055509392505050565b600073__$134e00c0bcac37abc21e465e57a9b81eef$__63809d0648609d609f609960a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518563ffffffff1660e01b81526004016126379493929190614c94565b60206040518083038186803b15801561264f57600080fd5b505af4158015612663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126879190614019565b905090565b6000806040518060400160405280609d6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001609f6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815250905073__$134e00c0bcac37abc21e465e57a9b81eef$__63cb6802c882878787609960a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518763ffffffff1660e01b81526004016127e2969594939291906148bc565b60206040518083038186803b1580156127fa57600080fd5b505af415801561280e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128329190614019565b9150509392505050565b61284461393e565b60006040518060400160405280609d6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250508152602001609f6040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481525050815250905073__$134e00c0bcac37abc21e465e57a9b81eef$__63296104cd848360a160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518463ffffffff1660e01b815260040161299293929190614dee565b604080518083038186803b1580156129a957600080fd5b505af41580156129bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e19190613d84565b915050919050565b6129f1612a87565b73ffffffffffffffffffffffffffffffffffffffff16612a0f61109b565b73ffffffffffffffffffffffffffffffffffffffff1614612a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5c90614afe565b60405180910390fd5b612a6e81613031565b50565b612a7f868686868686612fb2565b505050505050565b600033905090565b80421115612ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ac990614b1e565b60405180910390fd5b50565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080612c298888888673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bea57600080fd5b505afa158015612bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c229190614019565b8989613129565b509050809150509695505050505050565b600060019054906101000a900460ff1680612c60575060008054906101000a900460ff16155b612c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c9690614ade565b60405180910390fd5b60008060019054906101000a900460ff161590508015612cef576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8015612d105760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612d39575060008054906101000a900460ff16155b612d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d6f90614ade565b60405180910390fd5b60008060019054906101000a900460ff161590508015612dc8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612dd8612dd3612a87565b612ad5565b8015612df95760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612e22575060008054906101000a900460ff16155b612e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e5890614ade565b60405180910390fd5b60008060019054906101000a900460ff161590508015612eb1576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60016065819055508015612eda5760008060016101000a81548160ff0219169083151502179055505b50565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612fad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa490614a9e565b60405180910390fd5b919050565b8573ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401612ff797969594939291906147c7565b600060405180830381600087803b15801561301157600080fd5b505af1158015613025573d6000803e3d6000fd5b50505050505050505050565b613039612a87565b73ffffffffffffffffffffffffffffffffffffffff1661305761109b565b73ffffffffffffffffffffffffffffffffffffffff16146130ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a490614afe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561311d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613114906149de565b60405180910390fd5b61312681612ad5565b50565b600080600080600061314b8b8b8b8b6131418c613196565b8b60000154613272565b8093508194508295505050506000838b60010154848461316b919061530e565b6131759190615112565b61317f919061530e565b905083819550955050505050965096945050505050565b600080826003015490506000836001015490508142101561326757600084600201549050600085600001549050808311156132195781846131d7919061530e565b82426131e3919061530e565b82856131ef919061530e565b6131f991906152b4565b6132039190615112565b8161320e91906150bc565b94505050505061326d565b8184613225919061530e565b8242613231919061530e565b848361323d919061530e565b61324791906152b4565b6132519190615112565b8161325c919061530e565b94505050505061326d565b80925050505b919050565b6000806000806132a58960000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613507565b905060006132b7828b60010154613599565b905060006132e88a60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613507565b905060006132fa828c60010154613599565b905060006040518060a00160405280600081526020016000815260200160008152602001600081526020016000815250905089816080018181525050613345828583608001516135af565b8160000181815250508a81600001518f61335f91906152b4565b6133699190615112565b8160000151613378919061530e565b816020018181525050838e11156133c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133bb90614a1e565b60405180910390fd5b6133d78160800151838360200151613761565b8160400181815250506133e9896138de565b81606001818152505060006402540be40082606001518360400151846000015185602001518961341991906152b4565b6134239190615112565b61342d919061530e565b61343791906152b4565b6134419190615112565b8561344c919061530e565b905060006402540be4008360600151846000015185602001518761347091906152b4565b61347a9190615112565b86613485919061530e565b61348f91906152b4565b6134999190615112565b846134a4919061530e565b905060006134bb8460800151838660200151613761565b836134c6919061530e565b90508f600101546001826134da919061530e565b6134e49190615112565b9050808460400151889a509a509a50505050505050505096509650969350505050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016135429190614783565b60206040518083038186803b15801561355a57600080fd5b505afa15801561356e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135929190614019565b9050919050565b600081836135a791906152b4565b905092915050565b60008083856135be91906150bc565b905060008114156135d357600091505061375a565b60008082905060006002866135e891906152b4565b905060005b61010081101561371e57600083905060028a61360991906152b4565b848261361591906152b4565b61361f9190615112565b905060028961362e91906152b4565b848261363a91906152b4565b6136449190615112565b905083945060008460028361365991906152b4565b6064898761366791906152b4565b6136719190615112565b61367b91906150bc565b61368591906152b4565b90506000826001600261369891906150bc565b6136a291906152b4565b6064876064886136b2919061530e565b6136bc91906152b4565b6136c69190615112565b6136d091906150bc565b905080826136de9190615112565b95506136f387876138f490919063ffffffff16565b1561370857859850505050505050505061375a565b5050508080613716906154b4565b9150506135ed565b506040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161375190614b9e565b60405180910390fd5b9392505050565b60008060028461377191906152b4565b838461377d91906152b4565b6137879190615112565b90506000849050600060028761379d91906152b4565b90506002816137ac91906152b4565b606486856137ba91906152b4565b6137c491906152b4565b6137ce9190615112565b92506000816064876137e091906152b4565b6137ea9190615112565b836137f591906150bc565b905060008087905060005b61010081101561389b57819250600087838461381c91906152b4565b61382691906150bc565b905060008a8660028661383991906152b4565b61384391906150bc565b61384d919061530e565b9050808261385b9190615112565b935061387085856138f490919063ffffffff16565b15613886578399505050505050505050506138d7565b50508080613893906154b4565b915050613800565b506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138ce90614b7e565b60405180910390fd5b9392505050565b60006002826138ed9190615112565b9050919050565b60006001613902848461390c565b1115905092915050565b600081831115613929578183613922919061530e565b9050613938565b8282613935919061530e565b90505b92915050565b6040518060400160405280600290602082028036833780820191505090505090565b600061397361396e84614f7e565b614f59565b9050808285602086028201111561398957600080fd5b60005b858110156139b9578161399f8882613bff565b84526020840193506020830192505060018101905061398c565b5050509392505050565b60006139d66139d184614fa4565b614f59565b9050828152602081018484840111156139ee57600080fd5b6139f9848285615441565b509392505050565b6000613a14613a0f84614fa4565b614f59565b905082815260208101848484011115613a2c57600080fd5b613a37848285615450565b509392505050565b600081359050613a4e816158ad565b92915050565b60008083601f840112613a6657600080fd5b8235905067ffffffffffffffff811115613a7f57600080fd5b602083019150836020820283011115613a9757600080fd5b9250929050565b600081905082602060020282011115613ab657600080fd5b92915050565b600082601f830112613acd57600080fd5b6002613ada848285613960565b91505092915050565b60008083601f840112613af557600080fd5b8235905067ffffffffffffffff811115613b0e57600080fd5b602083019150836020820283011115613b2657600080fd5b9250929050565b600081359050613b3c816158c4565b92915050565b600081519050613b51816158c4565b92915050565b600081359050613b66816158db565b92915050565b600081359050613b7b816158f2565b92915050565b600081359050613b9081615909565b92915050565b600082601f830112613ba757600080fd5b8135613bb78482602086016139c3565b91505092915050565b600082601f830112613bd157600080fd5b8151613be1848260208601613a01565b91505092915050565b600081359050613bf981615920565b92915050565b600081519050613c0e81615920565b92915050565b600081359050613c2381615937565b92915050565b600081519050613c3881615937565b92915050565b600060208284031215613c5057600080fd5b6000613c5e84828501613a3f565b91505092915050565b60008060008060008060c08789031215613c8057600080fd5b6000613c8e89828a01613a3f565b9650506020613c9f89828a01613bea565b9550506040613cb089828a01613bea565b9450506060613cc189828a01613c14565b9350506080613cd289828a01613b57565b92505060a0613ce389828a01613b57565b9150509295509295509295565b60008060208385031215613d0357600080fd5b600083013567ffffffffffffffff811115613d1d57600080fd5b613d2985828601613a54565b92509250509250929050565b600080600060808486031215613d4a57600080fd5b6000613d5886828701613a9e565b9350506040613d6986828701613bea565b9250506060613d7a86828701613bea565b9150509250925092565b600060408284031215613d9657600080fd5b6000613da484828501613abc565b91505092915050565b600080600060408486031215613dc257600080fd5b600084013567ffffffffffffffff811115613ddc57600080fd5b613de886828701613ae3565b93509350506020613dfb86828701613b2d565b9150509250925092565b600060208284031215613e1757600080fd5b6000613e2584828501613b42565b91505092915050565b600080600080600080600080610100898b031215613e4b57600080fd5b6000613e598b828c01613b6c565b9850506020613e6a8b828c01613b6c565b975050604089013567ffffffffffffffff811115613e8757600080fd5b613e938b828c01613b96565b965050606089013567ffffffffffffffff811115613eb057600080fd5b613ebc8b828c01613b96565b9550506080613ecd8b828c01613bea565b94505060a0613ede8b828c01613bea565b93505060c0613eef8b828c01613bea565b92505060e0613f008b828c01613b81565b9150509295985092959890939650565b60008060408385031215613f2357600080fd5b6000613f3185828601613b6c565b9250506020613f4285828601613bea565b9150509250929050565b60008060008060808587031215613f6257600080fd5b6000613f7087828801613b6c565b9450506020613f8187828801613bea565b9350506040613f9287828801613bea565b9250506060613fa387828801613bea565b91505092959194509250565b600060208284031215613fc157600080fd5b600082015167ffffffffffffffff811115613fdb57600080fd5b613fe784828501613bc0565b91505092915050565b60006020828403121561400257600080fd5b600061401084828501613bea565b91505092915050565b60006020828403121561402b57600080fd5b600061403984828501613bff565b91505092915050565b60008060006080848603121561405757600080fd5b600061406586828701613bea565b935050602061407686828701613a9e565b925050606061408786828701613bea565b9150509250925092565b600080604083850312156140a457600080fd5b60006140b285828601613bea565b92505060206140c385828601613b6c565b9150509250929050565b600080600080608085870312156140e357600080fd5b60006140f187828801613bea565b945050602061410287828801613b6c565b935050604061411387828801613bea565b925050606061412487828801613bea565b91505092959194509250565b6000806040838503121561414357600080fd5b600061415185828601613bea565b925050602061416285828601613bea565b9150509250929050565b60006020828403121561417e57600080fd5b600061418c84828501613c29565b91505092915050565b60006141a183836143c5565b905092915050565b60006141b583836146e2565b60408301905092915050565b60006141cd838361471f565b60208301905092915050565b6141e281615376565b82525050565b60006141f382614ff9565b6141fd8185615057565b93508360208202850161420f85614fd5565b8060005b8581101561424b578484038952815161422c8582614195565b945061423783615030565b925060208a01995050600181019050614213565b50829750879550505050505092915050565b61426681615004565b6142708184615068565b925061427b82614fe5565b8060005b838110156142ac57815161429387826141a9565b965061429e8361503d565b92505060018101905061427f565b505050505050565b6142c060408383615441565b5050565b6142cd8161500f565b6142d78184615073565b92506142e282614fef565b8060005b838110156143135781516142fa87826141c1565b96506143058361504a565b9250506001810190506142e6565b505050505050565b6000614327838561507e565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561435657600080fd5b602083029250614367838584615441565b82840190509392505050565b61437c81615388565b82525050565b61438b81615388565b82525050565b61439a81615394565b82525050565b60006143ac83856150a0565b93506143b9838584615441565b82840190509392505050565b60006143d08261501a565b6143da818561508f565b93506143ea818560208601615450565b6143f38161558a565b840191505092915050565b614407816153f9565b82525050565b614416816153f9565b82525050565b6144258161541d565b82525050565b6144348161541d565b82525050565b600061444582615025565b61444f81856150ab565b935061445f818560208601615450565b6144688161558a565b840191505092915050565b60006144806026836150ab565b915061448b826155a8565b604082019050919050565b60006144a36010836150ab565b91506144ae826155f7565b602082019050919050565b60006144c66018836150ab565b91506144d182615620565b602082019050919050565b60006144e96019836150ab565b91506144f482615649565b602082019050919050565b600061450c6012836150ab565b915061451782615672565b602082019050919050565b600061452f600e836150ab565b915061453a8261569b565b602082019050919050565b60006145526016836150ab565b915061455d826156c4565b602082019050919050565b60006145756012836150ab565b9150614580826156ed565b602082019050919050565b6000614598602e836150ab565b91506145a382615716565b604082019050919050565b60006145bb6020836150ab565b91506145c682615765565b602082019050919050565b60006145de6010836150ab565b91506145e98261578e565b602082019050919050565b60006146016012836150ab565b915061460c826157b7565b602082019050919050565b60006146246014836150ab565b915061462f826157e0565b602082019050919050565b6000614647601e836150ab565b915061465282615809565b602082019050919050565b600061466a6013836150ab565b915061467582615832565b602082019050919050565b600061468d601f836150ab565b91506146988261585b565b602082019050919050565b60006146b0601c836150ab565b91506146bb82615884565b602082019050919050565b8082525050565b8082525050565b8082525050565b8082525050565b6040820160008201516146f8600085018261440d565b50602082015161470b602085018261474c565b50505050565b8082525050565b8082525050565b614728816153e2565b82525050565b614737816153e2565b82525050565b614746816153e2565b82525050565b614755816153e2565b82525050565b614764816153ec565b82525050565b60006147778284866143a0565b91508190509392505050565b600060208201905061479860008301846141d9565b92915050565b60006040820190506147b360008301856141d9565b6147c060208301846141d9565b9392505050565b600060e0820190506147dc600083018a6141d9565b6147e960208301896141d9565b6147f6604083018861472e565b614803606083018761472e565b614810608083018661475b565b61481d60a0830185614391565b61482a60c0830184614391565b98975050505050505050565b6000602082019050818103600083015261485081846141e8565b905092915050565b60006101408201905061486e600083018961425d565b61487b60808301886142b4565b61488860c083018761473d565b61489560e08301866146cd565b6148a36101008301856146db565b6148b161012083018461442b565b979650505050505050565b6000610100820190506148d2600083018961425d565b81810360808301526148e581878961431b565b90506148f460a0830186614382565b61490160c08301856146cd565b61490e60e083018461442b565b979650505050505050565b600060408201905061492e60008301846142c4565b92915050565b60006020820190506149496000830184614373565b92915050565b600060208201905061496460008301846143fe565b92915050565b600060208201905061497f600083018461441c565b92915050565b6000602082019050818103600083015261499f818461443a565b905092915050565b600060408201905081810360008301526149c1818561443a565b905081810360208301526149d5818461443a565b90509392505050565b600060208201905081810360008301526149f781614473565b9050919050565b60006020820190508181036000830152614a1781614496565b9050919050565b60006020820190508181036000830152614a37816144b9565b9050919050565b60006020820190508181036000830152614a57816144dc565b9050919050565b60006020820190508181036000830152614a77816144ff565b9050919050565b60006020820190508181036000830152614a9781614522565b9050919050565b60006020820190508181036000830152614ab781614545565b9050919050565b60006020820190508181036000830152614ad781614568565b9050919050565b60006020820190508181036000830152614af78161458b565b9050919050565b60006020820190508181036000830152614b17816145ae565b9050919050565b60006020820190508181036000830152614b37816145d1565b9050919050565b60006020820190508181036000830152614b57816145f4565b9050919050565b60006020820190508181036000830152614b7781614617565b9050919050565b60006020820190508181036000830152614b978161463a565b9050919050565b60006020820190508181036000830152614bb78161465d565b9050919050565b60006020820190508181036000830152614bd781614680565b9050919050565b60006020820190508181036000830152614bf7816146a3565b9050919050565b6000602082019050614c1360008301846146c6565b92915050565b6000606082019050614c2e60008301866146c6565b614c3b602083018561473d565b614c48604083018461473d565b949350505050565b6000604082019050614c6560008301856146d4565b614c72602083018461473d565b9392505050565b6000602082019050614c8e6000830184614711565b92915050565b6000608082019050614ca96000830187614718565b614cb66020830186614718565b614cc360408301856146cd565b614cd0606083018461442b565b95945050505050565b600060a082019050614cee6000830188614718565b614cfb6020830187614718565b614d08604083018661473d565b614d1560608301856146cd565b614d2260808301846146db565b9695505050505050565b600060c082019050614d416000830189614718565b614d4e6020830188614718565b614d5b604083018761473d565b614d68606083018661473d565b614d7560808301856146cd565b614d8260a08301846146db565b979650505050505050565b6000602082019050614da2600083018461472e565b92915050565b600061010082019050614dbe600083018761473d565b614dcb602083018661425d565b614dd860a08301856142b4565b614de560e083018461442b565b95945050505050565b600060c082019050614e03600083018661473d565b614e10602083018561425d565b614e1d60a083018461442b565b949350505050565b600060e082019050614e3a600083018a61473d565b614e476020830189614718565b614e546040830188614718565b614e61606083018761473d565b614e6e60808301866146cd565b614e7b60a08301856146db565b614e8860c083018461442b565b98975050505050505050565b6000604082019050614ea9600083018561472e565b614eb6602083018461472e565b9392505050565b6000608082019050614ed2600083018761472e565b614edf602083018661472e565b614eec604083018561472e565b614ef9606083018461472e565b95945050505050565b60008083356001602003843603038112614f1b57600080fd5b80840192508235915067ffffffffffffffff821115614f3957600080fd5b602083019250600182023603831315614f5157600080fd5b509250929050565b6000614f63614f74565b9050614f6f8282615483565b919050565b6000604051905090565b600067ffffffffffffffff821115614f9957614f9861555b565b5b602082029050919050565b600067ffffffffffffffff821115614fbf57614fbe61555b565b5b614fc88261558a565b9050602081019050919050565b6000819050602082019050919050565b6000819050919050565b6000819050919050565b600081519050919050565b600060029050919050565b600060029050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006150c7826153e2565b91506150d2836153e2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115615107576151066154fd565b5b828201905092915050565b600061511d826153e2565b9150615128836153e2565b9250826151385761513761552c565b5b828204905092915050565b6000808291508390505b600185111561518d57808604811115615169576151686154fd565b5b60018516156151785780820291505b80810290506151868561559b565b945061514d565b94509492505050565b60006151a1826153e2565b91506151ac836153ec565b92506151d97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846151e1565b905092915050565b6000826151f157600190506152ad565b816151ff57600090506152ad565b8160018114615215576002811461521f5761524e565b60019150506152ad565b60ff841115615231576152306154fd565b5b8360020a915084821115615248576152476154fd565b5b506152ad565b5060208310610133831016604e8410600b84101617156152835782820a90508381111561527e5761527d6154fd565b5b6152ad565b6152908484846001615143565b925090508184048111156152a7576152a66154fd565b5b81810290505b9392505050565b60006152bf826153e2565b91506152ca836153e2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615303576153026154fd565b5b828202905092915050565b6000615319826153e2565b9150615324836153e2565b925082821015615337576153366154fd565b5b828203905092915050565b600061534d826153ec565b9150615358836153ec565b92508282101561536b5761536a6154fd565b5b828203905092915050565b6000615381826153c2565b9050919050565b60008115159050919050565b6000819050919050565b60006153a982615376565b9050919050565b60006153bb82615376565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006154048261540b565b9050919050565b6000615416826153c2565b9050919050565b60006154288261542f565b9050919050565b600061543a826153c2565b9050919050565b82818337600083830152505050565b60005b8381101561546e578082015181840152602081019050615453565b8381111561547d576000848401525b50505050565b61548c8261558a565b810181811067ffffffffffffffff821117156154ab576154aa61555b565b5b80604052505050565b60006154bf826153e2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156154f2576154f16154fd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4455504c49434154455f544f4b454e5300000000000000000000000000000000600082015250565b7f414d4f554e545f455843454544535f415641494c41424c450000000000000000600082015250565b7f5f61646d696e4665652065786365656473206d6178696d756d00000000000000600082015250565b7f544f4b454e305f5a45524f414444524553530000000000000000000000000000600082015250565b7f4241445f544f4b454e5f46524f4d000000000000000000000000000000000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f5f612065786365656473206d6178696d756d0000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f446561646c696e65206e6f74206d657400000000000000000000000000000000600082015250565b7f544f4b454e315f5a45524f414444524553530000000000000000000000000000600082015250565b7f5f6665652065786365656473206d6178696d756d000000000000000000000000600082015250565b7f417070726f78696d6174696f6e20646964206e6f7420636f6e76657267650000600082015250565b7f4420646f6573206e6f7420636f6e766572676500000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f636f756c64206e6f7420696e6974206c70546f6b656e20636c6f6e6500000000600082015250565b6158b681615376565b81146158c157600080fd5b50565b6158cd81615388565b81146158d857600080fd5b50565b6158e481615394565b81146158ef57600080fd5b50565b6158fb8161539e565b811461590657600080fd5b50565b615912816153b0565b811461591d57600080fd5b50565b615929816153e2565b811461593457600080fd5b50565b615940816153ec565b811461594b57600080fd5b5056fea26469706673582212207bf461775c2cb6ac28fa4beba05cd1edf3499ec2126f768fbbeea85a249a728464736f6c63430008040033",
  "libraries": {
    "SwapUtils": "0xda73ae74a09c70d27f76E15ad8F33D1D18589D87"
  },
  "devdoc": {
    "details": "TenderSwap is a light-weight StableSwap implementation for two assets. See the Curve StableSwap paper for more details (https://curve.fi/files/stableswap-paper.pdf). that trade 1:1 with eachother (e.g. USD stablecoins or tenderToken derivatives vs their underlying assets). It supports Elastic Supply ERC20 tokens, which are tokens of which the balances can change as the total supply of the token 'rebases'.",
    "kind": "dev",
    "methods": {
      "addLiquidity(uint256[2],uint256,uint256)": {
        "params": {
          "_amounts": "the amounts of each token to add, in their native precision          according to the cardinality of the pool [token0, token1]",
          "_deadline": "latest timestamp to accept this transaction",
          "_minToMint": "the minimum LP tokens adding this amount of liquidity should mint, otherwise revert. Handy for front-running mitigation"
        },
        "returns": {
          "_0": "amount of LP token user minted and received"
        }
      },
      "calculateRemoveLiquidity(uint256)": {
        "params": {
          "amount": "the amount of LP tokens that would be burned on withdrawal"
        },
        "returns": {
          "_0": "array of token balances that the user will receive"
        }
      },
      "calculateRemoveLiquidityOneToken(uint256,address)": {
        "params": {
          "tokenAmount": "the amount of LP token to burn",
          "tokenReceive": "the token to receive"
        },
        "returns": {
          "_0": "calculated amount of underlying token to be received. available to withdraw"
        }
      },
      "calculateSwap(address,uint256)": {
        "params": {
          "_dx": "the amount of tokens the user wants to sell. If the token charges a fee on transfers, use the amount that gets transferred after the fee.",
          "_tokenFrom": "the token the user wants to sell"
        },
        "returns": {
          "_0": "amount of tokens the user will receive"
        }
      },
      "calculateTokenAmount(uint256[],bool)": {
        "details": "This shouldn't be used outside frontends for user estimates.",
        "params": {
          "amounts": "an array of token amounts to deposit or withdrawal, corresponding to pool cardinality of [token0, token1]. The amount should be in each pooled token's native precision.",
          "deposit": "whether this is a deposit or a withdrawal"
        },
        "returns": {
          "_0": "token amount the user will receive"
        }
      },
      "getA()": {
        "details": "See the StableSwap paper for details",
        "returns": {
          "_0": "the amplifaction coefficient"
        }
      },
      "getAPrecise()": {
        "details": "See the StableSwap paper for details",
        "returns": {
          "_0": "A parameter in its raw precision form"
        }
      },
      "getToken0()": {
        "details": "EVM return type is IERC20",
        "returns": {
          "_0": "contract address"
        }
      },
      "getToken0Balance()": {
        "returns": {
          "_0": "current balance of the pooled tendertoken"
        }
      },
      "getToken1()": {
        "details": "EVM return type is IERC20",
        "returns": {
          "_0": "contract address"
        }
      },
      "getToken1Balance()": {
        "returns": {
          "_0": "current balance of the pooled underlying token"
        }
      },
      "getVirtualPrice()": {
        "returns": {
          "_0": "the override price, scaled to the POOL_PRECISION_DECIMALS"
        }
      },
      "initialize(address,address,string,string,uint256,uint256,uint256,address)": {
        "params": {
          "_a": "the amplification coefficient * n * (n - 1). See the StableSwap paper for details",
          "_adminFee": "default adminFee to be initialized with",
          "_fee": "default swap fee to be initialized with",
          "_token0": "First token in the pool",
          "_token1": "Second token in the pool",
          "lpTokenName": "the long-form name of the token to be deployed",
          "lpTokenSymbol": "the short symbol for the token to be deployed",
          "lpTokenTargetAddress": "the address of an existing LiquidityPoolToken contract to use as a target"
        },
        "returns": {
          "_0": "true is successfully initialized"
        }
      },
      "multicall(bytes[])": {
        "details": "The `msg.value` should not be trusted for any method callable from multicall.",
        "params": {
          "_data": "The encoded function data for each of the calls to make to this contract"
        },
        "returns": {
          "results": "The results from each of the calls passed in via data"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rampA(uint256,uint256)": {
        "params": {
          "futureA": "the new A to ramp towards",
          "futureTime": "timestamp when the new A should be reached"
        }
      },
      "removeLiquidity(uint256,uint256[2],uint256)": {
        "details": "Liquidity can always be removed, even when the pool is paused.",
        "params": {
          "amount": "the amount of LP tokens to burn",
          "deadline": "latest timestamp to accept this transaction",
          "minAmounts": "the minimum amounts of each token in the pool        acceptable for this burn. Useful as a front-running mitigation        according to the cardinality of the pool [token0, token1]"
        },
        "returns": {
          "_0": "is the amounts of tokens user received"
        }
      },
      "removeLiquidityImbalance(uint256[2],uint256,uint256)": {
        "params": {
          "_amounts": "how much of each token to withdraw",
          "_deadline": "latest timestamp to accept this transaction",
          "_maxBurnAmount": "the max LP token provider is willing to pay to remove liquidity. Useful as a front-running mitigation."
        },
        "returns": {
          "_0": "amount of LP tokens burned"
        }
      },
      "removeLiquidityOneToken(uint256,address,uint256,uint256)": {
        "params": {
          "_deadline": "latest timestamp to accept this transaction",
          "_minAmount": "the minimum amount to withdraw, otherwise revert",
          "_tokenAmount": "the amount of the token you want to receive",
          "_tokenReceive": "the  token you want to receive"
        },
        "returns": {
          "_0": "amount of chosen token user received"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "The `owner` is always msg.sender and the `spender` is always address(this).",
        "params": {
          "_deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_token": "The address of the token spent",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
          "_value": "The amount that can be spent of token"
        }
      },
      "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
        "params": {
          "_deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_token": "The address of the token spent",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
          "_value": "The amount that can be spent of token"
        }
      },
      "setAdminFee(uint256)": {
        "params": {
          "newAdminFee": "new admin fee to be applied on future transactions"
        }
      },
      "setSwapFee(uint256)": {
        "params": {
          "newSwapFee": "new swap fee to be applied on future transactions"
        }
      },
      "swap(address,uint256,uint256,uint256)": {
        "details": "revert is token being sold is not in the pool.",
        "params": {
          "_deadline": "latest timestamp to accept this transaction",
          "_dx": "the amount of tokens the user wants to swap from",
          "_minDy": "the min amount the user would like to receive, or revert",
          "_tokenFrom": "the token the user wants to sell"
        },
        "returns": {
          "_0": "amount of tokens received"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "_newOwner": "address of the new owner"
        }
      }
    },
    "stateVariables": {
      "lpToken": {
        "return": "lpTokenContract Liquidity pool token contract.",
        "returns": {
          "_0": "lpTokenContract Liquidity pool token contract."
        }
      }
    },
    "title": "TenderSwap",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddLiquidity(address,uint256[2],uint256[2],uint256,uint256)": {
        "notice": "AddLiquidity gets emitted when liquidity is added to the pool."
      },
      "NewAdminFee(uint256)": {
        "notice": "NewAdminFee gets emitted when the admin fee is updated."
      },
      "NewSwapFee(uint256)": {
        "notice": "NewSwapFee gets emitted when the swap fee is updated."
      },
      "RampA(uint256,uint256,uint256,uint256)": {
        "notice": "RampA gets emitted when A has started ramping up."
      },
      "RemoveLiquidity(address,uint256[2],uint256)": {
        "notice": "RemoveLiquidity gets emitted when liquidity for both tokens  is removed from the pool."
      },
      "RemoveLiquidityImbalance(address,uint256[2],uint256[2],uint256,uint256)": {
        "notice": "RemoveLiquidityImbalance gets emitted when liquidity is removed weighted differently than the pool's current balances. with different weights than that of the pool."
      },
      "RemoveLiquidityOne(address,uint256,uint256,address,uint256)": {
        "notice": "RemoveLiquidityOne gets emitted when single-sided liquidity is removed "
      },
      "StopRampA(uint256,uint256)": {
        "notice": "StopRampA gets emitted when ramping A is stopped manually"
      },
      "Swap(address,address,uint256,uint256)": {
        "notice": "Swap gets emitted when an accounts exchanges tokens."
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidity(uint256[2],uint256,uint256)": {
        "notice": "Add liquidity to the pool with the given amounts of tokens"
      },
      "calculateRemoveLiquidity(uint256)": {
        "notice": "A simple method to calculate amount of each underlying tokens that is returned upon burning given amount of LP tokens"
      },
      "calculateRemoveLiquidityOneToken(uint256,address)": {
        "notice": "Calculate the amount of underlying token available to withdraw when withdrawing via only single token"
      },
      "calculateSwap(address,uint256)": {
        "notice": "Calculate amount of tokens you receive on swap"
      },
      "calculateTokenAmount(uint256[],bool)": {
        "notice": "A simple method to calculate prices from deposits or withdrawals, excluding fees but including slippage. This is helpful as an input into the various \"min\" parameters on calls to fight front-running"
      },
      "getA()": {
        "notice": "Return A, the amplification coefficient * n * (n - 1)"
      },
      "getAPrecise()": {
        "notice": "Return A in its raw precision form"
      },
      "getToken0()": {
        "notice": "Returns the contract address for token0"
      },
      "getToken0Balance()": {
        "notice": "Return current balance of token0 (tender) in the pool"
      },
      "getToken1()": {
        "notice": "Returns the contract address for token1"
      },
      "getToken1Balance()": {
        "notice": "Return current balance of token1 (underlying) in the pool"
      },
      "getVirtualPrice()": {
        "notice": "Get the override price, to help calculate profit"
      },
      "initialize(address,address,string,string,uint256,uint256,uint256,address)": {
        "notice": "Initializes this Swap contract with the given parameters. This will also clone a LPToken contract that represents users' LP positions. The owner of LPToken will be this contract - which means only this contract is allowed to mint/burn tokens."
      },
      "lpToken()": {
        "notice": "Returns the liquidity pool token contract."
      },
      "multicall(bytes[])": {
        "notice": "Call multiple functions in the current contract and return the data from all of them if they all succeed"
      },
      "rampA(uint256,uint256)": {
        "notice": "Start ramping up or down A parameter towards given futureA and futureTime Checks if the change is too rapid, and commits the new A value only when it falls under the limit range."
      },
      "removeLiquidity(uint256,uint256[2],uint256)": {
        "notice": "Burn LP tokens to remove liquidity from the pool."
      },
      "removeLiquidityImbalance(uint256[2],uint256,uint256)": {
        "notice": "Remove liquidity from the pool, weighted differently than the pool's current balances."
      },
      "removeLiquidityOneToken(uint256,address,uint256,uint256)": {
        "notice": "Remove liquidity from the pool all in one token."
      },
      "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Permits this contract to spend a given token from `msg.sender`"
      },
      "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Permits this contract to spend a given token from `msg.sender`"
      },
      "setAdminFee(uint256)": {
        "notice": "Update the admin fee. Admin fee takes portion of the swap fee."
      },
      "setSwapFee(uint256)": {
        "notice": "Update the swap fee to be applied on swaps"
      },
      "stopRampA()": {
        "notice": "Stop ramping A immediately. Reverts if ramp A is already stopped."
      },
      "swap(address,uint256,uint256,uint256)": {
        "notice": "Swap two tokens using this pool"
      },
      "transferOwnership(address)": {
        "notice": "Changes the owner of the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1267,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 184,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 227,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11998,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "feeParams",
        "offset": 0,
        "slot": "151",
        "type": "t_struct(FeeParams)9123_storage"
      },
      {
        "astId": 12001,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "amplificationParams",
        "offset": 0,
        "slot": "153",
        "type": "t_struct(Amplification)11568_storage"
      },
      {
        "astId": 12004,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "token0",
        "offset": 0,
        "slot": "157",
        "type": "t_struct(PooledToken)9129_storage"
      },
      {
        "astId": 12007,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "token1",
        "offset": 0,
        "slot": "159",
        "type": "t_struct(PooledToken)9129_storage"
      },
      {
        "astId": 12011,
        "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
        "label": "lpToken",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(LiquidityPoolToken)9008"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2712": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidityPoolToken)9008": {
        "encoding": "inplace",
        "label": "contract LiquidityPoolToken",
        "numberOfBytes": "20"
      },
      "t_struct(Amplification)11568_storage": {
        "encoding": "inplace",
        "label": "struct SwapUtils.Amplification",
        "members": [
          {
            "astId": 11561,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "initialA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11563,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "futureA",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11565,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "initialATime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11567,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "futureATime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(FeeParams)9123_storage": {
        "encoding": "inplace",
        "label": "struct SwapUtils.FeeParams",
        "members": [
          {
            "astId": 9120,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "swapFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9122,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "adminFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PooledToken)9129_storage": {
        "encoding": "inplace",
        "label": "struct SwapUtils.PooledToken",
        "members": [
          {
            "astId": 9126,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2712"
          },
          {
            "astId": 9128,
            "contract": "contracts/tenderswap/TenderSwap.sol:TenderSwap",
            "label": "precisionMultiplier",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}