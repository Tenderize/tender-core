{
  "address": "0xc2f96E6e73ae7878e5814093C803c5eDaDfb6d3e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "steak",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderSwap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderFarm",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Registry.TenderizerConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "TenderizerCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "steak",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderSwap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderFarm",
              "type": "address"
            }
          ],
          "internalType": "struct Registry.TenderizerConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "addTenderizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd3dcd2ca2d74d16a3555b553bd91d91ea6a4410d7ffbd83e50bbbf51e0d1a9c",
  "receipt": {
    "to": null,
    "from": "0x7fcfC04cc6Cc89Def9a9F46Fab7784131b12699C",
    "contractAddress": "0xc2f96E6e73ae7878e5814093C803c5eDaDfb6d3e",
    "transactionIndex": 0,
    "gasUsed": "4355358",
    "logsBloom": "0x
    "blockHash": "0xb5f9d4b808a8eec325863a16731f4fa5c8b71c57d6edfddbd1a55ae5ab18a530",
    "transactionHash": "0xdd3dcd2ca2d74d16a3555b553bd91d91ea6a4410d7ffbd83e50bbbf51e0d1a9c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11371026,
        "transactionHash": "0xdd3dcd2ca2d74d16a3555b553bd91d91ea6a4410d7ffbd83e50bbbf51e0d1a9c",
        "address": "0xc2f96E6e73ae7878e5814093C803c5eDaDfb6d3e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007fcfc04cc6cc89def9a9f46fab7784131b12699c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb5f9d4b808a8eec325863a16731f4fa5c8b71c57d6edfddbd1a55ae5ab18a530"
      }
    ],
    "blockNumber": 11371026,
    "cumulativeGasUsed": "76438",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ffb99252a5f70d94c995ad5bcc98e5d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderFarm\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Registry.TenderizerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"TenderizerCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderSwap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderFarm\",\"type\":\"address\"}],\"internalType\":\"struct Registry.TenderizerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addTenderizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTenderizer((string,address,address,address,address,address))\":{\"details\":\"This is not called from a contract/factory but directly from the deployment script.\",\"params\":{\"config\":\"contract addresses of deployment\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Registry for regsitering contracts on Subgraph\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Event emiited is used to register contracts on the subgraph, after deployment from which events can be tracked.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/Registry.sol\":\"Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/helpers/Registry.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Registry for regsitering contracts on Subgraph\\n * @notice Event emiited is used to register contracts on the subgraph,\\n * after deployment from which events can be tracked.\\n */\\ncontract Registry is Ownable {\\n    struct TenderizerConfig {\\n        string name; // Same name to be used while configuring frontend\\n        address steak;\\n        address tenderizer;\\n        address tenderToken;\\n        address tenderSwap;\\n        address tenderFarm;\\n    }\\n\\n    event TenderizerCreated(TenderizerConfig config);\\n\\n    /**\\n     * @param config contract addresses of deployment\\n     * @dev This is not called from a contract/factory but directly from the deployment script.\\n     */\\n    function addTenderizer(TenderizerConfig calldata config) external onlyOwner {\\n        emit TenderizerCreated(config);\\n    }\\n}\\n\",\"keccak256\":\"0xbca8e573125c49296759f563f4da1b01de71b3fb1178bc3c180f873698ab4ac3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107e68061010d6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063c641e9c514610079578063f2fde38b14610095575b600080fd5b6100596100b1565b005b610063610139565b60405161007091906105c2565b60405180910390f35b610093600480360381019061008e9190610435565b610162565b005b6100af60048036038101906100aa919061040c565b610218565b005b6100b9610310565b73ffffffffffffffffffffffffffffffffffffffff166100d7610139565b73ffffffffffffffffffffffffffffffffffffffff161461012d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610124906105fd565b60405180910390fd5b6101376000610318565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61016a610310565b73ffffffffffffffffffffffffffffffffffffffff16610188610139565b73ffffffffffffffffffffffffffffffffffffffff16146101de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d5906105fd565b60405180910390fd5b7fb7ec2c104ae93ca5df46161c30b7c4a04c55d5e64620d6571aefce2bdcf7208f8160405161020d919061061d565b60405180910390a150565b610220610310565b73ffffffffffffffffffffffffffffffffffffffff1661023e610139565b73ffffffffffffffffffffffffffffffffffffffff1614610294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028b906105fd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb906105dd565b60405180910390fd5b61030d81610318565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506103eb81610799565b92915050565b600060c0828403121561040357600080fd5b81905092915050565b60006020828403121561041e57600080fd5b600061042c848285016103dc565b91505092915050565b60006020828403121561044757600080fd5b600082013567ffffffffffffffff81111561046157600080fd5b61046d848285016103f1565b91505092915050565b61047f816106cf565b82525050565b61048e816106cf565b82525050565b60006104a0838561063f565b93506104ad838584610701565b6104b683610710565b840190509392505050565b60006104ce602683610650565b91506104d982610721565b604082019050919050565b60006104f1602083610650565b91506104fc82610770565b602082019050919050565b600060c0830161051a6000840184610678565b858303600087015261052d838284610494565b9250505061053e6020840184610661565b61054b6020860182610476565b506105596040840184610661565b6105666040860182610476565b506105746060840184610661565b6105816060860182610476565b5061058f6080840184610661565b61059c6080860182610476565b506105aa60a0840184610661565b6105b760a0860182610476565b508091505092915050565b60006020820190506105d76000830184610485565b92915050565b600060208201905081810360008301526105f6816104c1565b9050919050565b60006020820190508181036000830152610616816104e4565b9050919050565b600060208201905081810360008301526106378184610507565b905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061067060208401846103dc565b905092915050565b6000808335600160200384360303811261069157600080fd5b83810192508235915060208301925067ffffffffffffffff8211156106b557600080fd5b6001820236038413156106c757600080fd5b509250929050565b60006106da826106e1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6107a2816106cf565b81146107ad57600080fd5b5056fea2646970667358221220119bbda24de33f689f26a02cdf1fcd44a50f96f956ba4ef7b39cc457c963daa064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063715018a6146100515780638da5cb5b1461005b578063c641e9c514610079578063f2fde38b14610095575b600080fd5b6100596100b1565b005b610063610139565b60405161007091906105c2565b60405180910390f35b610093600480360381019061008e9190610435565b610162565b005b6100af60048036038101906100aa919061040c565b610218565b005b6100b9610310565b73ffffffffffffffffffffffffffffffffffffffff166100d7610139565b73ffffffffffffffffffffffffffffffffffffffff161461012d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610124906105fd565b60405180910390fd5b6101376000610318565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61016a610310565b73ffffffffffffffffffffffffffffffffffffffff16610188610139565b73ffffffffffffffffffffffffffffffffffffffff16146101de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101d5906105fd565b60405180910390fd5b7fb7ec2c104ae93ca5df46161c30b7c4a04c55d5e64620d6571aefce2bdcf7208f8160405161020d919061061d565b60405180910390a150565b610220610310565b73ffffffffffffffffffffffffffffffffffffffff1661023e610139565b73ffffffffffffffffffffffffffffffffffffffff1614610294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028b906105fd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fb906105dd565b60405180910390fd5b61030d81610318565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506103eb81610799565b92915050565b600060c0828403121561040357600080fd5b81905092915050565b60006020828403121561041e57600080fd5b600061042c848285016103dc565b91505092915050565b60006020828403121561044757600080fd5b600082013567ffffffffffffffff81111561046157600080fd5b61046d848285016103f1565b91505092915050565b61047f816106cf565b82525050565b61048e816106cf565b82525050565b60006104a0838561063f565b93506104ad838584610701565b6104b683610710565b840190509392505050565b60006104ce602683610650565b91506104d982610721565b604082019050919050565b60006104f1602083610650565b91506104fc82610770565b602082019050919050565b600060c0830161051a6000840184610678565b858303600087015261052d838284610494565b9250505061053e6020840184610661565b61054b6020860182610476565b506105596040840184610661565b6105666040860182610476565b506105746060840184610661565b6105816060860182610476565b5061058f6080840184610661565b61059c6080860182610476565b506105aa60a0840184610661565b6105b760a0860182610476565b508091505092915050565b60006020820190506105d76000830184610485565b92915050565b600060208201905081810360008301526105f6816104c1565b9050919050565b60006020820190508181036000830152610616816104e4565b9050919050565b600060208201905081810360008301526106378184610507565b905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061067060208401846103dc565b905092915050565b6000808335600160200384360303811261069157600080fd5b83810192508235915060208301925067ffffffffffffffff8211156106b557600080fd5b6001820236038413156106c757600080fd5b509250929050565b60006106da826106e1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6107a2816106cf565b81146107ad57600080fd5b5056fea2646970667358221220119bbda24de33f689f26a02cdf1fcd44a50f96f956ba4ef7b39cc457c963daa064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTenderizer((string,address,address,address,address,address))": {
        "details": "This is not called from a contract/factory but directly from the deployment script.",
        "params": {
          "config": "contract addresses of deployment"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Registry for regsitering contracts on Subgraph",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Event emiited is used to register contracts on the subgraph, after deployment from which events can be tracked.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1866,
        "contract": "contracts/helpers/Registry.sol:Registry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}