{
  "address": "0xe28e1BF6D30fce97383b7aD06576EB6a430a1cF4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_stakeToken",
          "type": "address"
        },
        {
          "internalType": "contract ITenderToken",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Farm",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unfarm",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        }
      ],
      "name": "availableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "farm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "farmFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTotalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract ITenderToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        }
      ],
      "name": "stakeOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastCRF",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unfarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27f5c5dd24d46d0476f49380db5feacfb6bc83ed400d5814e16bec4b64dedef0",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0xe28e1BF6D30fce97383b7aD06576EB6a430a1cF4",
    "transactionIndex": 5,
    "gasUsed": "1540303",
    "logsBloom": "0x00000000000000000000200000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000400000000800000000000000000000000000000000400000400000000000000000800000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4a2042c0de368599597affdf440f9b401d66f4e168a5318f6adb15909ca38a8f",
    "transactionHash": "0x27f5c5dd24d46d0476f49380db5feacfb6bc83ed400d5814e16bec4b64dedef0",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 9146731,
        "transactionHash": "0x27f5c5dd24d46d0476f49380db5feacfb6bc83ed400d5814e16bec4b64dedef0",
        "address": "0xe28e1BF6D30fce97383b7aD06576EB6a430a1cF4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x4a2042c0de368599597affdf440f9b401d66f4e168a5318f6adb15909ca38a8f"
      }
    ],
    "blockNumber": 9146731,
    "cumulativeGasUsed": "2251584",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF92fbD1bd56e047c5A7A1f3d4b6A2973288506d1",
    "0x10F249f2CD19F444418145A03B2AB49695EE86d7"
  ],
  "solcInputHash": "b7051145c1b6661ee356a26cc998fc4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakeToken\",\"type\":\"address\"},{\"internalType\":\"contract ITenderToken\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Farm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unfarm\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"}],\"name\":\"availableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"farm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"farmFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTotalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract ITenderToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"stakeOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastCRF\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unfarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addRewards(uint256)\":{\"details\":\"will 'start' a new 'epoch'only callable by owner\",\"params\":{\"_amount\":\"amount of reward tokens to add\"}},\"farm(uint256)\":{\"details\":\"'_amount' needs to be approved for the 'TenderFarm' to transferharvests current rewards before accounting updates are made\",\"params\":{\"_amount\":\"amount of liquidity pool tokens to stake\"}},\"farmFor(address,uint256)\":{\"details\":\"'_amount' needs to be approved for the 'TenderFarm' to transferstaked tokens will belong to the account they are staked forharvests current rewards before accounting updates are made\",\"params\":{\"_amount\":\"amount of liquidity pool tokens to stake\",\"_for\":\"account to stake for\"}},\"harvest()\":{\"details\":\"reverts when trying to harvest multiple times if no new rewards have been addedemits an event with how many reward tokens have been harvested\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unfarm(uint256)\":{\"details\":\"'_amount' needs to be approved for the 'TenderFarm' to transferharvests current rewards before accounting updates are made\",\"params\":{\"_amount\":\"amount of liquidity pool tokens to stake\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addRewards(uint256)\":{\"notice\":\"add new rewards\"},\"farm(uint256)\":{\"notice\":\"stake liquidity pool tokens to receive rewards\"},\"farmFor(address,uint256)\":{\"notice\":\"stake liquidity pool tokens for a specific account so that it receives rewards\"},\"harvest()\":{\"notice\":\"harvest outstanding rewards\"},\"unfarm(uint256)\":{\"notice\":\"unstake liquidity pool tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity/TenderFarm.sol\":\"TenderFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0xec8cf5bb8f12b0e01864c46add9f6ca35628ab25e9ead7ec71c35f4a6dbc485e\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/TenderFarm.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../libs/MathUtils.sol\\\";\\nimport \\\"../token/ITenderToken.sol\\\";\\n\\ncontract TenderFarm is Ownable {\\n    event Farm(address indexed account, uint256 amount);\\n    event Unfarm(address indexed account, uint256 amount);\\n    event Harvest(address indexed account, uint256 amount);\\n    event RewardsAdded(uint256 amount);\\n\\n    IERC20 public token; // LP token\\n    ITenderToken public rewardToken; // tender token\\n\\n    uint256 public totalStake; // total amount of LP tokens staked\\n    uint256 public nextTotalStake;\\n    uint256 public CRF; // cumulative reward factor\\n\\n    struct Stake {\\n        uint256 stake;\\n        uint256 lastCRF;\\n    }\\n\\n    mapping(address => Stake) public stakes;\\n\\n    constructor(IERC20 _stakeToken, ITenderToken _rewardToken) {\\n        token = _stakeToken;\\n        rewardToken = _rewardToken;\\n    }\\n\\n    /**\\n     * @notice stake liquidity pool tokens to receive rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer\\n     * @dev harvests current rewards before accounting updates are made\\n     * @param _amount amount of liquidity pool tokens to stake\\n     */\\n    function farm(uint256 _amount) public {\\n        _farmFor(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice stake liquidity pool tokens for a specific account so that it receives rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer\\n     * @dev staked tokens will belong to the account they are staked for\\n     * @dev harvests current rewards before accounting updates are made\\n     * @param _for account to stake for\\n     * @param _amount amount of liquidity pool tokens to stake\\n     */\\n    function farmFor(address _for, uint256 _amount) public {\\n        _farmFor(_for, _amount);\\n    }\\n\\n    /**\\n     * @notice unstake liquidity pool tokens\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer\\n     * @dev harvests current rewards before accounting updates are made\\n     * @param _amount amount of liquidity pool tokens to stake\\n     */\\n    function unfarm(uint256 _amount) public {\\n        _unfarm(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice harvest outstanding rewards\\n     * @dev reverts when trying to harvest multiple times if no new rewards have been added\\n     * @dev emits an event with how many reward tokens have been harvested\\n     */\\n    function harvest() public {\\n        _harvest(msg.sender);\\n    }\\n\\n    /**\\n     * @notice add new rewards\\n     * @dev will 'start' a new 'epoch'\\n     * @dev only callable by owner\\n     * @param _amount amount of reward tokens to add\\n     */\\n    function addRewards(uint256 _amount) public onlyOwner {\\n        uint256 _nextStake = nextTotalStake;\\n        require(_nextStake > 0, \\\"NO_STAKE\\\");\\n        totalStake = _nextStake;\\n        uint256 shares = rewardToken.tokensToShares(_amount);\\n        CRF += MathUtils.percPoints(shares, _nextStake);\\n        require(rewardToken.transferFrom(msg.sender, address(this), _amount), \\\"TRANSFER_FAILED\\\");\\n        emit RewardsAdded(_amount);\\n    }\\n\\n    function availableRewards(address _for) public view returns (uint256) {\\n        return rewardToken.sharesToTokens(_availableRewardShares(_for));\\n    }\\n\\n    function stakeOf(address _of) public view returns (uint256) {\\n        return _stakeOf(_of);\\n    }\\n\\n    function _farmFor(address _for, uint256 _amount) internal {\\n        _harvest(_for);\\n\\n        stakes[_for].stake += _amount;\\n        nextTotalStake += _amount;\\n\\n        require(token.transferFrom(msg.sender, address(this), _amount), \\\"TRANSFERFROM_FAIL\\\");\\n\\n        emit Farm(_for, _amount);\\n    }\\n\\n    function _unfarm(address _for, uint256 _amount) internal {\\n        Stake storage _stake = stakes[_for];\\n        require(_amount <= _stake.stake, \\\"AMOUNT_EXCEEDS_STAKE\\\");\\n\\n        _harvest(_for);\\n\\n        _stake.stake -= _amount;\\n        nextTotalStake -= _amount;\\n\\n        require(token.transfer(_for, _amount), \\\"TRANSFER_FAIL\\\");\\n        emit Unfarm(_for, _amount);\\n    }\\n\\n    function _harvest(address _for) internal {\\n        Stake storage _stake = stakes[_for];\\n\\n        // Calculate available rewards\\n        uint256 rewards = _availableRewardShares(_for);\\n\\n        // Checkpoint CRF\\n        _stake.lastCRF = CRF;\\n\\n        if (rewards > 0) {\\n            uint256 rewardTokens = rewardToken.sharesToTokens(rewards);\\n            require(rewardToken.transfer(_for, rewardTokens), \\\"TRANSFER_FAIL\\\");\\n            emit Harvest(_for, rewardTokens);\\n        }\\n    }\\n\\n    function _availableRewardShares(address _for) internal view returns (uint256) {\\n        Stake storage _stake = stakes[_for];\\n\\n        if (CRF == 0) return 0;\\n\\n        return MathUtils.percOf(_stake.stake, CRF - _stake.lastCRF);\\n    }\\n\\n    function _stakeOf(address _of) internal view returns (uint256) {\\n        return stakes[_of].stake;\\n    }\\n}\\n\",\"keccak256\":\"0x244d45e982c9d57c322e8acf72bc2c0262c42da33581f664e817b0ad36040fb0\",\"license\":\"GPL-3.0\"},\"contracts/token/ITenderToken.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\ninterface ITenderToken {\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getTotalPooledTokens() external view returns (uint256);\\n\\n    function getTotalShares() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function tokensToShares(uint256 _tokens) external view returns (uint256);\\n\\n    function sharesToTokens(uint256 _shares) external view returns (uint256);\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n\\n    function mint(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function burn(address _account, uint256 _amount) external returns (bool);\\n\\n    function setTotalPooledTokens(uint256 _newTotalPooledTokens) external;\\n}\\n\",\"keccak256\":\"0x6cb71598dfe3a0eae7b07b24edac1c4dddf7af43ca93c31ebe9a26d28fad7415\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c1d38038062001c1d8339818101604052810190620000379190620001a7565b6000620000496200017160201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000278565b600033905090565b6000815190506200018a8162000244565b92915050565b600081519050620001a1816200025e565b92915050565b60008060408385031215620001bb57600080fd5b6000620001cb8582860162000179565b9250506020620001de8582860162000190565b9150509250929050565b6000620001f58262000224565b9050919050565b60006200020982620001e8565b9050919050565b60006200021d82620001e8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200024f81620001fc565b81146200025b57600080fd5b50565b620002698162000210565b81146200027557600080fd5b50565b61199580620002886000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638b0e9f3f11610097578063f2fde38b11610066578063f2fde38b14610262578063f7c618c11461027e578063f854a27f1461029c578063fc0c546a146102cc57610100565b80638b0e9f3f146101ec5780638da5cb5b1461020a5780638ebed61614610228578063beceed391461024657610100565b80634641257d116100d35780634641257d146101a0578063538a85a1146101aa5780635d1cf7b5146101c6578063715018a6146101e257610100565b806304d3b7c41461010557806316934fc4146101235780631c885bae146101545780634262336014610170575b600080fd5b61010d6102ea565b60405161011a919061157d565b60405180910390f35b61013d600480360381019061013891906111db565b6102f0565b60405161014b929190611598565b60405180910390f35b61016e60048036038101906101699190611269565b610314565b005b61018a600480360381019061018591906111db565b610321565b604051610197919061157d565b60405180910390f35b6101a8610333565b005b6101c460048036038101906101bf9190611269565b61033e565b005b6101e060048036038101906101db9190611204565b61034b565b005b6101ea610359565b005b6101f4610493565b604051610201919061157d565b60405180910390f35b610212610499565b60405161021f91906113ec565b60405180910390f35b6102306104c2565b60405161023d919061157d565b60405180910390f35b610260600480360381019061025b9190611269565b6104c8565b005b61027c600480360381019061027791906111db565b610792565b005b61028661093b565b6040516102939190611482565b60405180910390f35b6102b660048036038101906102b191906111db565b610961565b6040516102c3919061157d565b60405180910390f35b6102d4610a1d565b6040516102e19190611467565b60405180910390f35b60045481565b60066020528060005260406000206000915090508060000154908060010154905082565b61031e3382610a43565b50565b600061032c82610c4b565b9050919050565b61033c33610c97565b565b6103483382610eed565b50565b6103558282610eed565b5050565b6103616110aa565b73ffffffffffffffffffffffffffffffffffffffff1661037f610499565b73ffffffffffffffffffffffffffffffffffffffff16146103d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cc9061153d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60055481565b6104d06110aa565b73ffffffffffffffffffffffffffffffffffffffff166104ee610499565b73ffffffffffffffffffffffffffffffffffffffff1614610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b9061153d565b60405180910390fd5b600060045490506000811161058e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610585906114bd565b60405180910390fd5b806003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3044ac7846040518263ffffffff1660e01b81526004016105f2919061157d565b60206040518083038186803b15801561060a57600080fd5b505afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106429190611292565b905061064e81836110b2565b6005600082825461065f91906115d2565b92505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016106c593929190611407565b602060405180830381600087803b1580156106df57600080fd5b505af11580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107179190611240565b610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074d9061151d565b60405180910390fd5b7ff8fad42e780bfa5459be3fe691e8ba1aec70342250112139c5771c3fd155f31283604051610785919061157d565b60405180910390a1505050565b61079a6110aa565b73ffffffffffffffffffffffffffffffffffffffff166107b8610499565b73ffffffffffffffffffffffffffffffffffffffff161461080e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108059061153d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561087e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108759061149d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327def4fd6109aa846110dc565b6040518263ffffffff1660e01b81526004016109c6919061157d565b60206040518083038186803b1580156109de57600080fd5b505afa1580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a169190611292565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154821115610acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac49061155d565b60405180910390fd5b610ad683610c97565b81816000016000828254610aea91906116b3565b925050819055508160046000828254610b0391906116b3565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610b6792919061143e565b602060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190611240565b610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef906114fd565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f20257c99a1831ee05678eabb34e57a99bf067b4a5e2cb2d5559ea0a23f65518d83604051610c3e919061157d565b60405180910390a2505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610ce5836110dc565b905060055482600101819055506000811115610ee8576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327def4fd836040518263ffffffff1660e01b8152600401610d58919061157d565b60206040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da89190611292565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401610e0792919061143e565b602060405180830381600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190611240565b610e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8f906114fd565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba82604051610ede919061157d565b60405180910390a2505b505050565b610ef682610c97565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610f4891906115d2565b925050819055508060046000828254610f6191906115d2565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610fc793929190611407565b602060405180830381600087803b158015610fe157600080fd5b505af1158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110199190611240565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f906114dd565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f1b359373bd6268b2ceac132cf22673d4f046a13deb2e7980f81baabf1b4d72f78260405161109e919061157d565b60405180910390a25050565b600033905090565b600081683635c9adc5dea00000846110ca9190611659565b6110d49190611628565b905092915050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006005541415611135576000915050611158565b6111548160000154826001015460055461114f91906116b3565b61115d565b9150505b919050565b6000683635c9adc5dea0000082846111759190611659565b61117f9190611628565b905092915050565b6000813590506111968161191a565b92915050565b6000815190506111ab81611931565b92915050565b6000813590506111c081611948565b92915050565b6000815190506111d581611948565b92915050565b6000602082840312156111ed57600080fd5b60006111fb84828501611187565b91505092915050565b6000806040838503121561121757600080fd5b600061122585828601611187565b9250506020611236858286016111b1565b9150509250929050565b60006020828403121561125257600080fd5b60006112608482850161119c565b91505092915050565b60006020828403121561127b57600080fd5b6000611289848285016111b1565b91505092915050565b6000602082840312156112a457600080fd5b60006112b2848285016111c6565b91505092915050565b6112c4816116e7565b82525050565b6112d38161172f565b82525050565b6112e281611753565b82525050565b60006112f56026836115c1565b9150611300826117d5565b604082019050919050565b60006113186008836115c1565b915061132382611824565b602082019050919050565b600061133b6011836115c1565b91506113468261184d565b602082019050919050565b600061135e600d836115c1565b915061136982611876565b602082019050919050565b6000611381600f836115c1565b915061138c8261189f565b602082019050919050565b60006113a46020836115c1565b91506113af826118c8565b602082019050919050565b60006113c76014836115c1565b91506113d2826118f1565b602082019050919050565b6113e681611725565b82525050565b600060208201905061140160008301846112bb565b92915050565b600060608201905061141c60008301866112bb565b61142960208301856112bb565b61143660408301846113dd565b949350505050565b600060408201905061145360008301856112bb565b61146060208301846113dd565b9392505050565b600060208201905061147c60008301846112ca565b92915050565b600060208201905061149760008301846112d9565b92915050565b600060208201905081810360008301526114b6816112e8565b9050919050565b600060208201905081810360008301526114d68161130b565b9050919050565b600060208201905081810360008301526114f68161132e565b9050919050565b6000602082019050818103600083015261151681611351565b9050919050565b6000602082019050818103600083015261153681611374565b9050919050565b6000602082019050818103600083015261155681611397565b9050919050565b60006020820190508181036000830152611576816113ba565b9050919050565b600060208201905061159260008301846113dd565b92915050565b60006040820190506115ad60008301856113dd565b6115ba60208301846113dd565b9392505050565b600082825260208201905092915050565b60006115dd82611725565b91506115e883611725565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561161d5761161c611777565b5b828201905092915050565b600061163382611725565b915061163e83611725565b92508261164e5761164d6117a6565b5b828204905092915050565b600061166482611725565b915061166f83611725565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116a8576116a7611777565b5b828202905092915050565b60006116be82611725565b91506116c983611725565b9250828210156116dc576116db611777565b5b828203905092915050565b60006116f282611705565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061173a82611741565b9050919050565b600061174c82611705565b9050919050565b600061175e82611765565b9050919050565b600061177082611705565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e4f5f5354414b45000000000000000000000000000000000000000000000000600082015250565b7f5452414e5346455246524f4d5f4641494c000000000000000000000000000000600082015250565b7f5452414e534645525f4641494c00000000000000000000000000000000000000600082015250565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f414d4f554e545f455843454544535f5354414b45000000000000000000000000600082015250565b611923816116e7565b811461192e57600080fd5b50565b61193a816116f9565b811461194557600080fd5b50565b61195181611725565b811461195c57600080fd5b5056fea2646970667358221220f318bed30b8e024d407b1eb62502e35160a2260057c0787bb98233f064ac7bcc64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638b0e9f3f11610097578063f2fde38b11610066578063f2fde38b14610262578063f7c618c11461027e578063f854a27f1461029c578063fc0c546a146102cc57610100565b80638b0e9f3f146101ec5780638da5cb5b1461020a5780638ebed61614610228578063beceed391461024657610100565b80634641257d116100d35780634641257d146101a0578063538a85a1146101aa5780635d1cf7b5146101c6578063715018a6146101e257610100565b806304d3b7c41461010557806316934fc4146101235780631c885bae146101545780634262336014610170575b600080fd5b61010d6102ea565b60405161011a919061157d565b60405180910390f35b61013d600480360381019061013891906111db565b6102f0565b60405161014b929190611598565b60405180910390f35b61016e60048036038101906101699190611269565b610314565b005b61018a600480360381019061018591906111db565b610321565b604051610197919061157d565b60405180910390f35b6101a8610333565b005b6101c460048036038101906101bf9190611269565b61033e565b005b6101e060048036038101906101db9190611204565b61034b565b005b6101ea610359565b005b6101f4610493565b604051610201919061157d565b60405180910390f35b610212610499565b60405161021f91906113ec565b60405180910390f35b6102306104c2565b60405161023d919061157d565b60405180910390f35b610260600480360381019061025b9190611269565b6104c8565b005b61027c600480360381019061027791906111db565b610792565b005b61028661093b565b6040516102939190611482565b60405180910390f35b6102b660048036038101906102b191906111db565b610961565b6040516102c3919061157d565b60405180910390f35b6102d4610a1d565b6040516102e19190611467565b60405180910390f35b60045481565b60066020528060005260406000206000915090508060000154908060010154905082565b61031e3382610a43565b50565b600061032c82610c4b565b9050919050565b61033c33610c97565b565b6103483382610eed565b50565b6103558282610eed565b5050565b6103616110aa565b73ffffffffffffffffffffffffffffffffffffffff1661037f610499565b73ffffffffffffffffffffffffffffffffffffffff16146103d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cc9061153d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60035481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60055481565b6104d06110aa565b73ffffffffffffffffffffffffffffffffffffffff166104ee610499565b73ffffffffffffffffffffffffffffffffffffffff1614610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b9061153d565b60405180910390fd5b600060045490506000811161058e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610585906114bd565b60405180910390fd5b806003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3044ac7846040518263ffffffff1660e01b81526004016105f2919061157d565b60206040518083038186803b15801561060a57600080fd5b505afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106429190611292565b905061064e81836110b2565b6005600082825461065f91906115d2565b92505081905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016106c593929190611407565b602060405180830381600087803b1580156106df57600080fd5b505af11580156106f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107179190611240565b610756576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074d9061151d565b60405180910390fd5b7ff8fad42e780bfa5459be3fe691e8ba1aec70342250112139c5771c3fd155f31283604051610785919061157d565b60405180910390a1505050565b61079a6110aa565b73ffffffffffffffffffffffffffffffffffffffff166107b8610499565b73ffffffffffffffffffffffffffffffffffffffff161461080e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108059061153d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561087e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108759061149d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327def4fd6109aa846110dc565b6040518263ffffffff1660e01b81526004016109c6919061157d565b60206040518083038186803b1580156109de57600080fd5b505afa1580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a169190611292565b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000154821115610acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac49061155d565b60405180910390fd5b610ad683610c97565b81816000016000828254610aea91906116b3565b925050819055508160046000828254610b0391906116b3565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401610b6792919061143e565b602060405180830381600087803b158015610b8157600080fd5b505af1158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190611240565b610bf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bef906114fd565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f20257c99a1831ee05678eabb34e57a99bf067b4a5e2cb2d5559ea0a23f65518d83604051610c3e919061157d565b60405180910390a2505050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610ce5836110dc565b905060055482600101819055506000811115610ee8576000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327def4fd836040518263ffffffff1660e01b8152600401610d58919061157d565b60206040518083038186803b158015610d7057600080fd5b505afa158015610d84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da89190611292565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85836040518363ffffffff1660e01b8152600401610e0792919061143e565b602060405180830381600087803b158015610e2157600080fd5b505af1158015610e35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e599190611240565b610e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8f906114fd565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff167fc9695243a805adb74c91f28311176c65b417e842d5699893cef56d18bfa48cba82604051610ede919061157d565b60405180910390a2505b505050565b610ef682610c97565b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610f4891906115d2565b925050819055508060046000828254610f6191906115d2565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610fc793929190611407565b602060405180830381600087803b158015610fe157600080fd5b505af1158015610ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110199190611240565b611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f906114dd565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f1b359373bd6268b2ceac132cf22673d4f046a13deb2e7980f81baabf1b4d72f78260405161109e919061157d565b60405180910390a25050565b600033905090565b600081683635c9adc5dea00000846110ca9190611659565b6110d49190611628565b905092915050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006005541415611135576000915050611158565b6111548160000154826001015460055461114f91906116b3565b61115d565b9150505b919050565b6000683635c9adc5dea0000082846111759190611659565b61117f9190611628565b905092915050565b6000813590506111968161191a565b92915050565b6000815190506111ab81611931565b92915050565b6000813590506111c081611948565b92915050565b6000815190506111d581611948565b92915050565b6000602082840312156111ed57600080fd5b60006111fb84828501611187565b91505092915050565b6000806040838503121561121757600080fd5b600061122585828601611187565b9250506020611236858286016111b1565b9150509250929050565b60006020828403121561125257600080fd5b60006112608482850161119c565b91505092915050565b60006020828403121561127b57600080fd5b6000611289848285016111b1565b91505092915050565b6000602082840312156112a457600080fd5b60006112b2848285016111c6565b91505092915050565b6112c4816116e7565b82525050565b6112d38161172f565b82525050565b6112e281611753565b82525050565b60006112f56026836115c1565b9150611300826117d5565b604082019050919050565b60006113186008836115c1565b915061132382611824565b602082019050919050565b600061133b6011836115c1565b91506113468261184d565b602082019050919050565b600061135e600d836115c1565b915061136982611876565b602082019050919050565b6000611381600f836115c1565b915061138c8261189f565b602082019050919050565b60006113a46020836115c1565b91506113af826118c8565b602082019050919050565b60006113c76014836115c1565b91506113d2826118f1565b602082019050919050565b6113e681611725565b82525050565b600060208201905061140160008301846112bb565b92915050565b600060608201905061141c60008301866112bb565b61142960208301856112bb565b61143660408301846113dd565b949350505050565b600060408201905061145360008301856112bb565b61146060208301846113dd565b9392505050565b600060208201905061147c60008301846112ca565b92915050565b600060208201905061149760008301846112d9565b92915050565b600060208201905081810360008301526114b6816112e8565b9050919050565b600060208201905081810360008301526114d68161130b565b9050919050565b600060208201905081810360008301526114f68161132e565b9050919050565b6000602082019050818103600083015261151681611351565b9050919050565b6000602082019050818103600083015261153681611374565b9050919050565b6000602082019050818103600083015261155681611397565b9050919050565b60006020820190508181036000830152611576816113ba565b9050919050565b600060208201905061159260008301846113dd565b92915050565b60006040820190506115ad60008301856113dd565b6115ba60208301846113dd565b9392505050565b600082825260208201905092915050565b60006115dd82611725565b91506115e883611725565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561161d5761161c611777565b5b828201905092915050565b600061163382611725565b915061163e83611725565b92508261164e5761164d6117a6565b5b828204905092915050565b600061166482611725565b915061166f83611725565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116a8576116a7611777565b5b828202905092915050565b60006116be82611725565b91506116c983611725565b9250828210156116dc576116db611777565b5b828203905092915050565b60006116f282611705565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061173a82611741565b9050919050565b600061174c82611705565b9050919050565b600061175e82611765565b9050919050565b600061177082611705565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4e4f5f5354414b45000000000000000000000000000000000000000000000000600082015250565b7f5452414e5346455246524f4d5f4641494c000000000000000000000000000000600082015250565b7f5452414e534645525f4641494c00000000000000000000000000000000000000600082015250565b7f5452414e534645525f4641494c45440000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f414d4f554e545f455843454544535f5354414b45000000000000000000000000600082015250565b611923816116e7565b811461192e57600080fd5b50565b61193a816116f9565b811461194557600080fd5b50565b61195181611725565b811461195c57600080fd5b5056fea2646970667358221220f318bed30b8e024d407b1eb62502e35160a2260057c0787bb98233f064ac7bcc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addRewards(uint256)": {
        "details": "will 'start' a new 'epoch'only callable by owner",
        "params": {
          "_amount": "amount of reward tokens to add"
        }
      },
      "farm(uint256)": {
        "details": "'_amount' needs to be approved for the 'TenderFarm' to transferharvests current rewards before accounting updates are made",
        "params": {
          "_amount": "amount of liquidity pool tokens to stake"
        }
      },
      "farmFor(address,uint256)": {
        "details": "'_amount' needs to be approved for the 'TenderFarm' to transferstaked tokens will belong to the account they are staked forharvests current rewards before accounting updates are made",
        "params": {
          "_amount": "amount of liquidity pool tokens to stake",
          "_for": "account to stake for"
        }
      },
      "harvest()": {
        "details": "reverts when trying to harvest multiple times if no new rewards have been addedemits an event with how many reward tokens have been harvested"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unfarm(uint256)": {
        "details": "'_amount' needs to be approved for the 'TenderFarm' to transferharvests current rewards before accounting updates are made",
        "params": {
          "_amount": "amount of liquidity pool tokens to stake"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addRewards(uint256)": {
        "notice": "add new rewards"
      },
      "farm(uint256)": {
        "notice": "stake liquidity pool tokens to receive rewards"
      },
      "farmFor(address,uint256)": {
        "notice": "stake liquidity pool tokens for a specific account so that it receives rewards"
      },
      "harvest()": {
        "notice": "harvest outstanding rewards"
      },
      "unfarm(uint256)": {
        "notice": "unstake liquidity pool tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1824,
        "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)780"
      },
      {
        "astId": 1827,
        "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITenderToken)4811"
      },
      {
        "astId": 1829,
        "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
        "label": "totalStake",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1831,
        "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
        "label": "nextTotalStake",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1833,
        "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
        "label": "CRF",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1843,
        "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
        "label": "stakes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Stake)1838_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)780": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderToken)4811": {
        "encoding": "inplace",
        "label": "contract ITenderToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Stake)1838_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TenderFarm.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)1838_storage"
      },
      "t_struct(Stake)1838_storage": {
        "encoding": "inplace",
        "label": "struct TenderFarm.Stake",
        "members": [
          {
            "astId": 1835,
            "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1837,
            "contract": "contracts/liquidity/TenderFarm.sol:TenderFarm",
            "label": "lastCRF",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}