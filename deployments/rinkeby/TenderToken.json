{
  "address": "0x6b903e6751e10d9F8AEa932891DED743F2F22616",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPooledTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTotalPooledTokens",
          "type": "uint256"
        }
      ],
      "name": "setTotalPooledTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "sharesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "sharesToTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokens",
          "type": "uint256"
        }
      ],
      "name": "tokensToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b2837a3c66747b22a490343a1ff8c8ad4955b63c754c64fcc16125a728de857",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x6b903e6751e10d9F8AEa932891DED743F2F22616",
    "transactionIndex": 18,
    "gasUsed": "1936506",
    "logsBloom": "0x
    "blockHash": "0xbb09cea7bd9758e3a2d2cd3d20c8409bb3a4203b097b540706b28c9dbd77bfce",
    "transactionHash": "0x5b2837a3c66747b22a490343a1ff8c8ad4955b63c754c64fcc16125a728de857",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 8843728,
        "transactionHash": "0x5b2837a3c66747b22a490343a1ff8c8ad4955b63c754c64fcc16125a728de857",
        "address": "0x6b903e6751e10d9F8AEa932891DED743F2F22616",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0xbb09cea7bd9758e3a2d2cd3d20c8409bb3a4203b097b540706b28c9dbd77bfce"
      }
    ],
    "blockNumber": 8843728,
    "cumulativeGasUsed": "3751079",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Livepeer",
    "LPT"
  ],
  "solcInputHash": "a9f830c0f7a81c19f770a0b97bdb89ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPooledTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalPooledTokens\",\"type\":\"uint256\"}],\"name\":\"setTotalPooledTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"sharesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"sharesToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Tenderize <info@tenderize.me>\",\"details\":\"TenderToken balances are dynamic and are calculated based on the accounts' shares and the total amount of Tokens controlled by the protocol. Account shares aren't normalized, so the contract also stores the sum of all shares to calculate each account's token balance which equals to: shares[account] * _getTotalPooledTokens() / _getTotalShares()\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"This value changes when `approve` or `transferFrom` is called.\",\"params\":{\"_owner\":\"address that approved the allowance\",\"_spender\":\"address that is allowed to spend the allowance\"},\"returns\":{\"_0\":\"amount '_spender' is allowed to spend from '_owner'\"}},\"approve(address,uint256)\":{\"details\":\"Emits an `Approval` event.Requirements: - `_spender` cannot be the zero address.The `_amount` argument is the amount of tokens, not shares.\",\"params\":{\"_amount\":\"amount of tokens to allow '_spender' to spend\",\"_spender\":\"address of the spender allowed to approve tokens from caller\"},\"returns\":{\"_0\":\"a boolean value indicating whether the operation succeeded.\"}},\"balanceOf(address)\":{\"details\":\"Balances are dynamic and equal the `_account`'s share in the amount of the total Tokens controlled by the protocol. See `sharesOf`.\",\"params\":{\"_account\":\"address of the account to check the balance for\"}},\"burn(address,uint256)\":{\"details\":\"Only callable by contract ownerCalculates the amount of shares to destroy based on the specified '_amount' and destroy shares rather than burning tokens'_recipient' should also withdraw from Tenderizer atomically\",\"params\":{\"_account\":\"address to burn the tokens from\",\"_amount\":\"amount to burn\"},\"returns\":{\"_0\":\"a boolean value indicating whether the operation succeeded.\"}},\"decimals()\":{\"returns\":{\"_0\":\"the number of decimals for getting user representation of a token amount.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the zero address. - `_spender` must have allowance for the caller of at least `_subtractedValue`.\",\"params\":{\"_spender\":\"address of the spender allowed to approve tokens from caller\",\"_subtractedValue\":\"amount to subtract from current allowance\"}},\"getTotalPooledTokens()\":{\"details\":\"The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.\",\"returns\":{\"_0\":\"total amount of pooled tokens\"}},\"getTotalShares()\":{\"details\":\"The sum of all accounts' shares can be an arbitrary number, therefore it is necessary to store it in order to calculate each account's relative share.\",\"returns\":{\"_0\":\"total amount of shares\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the the zero address.\",\"params\":{\"_addedValue\":\"amount to add to allowance\",\"_spender\":\"address of the spender allowed to approve tokens from caller\"}},\"mint(address,uint256)\":{\"details\":\"Only callable by contract ownerCalculates the amount of shares to create based on the specified '_amount' and creates new shares rather than minting actual tokens'_recipient' should also deposit into Tenderizer atomically to prevent diluation of existing particpants\",\"params\":{\"_amount\":\"amount to mint\",\"_recipient\":\"address to mint tokens for\"},\"returns\":{\"_0\":\"a boolean value indicating whether the operation succeeded.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTotalPooledTokens(uint256)\":{\"details\":\"Only callable by contract owner\",\"params\":{\"_newTotalPooledTokens\":\"new amount of total tokens controlled by the Tenderizer\"}},\"sharesOf(address)\":{\"params\":{\"_account\":\"address of the account\"},\"returns\":{\"_0\":\"the amount of shares owned by `_account`.\"}},\"sharesToTokens(uint256)\":{\"params\":{\"_shares\":\"the amount of shares to calculate the amount of tokens for\"},\"returns\":{\"_0\":\"the amount of tokens represented by the shares\"}},\"tokensToShares(uint256)\":{\"params\":{\"_tokens\":\"amount of tokens to calculate shares for\"},\"returns\":{\"_0\":\"nominal amount of shares the tokens represent\"}},\"totalSupply()\":{\"details\":\"Always equals to `_getTotalPooledTokens()` since token amount is pegged to the total amount of Tokens controlled by the protocol.\",\"returns\":{\"_0\":\"total supply\"}},\"transfer(address,uint256)\":{\"details\":\"Emits a `Transfer` event.Requirements: - `_recipient` cannot be the zero address. - the caller must have a balance of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.\",\"params\":{\"_amount\":\"amount of tokens to transfer\",\"_recipient\":\"address of the recipient\"},\"returns\":{\"_0\":\"a boolean value indicating whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Emits a `Transfer` event.Emits an `Approval` event indicating the updated allowance.Requirements: - `_sender` and `_recipient` cannot be the zero addresses. - `_sender` must have a balance of at least `_amount`. - the caller must have allowance for `_sender`'s tokens of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.\",\"params\":{\"_recipient\":\"address of the recipient\",\"_sender\":\"address of the account to transfer tokens from\"},\"returns\":{\"_0\":\"a boolean value indicating whether the operation succeeded.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"allowances\":{\"details\":\"Allowances nominated in tokens, not token shares.\"},\"shares\":{\"details\":\"Nominal amount of shares held by each account\"},\"totalPooledTokens\":{\"details\":\"Total amount of underlying tokens pooled\"},\"totalShares\":{\"details\":\"Total amount of outstanding shares\"}},\"title\":\"Interest-bearing ERC20-like token for Tenderize protocol.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"The remaining number of tokens that `_spender` is allowed to spend behalf of `_owner` through `transferFrom`. This is zero by default.\"},\"approve(address,uint256)\":{\"notice\":\"Sets `_amount` as the allowance of `_spender` over the caller's tokens.\"},\"balanceOf(address)\":{\"notice\":\"the amount of tokens owned by the `_account`.\"},\"burn(address,uint256)\":{\"notice\":\"Burns '_amount' of tokens from '_recipient'\"},\"decimals()\":{\"notice\":\"The number of decimals the TenderToken uses\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\"},\"getTotalPooledTokens()\":{\"notice\":\"Total amount of underlying tokens controlled by the Tenderizer\"},\"getTotalShares()\":{\"notice\":\"The total amount of shares in existence.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\"},\"mint(address,uint256)\":{\"notice\":\"Mints '_amount' of tokens for '_recipient'\"},\"setTotalPooledTokens(uint256)\":{\"notice\":\"Sets the total amount of pooled tokens controlled by the Tenderizer\"},\"sharesOf(address)\":{\"notice\":\"The amount of shares owned by an account\"},\"sharesToTokens(uint256)\":{\"notice\":\"The amount of tokens that corresponds to `_shares` token shares.\"},\"tokensToShares(uint256)\":{\"notice\":\"The amount of shares that corresponds to `_tokens` protocol-controlled Tokens.\"},\"totalSupply()\":{\"notice\":\"The total supply of tender tokens in existence\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers `_amount` tokens from the caller's account to the `_recipient` account.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers `_amount` tokens from `_sender` to `_recipient` using the allowance mechanism. `_amount` is then deducted from the caller's allowance.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TenderToken.sol\":\"TenderToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0x789126d80f77ab810cb8091f87377656efd37a532fb6299b814d42e516c09f2f\",\"license\":\"GPL-3.0\"},\"contracts/token/NamedToken.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Lido <info@lido.fi>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ncontract NamedToken {\\n    string _name;\\n    string _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n}\\n\",\"keccak256\":\"0x3feb46ae2c17f2d6c0fb992732f5f04c52d0a1d29b04d6e711777ce5c7ccea8f\",\"license\":\"GPL-3.0\"},\"contracts/token/TenderToken.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"./NamedToken.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../libs/MathUtils.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for Tenderize protocol.\\n * @author Tenderize <info@tenderize.me>\\n * @dev TenderToken balances are dynamic and are calculated based on the accounts' shares\\n    and the total amount of Tokens controlled by the protocol. Account shares aren't\\n    normalized, so the contract also stores the sum of all shares to calculate\\n    each account's token balance which equals to:\\n\\n    shares[account] * _getTotalPooledTokens() / _getTotalShares()\\n */\\ncontract TenderToken is NamedToken, Ownable, IERC20 {\\n    uint8 internal constant DECIMALS = 18;\\n\\n    /**\\n     * @dev Total amount of outstanding shares\\n     */\\n    uint256 private totalShares;\\n\\n    /**\\n     * @dev Total amount of underlying tokens pooled\\n     */\\n    uint256 private totalPooledTokens;\\n\\n    /**\\n     * @dev Nominal amount of shares held by each account\\n     */\\n    mapping(address => uint256) private shares;\\n\\n    /**\\n     * @dev Allowances nominated in tokens, not token shares.\\n     */\\n    mapping(address => mapping(address => uint256)) private allowances;\\n\\n    constructor(string memory _name, string memory _symbol)\\n        NamedToken(string(abi.encodePacked(\\\"tender \\\", _name)), string(abi.encodePacked(\\\"t\\\", _symbol)))\\n    {}\\n\\n    /**\\n     * @notice The number of decimals the TenderToken uses\\n     * @return the number of decimals for getting user representation of a token amount.\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    /**\\n     * @notice The total supply of tender tokens in existence\\n     * @dev Always equals to `_getTotalPooledTokens()` since token amount\\n        is pegged to the total amount of Tokens controlled by the protocol.\\n     * @return total supply\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return _getTotalPooledTokens();\\n    }\\n\\n    /**\\n     * @notice Total amount of underlying tokens controlled by the Tenderizer\\n     * @dev The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.\\n     * @return total amount of pooled tokens\\n     */\\n    function getTotalPooledTokens() public view returns (uint256) {\\n        return _getTotalPooledTokens();\\n    }\\n\\n    /**\\n     * @notice The total amount of shares in existence.\\n     * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n        it is necessary to store it in order to calculate each account's relative share.\\n     * @return total amount of shares\\n     */\\n    function getTotalShares() public view returns (uint256) {\\n        return _getTotalShares();\\n    }\\n\\n    /**\\n     * @notice the amount of tokens owned by the `_account`.\\n     * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n        total Tokens controlled by the protocol. See `sharesOf`.\\n     * @param _account address of the account to check the balance for\\n     */\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return sharesToTokens(_sharesOf(_account));\\n    }\\n\\n    /**\\n     * @notice The amount of shares owned by an account\\n     * @param _account address of the account\\n     * @return the amount of shares owned by `_account`.\\n     */\\n    function sharesOf(address _account) public view returns (uint256) {\\n        return _sharesOf(_account);\\n    }\\n\\n    /**\\n     * @notice The remaining number of tokens that `_spender` is allowed to spend\\n        behalf of `_owner` through `transferFrom`. This is zero by default.\\n     * @dev This value changes when `approve` or `transferFrom` is called.\\n     * @param _owner address that approved the allowance\\n     * @param _spender address that is allowed to spend the allowance\\n     * @return amount '_spender' is allowed to spend from '_owner'\\n     */\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @notice The amount of shares that corresponds to `_tokens` protocol-controlled Tokens.\\n     * @param _tokens amount of tokens to calculate shares for\\n     * @return nominal amount of shares the tokens represent\\n     */\\n    function tokensToShares(uint256 _tokens) public view returns (uint256) {\\n        uint256 _totalPooledTokens = _getTotalPooledTokens();\\n        uint256 _totalShares = _getTotalShares();\\n        if (_totalPooledTokens == 0) {\\n            return 0;\\n        } else if (_totalShares == 0) {\\n            return _tokens;\\n        } else {\\n            return MathUtils.percOf(_tokens, _totalShares, _totalPooledTokens);\\n        }\\n    }\\n\\n    /**\\n     * @notice The amount of tokens that corresponds to `_shares` token shares.\\n     * @param _shares the amount of shares to calculate the amount of tokens for\\n     * @return the amount of tokens represented by the shares\\n     */\\n    function sharesToTokens(uint256 _shares) public view returns (uint256) {\\n        uint256 currShares = _getTotalShares();\\n        if (currShares == 0) {\\n            return 0;\\n        } else {\\n            return MathUtils.percOf(_shares, _getTotalPooledTokens(), currShares);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from the caller's account to the `_recipient` account.\\n     * @param _recipient address of the recipient\\n     * @param _amount amount of tokens to transfer\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Requirements:\\n        - `_recipient` cannot be the zero address.\\n        - the caller must have a balance of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transfer(address _recipient, uint256 _amount) external override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _amount amount of tokens to allow '_spender' to spend\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * @dev Emits an `Approval` event.\\n     * @dev Requirements:\\n        - `_spender` cannot be the zero address.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from `_sender` to `_recipient` using the\\n        allowance mechanism. `_amount` is then deducted from the caller's allowance.\\n     * @param _sender address of the account to transfer tokens from\\n     * @param _recipient address of the recipient\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n        - `_sender` and `_recipient` cannot be the zero addresses.\\n        - `_sender` must have a balance of at least `_amount`.\\n        - the caller must have allowance for `_sender`'s tokens of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external override returns (bool) {\\n        uint256 currentAllowance = allowances[_sender][msg.sender];\\n        require(currentAllowance >= _amount, \\\"TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE\\\");\\n\\n        _transfer(_sender, _recipient, _amount);\\n        _approve(_sender, msg.sender, currentAllowance - _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _addedValue amount to add to allowance\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n        - `_spender` cannot be the the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {\\n        _approve(msg.sender, _spender, allowances[msg.sender][_spender] + _addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _subtractedValue amount to subtract from current allowance\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n        - `_spender` cannot be the zero address.\\n        - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {\\n        uint256 currentAllowance = allowances[msg.sender][_spender];\\n        require(currentAllowance >= _subtractedValue, \\\"DECREASED_ALLOWANCE_BELOW_ZERO\\\");\\n        _approve(msg.sender, _spender, currentAllowance - _subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints '_amount' of tokens for '_recipient'\\n     * @param _recipient address to mint tokens for\\n     * @param _amount amount to mint\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to create based on the specified '_amount'\\n        and creates new shares rather than minting actual tokens\\n     * @dev '_recipient' should also deposit into Tenderizer\\n        atomically to prevent diluation of existing particpants\\n     */\\n    function mint(address _recipient, uint256 _amount) public onlyOwner returns (bool) {\\n        uint256 _totalPooledTokens = _getTotalPooledTokens();\\n        if (_totalPooledTokens == 0) {\\n            _mintShares(_recipient, _amount);\\n        } else {\\n            uint256 _sharesToMint = sharesToTokens(_amount);\\n            _mintShares(_recipient, _sharesToMint);\\n        }\\n        _setTotalPooledTokens(totalPooledTokens + _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Burns '_amount' of tokens from '_recipient'\\n     * @param _account address to burn the tokens from\\n     * @param _amount amount to burn\\n     * @return a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to destroy based on the specified '_amount'\\n        and destroy shares rather than burning tokens\\n     * @dev '_recipient' should also withdraw from Tenderizer atomically\\n     */\\n    function burn(address _account, uint256 _amount) public onlyOwner returns (bool) {\\n        uint256 _sharesToburn = sharesToTokens(_amount);\\n        _burnShares(_account, _sharesToburn);\\n        _setTotalPooledTokens(totalPooledTokens - _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Sets the total amount of pooled tokens controlled by the Tenderizer\\n     * @param _newTotalPooledTokens new amount of total tokens controlled by the Tenderizer\\n     * @dev Only callable by contract owner\\n     */\\n    function setTotalPooledTokens(uint256 _newTotalPooledTokens) public onlyOwner {\\n        _setTotalPooledTokens(_newTotalPooledTokens);\\n    }\\n\\n    /**\\n     * @return the total amount (in 10e18) of Tokens controlled by the protocol.\\n     * @dev This is used for calculating tokens from shares and vice versa.\\n     * @dev This function is required to be implemented in a derived contract.\\n     */\\n    function _getTotalPooledTokens() internal view returns (uint256) {\\n        return totalPooledTokens;\\n    }\\n\\n    /**\\n     * @dev update the total amount (in 10e18) of Tokens controlled by the protocol.\\n     */\\n    function _setTotalPooledTokens(uint256 _newTotalPooledTokens) internal {\\n        totalPooledTokens = _newTotalPooledTokens;\\n    }\\n\\n    /**\\n     * @dev Moves `_amount` tokens from `_sender` to `_recipient`.\\n     * @dev Emits a `Transfer` event.\\n     */\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) internal {\\n        uint256 _sharesToTransfer = tokensToShares(_amount);\\n        _transferShares(_sender, _recipient, _sharesToTransfer);\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n\\n    /**\\n     * @dev Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.\\n     * @dev Emits an `Approval` event.\\n     */\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) internal {\\n        require(_owner != address(0), \\\"APPROVE_FROM_ZERO_ADDRESS\\\");\\n        require(_spender != address(0), \\\"APPROVE_TO_ZERO_ADDRESS\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    /**\\n     * @dev the total amount of shares in existence.\\n     */\\n    function _getTotalShares() internal view returns (uint256) {\\n        return totalShares;\\n    }\\n\\n    /**\\n     * @dev the amount of shares owned by `_account`.\\n     */\\n    function _sharesOf(address _account) internal view returns (uint256) {\\n        return shares[_account];\\n    }\\n\\n    /**\\n     * @dev Moves `_shares` shares from `_sender` to `_recipient`.\\n     * @dev Requirements:\\n        - `_sender` cannot be the zero address.\\n        - `_recipient` cannot be the zero address.\\n        - `_sender` must hold at least `_shares` shares.\\n     */\\n    function _transferShares(\\n        address _sender,\\n        address _recipient,\\n        uint256 _shares\\n    ) internal {\\n        require(_sender != address(0), \\\"TRANSFER_FROM_THE_ZERO_ADDRESS\\\");\\n        require(_recipient != address(0), \\\"TRANSFER_TO_THE_ZERO_ADDRESS\\\");\\n\\n        uint256 currentSenderShares = shares[_sender];\\n        require(_shares <= currentSenderShares, \\\"TRANSFER_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        shares[_sender] -= _shares;\\n        shares[_recipient] += _shares;\\n    }\\n\\n    /**\\n     * @dev Creates `_shares` shares and assigns them to `_recipient`, increasing the total amount of shares.\\n     * @dev This doesn't increase the token total supply.\\n     * @dev Requirements:\\n        - `_recipient` cannot be the zero address.\\n     */\\n    function _mintShares(address _recipient, uint256 _shares) internal returns (uint256 newTotalShares) {\\n        require(_recipient != address(0), \\\"MINT_TO_THE_ZERO_ADDRESS\\\");\\n\\n        newTotalShares = totalShares + _shares;\\n\\n        shares[_recipient] += _shares;\\n\\n        // Notice: we're not emitting a Transfer event from the zero address here since shares mint\\n        // works by taking the amount of tokens corresponding to the minted shares from all other\\n        // token holders, proportionally to their share. The total supply of the token doesn't change\\n        // as the result. This is equivalent to performing a send from each other token holder's\\n        // address to `address`, but we cannot reflect this as it would require sending an unbounded\\n        // number of events.\\n        totalShares = newTotalShares;\\n    }\\n\\n    /**\\n     * @dev Destroys `_shares` shares from `_account`'s holdings, decreasing the total amount of shares.\\n     * @dev This doesn't decrease the token total supply.\\n     * @dev Requirements:\\n        - `_account` cannot be the zero address.\\n        - `_account` must hold at least `_shares` shares.\\n     */\\n    function _burnShares(address _account, uint256 _shares) internal returns (uint256 newTotalShares) {\\n        require(_account != address(0), \\\"BURN_FROM_THE_ZERO_ADDRESS\\\");\\n\\n        uint256 accountShares = shares[_account];\\n        require(_shares <= accountShares, \\\"BURN_AMOUNT_EXCEEDS_BALANCE\\\");\\n\\n        newTotalShares = totalShares - _shares;\\n\\n        shares[_account] -= _shares;\\n\\n        // Notice: we're not emitting a Transfer event to the zero address here since shares burn\\n        // works by redistributing the amount of tokens corresponding to the burned shares between\\n        // all other token holders. The total supply of the token doesn't change as the result.\\n        // This is equivalent to performing a send from `address` to each other token holder address,\\n        // but we cannot reflect this as it would require sending an unbounded number of events.\\n        totalShares = newTotalShares;\\n    }\\n}\\n\",\"keccak256\":\"0x79bb18da41437903d97ade4e5251dc74006df1e72dcee97af669a47fee5a75cc\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620025f2380380620025f2833981810160405281019062000037919062000292565b816040516020016200004a9190620003c0565b604051602081830303815290604052816040516020016200006c9190620003e6565b60405160208183030381529060405281600090805190602001906200009392919062000170565b508060019080519060200190620000ac92919062000170565b5050506000620000c16200016860201b60201c565b905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350505062000553565b600033905090565b8280546200017e90620004bf565b90600052602060002090601f016020900481019282620001a25760008555620001ee565b82601f10620001bd57805160ff1916838001178555620001ee565b82800160010185558215620001ee579182015b82811115620001ed578251825591602001919060010190620001d0565b5b509050620001fd919062000201565b5090565b5b808211156200021c57600081600090555060010162000202565b5090565b600062000237620002318462000440565b6200040c565b9050828152602081018484840111156200025057600080fd5b6200025d84828562000489565b509392505050565b600082601f8301126200027757600080fd5b81516200028984826020860162000220565b91505092915050565b60008060408385031215620002a657600080fd5b600083015167ffffffffffffffff811115620002c157600080fd5b620002cf8582860162000265565b925050602083015167ffffffffffffffff811115620002ed57600080fd5b620002fb8582860162000265565b9150509250929050565b6000620003128262000473565b6200031e81856200047e565b93506200033081856020860162000489565b80840191505092915050565b60006200034b6007836200047e565b91507f74656e64657220000000000000000000000000000000000000000000000000006000830152600782019050919050565b60006200038d6001836200047e565b91507f74000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000620003cd826200033c565b9150620003db828462000305565b915081905092915050565b6000620003f3826200037e565b915062000401828462000305565b915081905092915050565b6000604051905081810181811067ffffffffffffffff8211171562000436576200043562000524565b5b8060405250919050565b600067ffffffffffffffff8211156200045e576200045d62000524565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b60005b83811015620004a95780820151818401526020810190506200048c565b83811115620004b9576000848401525b50505050565b60006002820490506001821680620004d857607f821691505b60208210811415620004ef57620004ee620004f5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61208f80620005636000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063a9059cbb1161007c578063a9059cbb146103a1578063d5002f2e146103d1578063dd62ed3e146103ef578063f2fde38b1461041f578063f3044ac71461043b578063f5eb42dc1461046b57610142565b80638da5cb5b146102e957806395d89b41146103075780639dc29fac14610325578063a457c2d714610355578063a4eaf7491461038557610142565b8063313ce5671161010a578063313ce56714610213578063395093511461023157806340c10f191461026157806370a0823114610291578063715018a6146102c15780638d7a7164146102cb57610142565b806306fdde0314610147578063095ea7b31461016557806318160ddd1461019557806323b872dd146101b357806327def4fd146101e3575b600080fd5b61014f61049b565b60405161015c9190611bca565b60405180910390f35b61017f600480360381019061017a919061176e565b61052d565b60405161018c9190611baf565b60405180910390f35b61019d610544565b6040516101aa9190611d6c565b60405180910390f35b6101cd60048036038101906101c8919061171f565b610553565b6040516101da9190611baf565b60405180910390f35b6101fd60048036038101906101f891906117aa565b610645565b60405161020a9190611d6c565b60405180910390f35b61021b610680565b6040516102289190611d87565b60405180910390f35b61024b6004803603810190610246919061176e565b610689565b6040516102589190611baf565b60405180910390f35b61027b6004803603810190610276919061176e565b610727565b6040516102889190611baf565b60405180910390f35b6102ab60048036038101906102a691906116ba565b610805565b6040516102b89190611d6c565b60405180910390f35b6102c961081f565b005b6102d361095c565b6040516102e09190611d6c565b60405180910390f35b6102f161096b565b6040516102fe9190611b94565b60405180910390f35b61030f610995565b60405161031c9190611bca565b60405180910390f35b61033f600480360381019061033a919061176e565b610a27565b60405161034c9190611baf565b60405180910390f35b61036f600480360381019061036a919061176e565b610ade565b60405161037c9190611baf565b60405180910390f35b61039f600480360381019061039a91906117aa565b610bc4565b005b6103bb60048036038101906103b6919061176e565b610c4c565b6040516103c89190611baf565b60405180910390f35b6103d9610c63565b6040516103e69190611d6c565b60405180910390f35b610409600480360381019061040491906116e3565b610c72565b6040516104169190611d6c565b60405180910390f35b610439600480360381019061043491906116ba565b610cf9565b005b610455600480360381019061045091906117aa565b610ea5565b6040516104629190611d6c565b60405180910390f35b610485600480360381019061048091906116ba565b610efa565b6040516104929190611d6c565b60405180910390f35b6060600080546104aa90611f5b565b80601f01602080910402602001604051908101604052809291908181526020018280546104d690611f5b565b80156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b5050505050905090565b600061053a338484610f0c565b6001905092915050565b600061054e6110d7565b905090565b600080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90611bec565b60405180910390fd5b6106238585856110e1565b610639853385846106349190611e9f565b610f0c565b60019150509392505050565b600080610650611164565b9050600081141561066557600091505061067b565b610677836106716110d7565b8361116e565b9150505b919050565b60006012905090565b600061071d338484600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107189190611dbe565b610f0c565b6001905092915050565b60006107316111a2565b73ffffffffffffffffffffffffffffffffffffffff1661074f61096b565b73ffffffffffffffffffffffffffffffffffffffff16146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c90611cec565b60405180910390fd5b60006107af6110d7565b905060008114156107ca576107c484846111aa565b506107e4565b60006107d584610645565b90506107e185826111aa565b50505b6107fa836004546107f59190611dbe565b61128e565b600191505092915050565b600061081861081383611298565b610645565b9050919050565b6108276111a2565b73ffffffffffffffffffffffffffffffffffffffff1661084561096b565b73ffffffffffffffffffffffffffffffffffffffff161461089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290611cec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006109666110d7565b905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109a490611f5b565b80601f01602080910402602001604051908101604052809291908181526020018280546109d090611f5b565b8015610a1d5780601f106109f257610100808354040283529160200191610a1d565b820191906000526020600020905b815481529060010190602001808311610a0057829003601f168201915b5050505050905090565b6000610a316111a2565b73ffffffffffffffffffffffffffffffffffffffff16610a4f61096b565b73ffffffffffffffffffffffffffffffffffffffff1614610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c90611cec565b60405180910390fd5b6000610ab083610645565b9050610abc84826112e1565b50610ad383600454610ace9190611e9f565b61128e565b600191505092915050565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a90611c8c565b60405180910390fd5b610bb933858584610bb49190611e9f565b610f0c565b600191505092915050565b610bcc6111a2565b73ffffffffffffffffffffffffffffffffffffffff16610bea61096b565b73ffffffffffffffffffffffffffffffffffffffff1614610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611cec565b60405180910390fd5b610c498161128e565b50565b6000610c593384846110e1565b6001905092915050565b6000610c6d611164565b905090565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610d016111a2565b73ffffffffffffffffffffffffffffffffffffffff16610d1f61096b565b73ffffffffffffffffffffffffffffffffffffffff1614610d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6c90611cec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90611c4c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610eb06110d7565b90506000610ebc611164565b90506000821415610ed257600092505050610ef5565b6000811415610ee5578392505050610ef5565b610ef084828461116e565b925050505b919050565b6000610f0582611298565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390611d2c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe390611c6c565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110ca9190611d6c565b60405180910390a3505050565b6000600454905090565b60006110ec82610ea5565b90506110f984848361144d565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111569190611d6c565b60405180910390a350505050565b6000600354905090565b6000683635c9adc5dea000006111848484611666565b8561118f9190611e45565b6111999190611e14565b90509392505050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121290611d4c565b60405180910390fd5b816003546112299190611dbe565b905081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127a9190611dbe565b925050819055508060038190555092915050565b8060048190555050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134990611c2c565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090611ccc565b60405180910390fd5b826003546113e79190611e9f565b915082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114389190611e9f565b92505081905550816003819055505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b490611c0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152490611cac565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808211156115b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ab90611d0c565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116039190611e9f565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116599190611dbe565b9250508190555050505050565b600081683635c9adc5dea000008461167e9190611e45565b6116889190611e14565b905092915050565b60008135905061169f8161202b565b92915050565b6000813590506116b481612042565b92915050565b6000602082840312156116cc57600080fd5b60006116da84828501611690565b91505092915050565b600080604083850312156116f657600080fd5b600061170485828601611690565b925050602061171585828601611690565b9150509250929050565b60008060006060848603121561173457600080fd5b600061174286828701611690565b935050602061175386828701611690565b9250506040611764868287016116a5565b9150509250925092565b6000806040838503121561178157600080fd5b600061178f85828601611690565b92505060206117a0858286016116a5565b9150509250929050565b6000602082840312156117bc57600080fd5b60006117ca848285016116a5565b91505092915050565b6117dc81611ed3565b82525050565b6117eb81611ee5565b82525050565b60006117fc82611da2565b6118068185611dad565b9350611816818560208601611f28565b61181f8161201a565b840191505092915050565b6000611837602183611dad565b91507f5452414e534645525f414d4f554e545f455843454544535f414c4c4f57414e4360008301527f45000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061189d601e83611dad565b91507f5452414e534645525f46524f4d5f5448455f5a45524f5f4144445245535300006000830152602082019050919050565b60006118dd601a83611dad565b91507f4255524e5f46524f4d5f5448455f5a45524f5f414444524553530000000000006000830152602082019050919050565b600061191d602683611dad565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611983601783611dad565b91507f415050524f56455f544f5f5a45524f5f414444524553530000000000000000006000830152602082019050919050565b60006119c3601e83611dad565b91507f4445435245415345445f414c4c4f57414e43455f42454c4f575f5a45524f00006000830152602082019050919050565b6000611a03601c83611dad565b91507f5452414e534645525f544f5f5448455f5a45524f5f41444452455353000000006000830152602082019050919050565b6000611a43601b83611dad565b91507f4255524e5f414d4f554e545f455843454544535f42414c414e434500000000006000830152602082019050919050565b6000611a83602083611dad565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611ac3601f83611dad565b91507f5452414e534645525f414d4f554e545f455843454544535f42414c414e4345006000830152602082019050919050565b6000611b03601983611dad565b91507f415050524f56455f46524f4d5f5a45524f5f41444452455353000000000000006000830152602082019050919050565b6000611b43601883611dad565b91507f4d494e545f544f5f5448455f5a45524f5f4144445245535300000000000000006000830152602082019050919050565b611b7f81611f11565b82525050565b611b8e81611f1b565b82525050565b6000602082019050611ba960008301846117d3565b92915050565b6000602082019050611bc460008301846117e2565b92915050565b60006020820190508181036000830152611be481846117f1565b905092915050565b60006020820190508181036000830152611c058161182a565b9050919050565b60006020820190508181036000830152611c2581611890565b9050919050565b60006020820190508181036000830152611c45816118d0565b9050919050565b60006020820190508181036000830152611c6581611910565b9050919050565b60006020820190508181036000830152611c8581611976565b9050919050565b60006020820190508181036000830152611ca5816119b6565b9050919050565b60006020820190508181036000830152611cc5816119f6565b9050919050565b60006020820190508181036000830152611ce581611a36565b9050919050565b60006020820190508181036000830152611d0581611a76565b9050919050565b60006020820190508181036000830152611d2581611ab6565b9050919050565b60006020820190508181036000830152611d4581611af6565b9050919050565b60006020820190508181036000830152611d6581611b36565b9050919050565b6000602082019050611d816000830184611b76565b92915050565b6000602082019050611d9c6000830184611b85565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611dc982611f11565b9150611dd483611f11565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e0957611e08611f8d565b5b828201905092915050565b6000611e1f82611f11565b9150611e2a83611f11565b925082611e3a57611e39611fbc565b5b828204905092915050565b6000611e5082611f11565b9150611e5b83611f11565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e9457611e93611f8d565b5b828202905092915050565b6000611eaa82611f11565b9150611eb583611f11565b925082821015611ec857611ec7611f8d565b5b828203905092915050565b6000611ede82611ef1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611f46578082015181840152602081019050611f2b565b83811115611f55576000848401525b50505050565b60006002820490506001821680611f7357607f821691505b60208210811415611f8757611f86611feb565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61203481611ed3565b811461203f57600080fd5b50565b61204b81611f11565b811461205657600080fd5b5056fea26469706673582212208efb58851af57f63008eccede71cbf4f55f92c842e9e84a86624bcca60b193f064736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80638da5cb5b116100b8578063a9059cbb1161007c578063a9059cbb146103a1578063d5002f2e146103d1578063dd62ed3e146103ef578063f2fde38b1461041f578063f3044ac71461043b578063f5eb42dc1461046b57610142565b80638da5cb5b146102e957806395d89b41146103075780639dc29fac14610325578063a457c2d714610355578063a4eaf7491461038557610142565b8063313ce5671161010a578063313ce56714610213578063395093511461023157806340c10f191461026157806370a0823114610291578063715018a6146102c15780638d7a7164146102cb57610142565b806306fdde0314610147578063095ea7b31461016557806318160ddd1461019557806323b872dd146101b357806327def4fd146101e3575b600080fd5b61014f61049b565b60405161015c9190611bca565b60405180910390f35b61017f600480360381019061017a919061176e565b61052d565b60405161018c9190611baf565b60405180910390f35b61019d610544565b6040516101aa9190611d6c565b60405180910390f35b6101cd60048036038101906101c8919061171f565b610553565b6040516101da9190611baf565b60405180910390f35b6101fd60048036038101906101f891906117aa565b610645565b60405161020a9190611d6c565b60405180910390f35b61021b610680565b6040516102289190611d87565b60405180910390f35b61024b6004803603810190610246919061176e565b610689565b6040516102589190611baf565b60405180910390f35b61027b6004803603810190610276919061176e565b610727565b6040516102889190611baf565b60405180910390f35b6102ab60048036038101906102a691906116ba565b610805565b6040516102b89190611d6c565b60405180910390f35b6102c961081f565b005b6102d361095c565b6040516102e09190611d6c565b60405180910390f35b6102f161096b565b6040516102fe9190611b94565b60405180910390f35b61030f610995565b60405161031c9190611bca565b60405180910390f35b61033f600480360381019061033a919061176e565b610a27565b60405161034c9190611baf565b60405180910390f35b61036f600480360381019061036a919061176e565b610ade565b60405161037c9190611baf565b60405180910390f35b61039f600480360381019061039a91906117aa565b610bc4565b005b6103bb60048036038101906103b6919061176e565b610c4c565b6040516103c89190611baf565b60405180910390f35b6103d9610c63565b6040516103e69190611d6c565b60405180910390f35b610409600480360381019061040491906116e3565b610c72565b6040516104169190611d6c565b60405180910390f35b610439600480360381019061043491906116ba565b610cf9565b005b610455600480360381019061045091906117aa565b610ea5565b6040516104629190611d6c565b60405180910390f35b610485600480360381019061048091906116ba565b610efa565b6040516104929190611d6c565b60405180910390f35b6060600080546104aa90611f5b565b80601f01602080910402602001604051908101604052809291908181526020018280546104d690611f5b565b80156105235780601f106104f857610100808354040283529160200191610523565b820191906000526020600020905b81548152906001019060200180831161050657829003601f168201915b5050505050905090565b600061053a338484610f0c565b6001905092915050565b600061054e6110d7565b905090565b600080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90611bec565b60405180910390fd5b6106238585856110e1565b610639853385846106349190611e9f565b610f0c565b60019150509392505050565b600080610650611164565b9050600081141561066557600091505061067b565b610677836106716110d7565b8361116e565b9150505b919050565b60006012905090565b600061071d338484600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107189190611dbe565b610f0c565b6001905092915050565b60006107316111a2565b73ffffffffffffffffffffffffffffffffffffffff1661074f61096b565b73ffffffffffffffffffffffffffffffffffffffff16146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c90611cec565b60405180910390fd5b60006107af6110d7565b905060008114156107ca576107c484846111aa565b506107e4565b60006107d584610645565b90506107e185826111aa565b50505b6107fa836004546107f59190611dbe565b61128e565b600191505092915050565b600061081861081383611298565b610645565b9050919050565b6108276111a2565b73ffffffffffffffffffffffffffffffffffffffff1661084561096b565b73ffffffffffffffffffffffffffffffffffffffff161461089b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089290611cec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60006109666110d7565b905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109a490611f5b565b80601f01602080910402602001604051908101604052809291908181526020018280546109d090611f5b565b8015610a1d5780601f106109f257610100808354040283529160200191610a1d565b820191906000526020600020905b815481529060010190602001808311610a0057829003601f168201915b5050505050905090565b6000610a316111a2565b73ffffffffffffffffffffffffffffffffffffffff16610a4f61096b565b73ffffffffffffffffffffffffffffffffffffffff1614610aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9c90611cec565b60405180910390fd5b6000610ab083610645565b9050610abc84826112e1565b50610ad383600454610ace9190611e9f565b61128e565b600191505092915050565b600080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a90611c8c565b60405180910390fd5b610bb933858584610bb49190611e9f565b610f0c565b600191505092915050565b610bcc6111a2565b73ffffffffffffffffffffffffffffffffffffffff16610bea61096b565b73ffffffffffffffffffffffffffffffffffffffff1614610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611cec565b60405180910390fd5b610c498161128e565b50565b6000610c593384846110e1565b6001905092915050565b6000610c6d611164565b905090565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610d016111a2565b73ffffffffffffffffffffffffffffffffffffffff16610d1f61096b565b73ffffffffffffffffffffffffffffffffffffffff1614610d75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6c90611cec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90611c4c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080610eb06110d7565b90506000610ebc611164565b90506000821415610ed257600092505050610ef5565b6000811415610ee5578392505050610ef5565b610ef084828461116e565b925050505b919050565b6000610f0582611298565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7390611d2c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe390611c6c565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110ca9190611d6c565b60405180910390a3505050565b6000600454905090565b60006110ec82610ea5565b90506110f984848361144d565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516111569190611d6c565b60405180910390a350505050565b6000600354905090565b6000683635c9adc5dea000006111848484611666565b8561118f9190611e45565b6111999190611e14565b90509392505050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561121b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121290611d4c565b60405180910390fd5b816003546112299190611dbe565b905081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127a9190611dbe565b925050819055508060038190555092915050565b8060048190555050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611352576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134990611c2c565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156113d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d090611ccc565b60405180910390fd5b826003546113e79190611e9f565b915082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114389190611e9f565b92505081905550816003819055505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156114bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b490611c0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561152d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152490611cac565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808211156115b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ab90611d0c565b60405180910390fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116039190611e9f565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116599190611dbe565b9250508190555050505050565b600081683635c9adc5dea000008461167e9190611e45565b6116889190611e14565b905092915050565b60008135905061169f8161202b565b92915050565b6000813590506116b481612042565b92915050565b6000602082840312156116cc57600080fd5b60006116da84828501611690565b91505092915050565b600080604083850312156116f657600080fd5b600061170485828601611690565b925050602061171585828601611690565b9150509250929050565b60008060006060848603121561173457600080fd5b600061174286828701611690565b935050602061175386828701611690565b9250506040611764868287016116a5565b9150509250925092565b6000806040838503121561178157600080fd5b600061178f85828601611690565b92505060206117a0858286016116a5565b9150509250929050565b6000602082840312156117bc57600080fd5b60006117ca848285016116a5565b91505092915050565b6117dc81611ed3565b82525050565b6117eb81611ee5565b82525050565b60006117fc82611da2565b6118068185611dad565b9350611816818560208601611f28565b61181f8161201a565b840191505092915050565b6000611837602183611dad565b91507f5452414e534645525f414d4f554e545f455843454544535f414c4c4f57414e4360008301527f45000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061189d601e83611dad565b91507f5452414e534645525f46524f4d5f5448455f5a45524f5f4144445245535300006000830152602082019050919050565b60006118dd601a83611dad565b91507f4255524e5f46524f4d5f5448455f5a45524f5f414444524553530000000000006000830152602082019050919050565b600061191d602683611dad565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611983601783611dad565b91507f415050524f56455f544f5f5a45524f5f414444524553530000000000000000006000830152602082019050919050565b60006119c3601e83611dad565b91507f4445435245415345445f414c4c4f57414e43455f42454c4f575f5a45524f00006000830152602082019050919050565b6000611a03601c83611dad565b91507f5452414e534645525f544f5f5448455f5a45524f5f41444452455353000000006000830152602082019050919050565b6000611a43601b83611dad565b91507f4255524e5f414d4f554e545f455843454544535f42414c414e434500000000006000830152602082019050919050565b6000611a83602083611dad565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000611ac3601f83611dad565b91507f5452414e534645525f414d4f554e545f455843454544535f42414c414e4345006000830152602082019050919050565b6000611b03601983611dad565b91507f415050524f56455f46524f4d5f5a45524f5f41444452455353000000000000006000830152602082019050919050565b6000611b43601883611dad565b91507f4d494e545f544f5f5448455f5a45524f5f4144445245535300000000000000006000830152602082019050919050565b611b7f81611f11565b82525050565b611b8e81611f1b565b82525050565b6000602082019050611ba960008301846117d3565b92915050565b6000602082019050611bc460008301846117e2565b92915050565b60006020820190508181036000830152611be481846117f1565b905092915050565b60006020820190508181036000830152611c058161182a565b9050919050565b60006020820190508181036000830152611c2581611890565b9050919050565b60006020820190508181036000830152611c45816118d0565b9050919050565b60006020820190508181036000830152611c6581611910565b9050919050565b60006020820190508181036000830152611c8581611976565b9050919050565b60006020820190508181036000830152611ca5816119b6565b9050919050565b60006020820190508181036000830152611cc5816119f6565b9050919050565b60006020820190508181036000830152611ce581611a36565b9050919050565b60006020820190508181036000830152611d0581611a76565b9050919050565b60006020820190508181036000830152611d2581611ab6565b9050919050565b60006020820190508181036000830152611d4581611af6565b9050919050565b60006020820190508181036000830152611d6581611b36565b9050919050565b6000602082019050611d816000830184611b76565b92915050565b6000602082019050611d9c6000830184611b85565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611dc982611f11565b9150611dd483611f11565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e0957611e08611f8d565b5b828201905092915050565b6000611e1f82611f11565b9150611e2a83611f11565b925082611e3a57611e39611fbc565b5b828204905092915050565b6000611e5082611f11565b9150611e5b83611f11565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e9457611e93611f8d565b5b828202905092915050565b6000611eaa82611f11565b9150611eb583611f11565b925082821015611ec857611ec7611f8d565b5b828203905092915050565b6000611ede82611ef1565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611f46578082015181840152602081019050611f2b565b83811115611f55576000848401525b50505050565b60006002820490506001821680611f7357607f821691505b60208210811415611f8757611f86611feb565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b61203481611ed3565b811461203f57600080fd5b50565b61204b81611f11565b811461205657600080fd5b5056fea26469706673582212208efb58851af57f63008eccede71cbf4f55f92c842e9e84a86624bcca60b193f064736f6c63430008000033",
  "devdoc": {
    "author": "Tenderize <info@tenderize.me>",
    "details": "TenderToken balances are dynamic and are calculated based on the accounts' shares and the total amount of Tokens controlled by the protocol. Account shares aren't normalized, so the contract also stores the sum of all shares to calculate each account's token balance which equals to: shares[account] * _getTotalPooledTokens() / _getTotalShares()",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "This value changes when `approve` or `transferFrom` is called.",
        "params": {
          "_owner": "address that approved the allowance",
          "_spender": "address that is allowed to spend the allowance"
        },
        "returns": {
          "_0": "amount '_spender' is allowed to spend from '_owner'"
        }
      },
      "approve(address,uint256)": {
        "details": "Emits an `Approval` event.Requirements: - `_spender` cannot be the zero address.The `_amount` argument is the amount of tokens, not shares.",
        "params": {
          "_amount": "amount of tokens to allow '_spender' to spend",
          "_spender": "address of the spender allowed to approve tokens from caller"
        },
        "returns": {
          "_0": "a boolean value indicating whether the operation succeeded."
        }
      },
      "balanceOf(address)": {
        "details": "Balances are dynamic and equal the `_account`'s share in the amount of the total Tokens controlled by the protocol. See `sharesOf`.",
        "params": {
          "_account": "address of the account to check the balance for"
        }
      },
      "burn(address,uint256)": {
        "details": "Only callable by contract ownerCalculates the amount of shares to destroy based on the specified '_amount' and destroy shares rather than burning tokens'_recipient' should also withdraw from Tenderizer atomically",
        "params": {
          "_account": "address to burn the tokens from",
          "_amount": "amount to burn"
        },
        "returns": {
          "_0": "a boolean value indicating whether the operation succeeded."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "the number of decimals for getting user representation of a token amount."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the zero address. - `_spender` must have allowance for the caller of at least `_subtractedValue`.",
        "params": {
          "_spender": "address of the spender allowed to approve tokens from caller",
          "_subtractedValue": "amount to subtract from current allowance"
        }
      },
      "getTotalPooledTokens()": {
        "details": "The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.",
        "returns": {
          "_0": "total amount of pooled tokens"
        }
      },
      "getTotalShares()": {
        "details": "The sum of all accounts' shares can be an arbitrary number, therefore it is necessary to store it in order to calculate each account's relative share.",
        "returns": {
          "_0": "total amount of shares"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "This is an alternative to `approve` that can be used as a mitigation for problems described in: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42Emits an `Approval` event indicating the updated allowance.Requirements: - `_spender` cannot be the the zero address.",
        "params": {
          "_addedValue": "amount to add to allowance",
          "_spender": "address of the spender allowed to approve tokens from caller"
        }
      },
      "mint(address,uint256)": {
        "details": "Only callable by contract ownerCalculates the amount of shares to create based on the specified '_amount' and creates new shares rather than minting actual tokens'_recipient' should also deposit into Tenderizer atomically to prevent diluation of existing particpants",
        "params": {
          "_amount": "amount to mint",
          "_recipient": "address to mint tokens for"
        },
        "returns": {
          "_0": "a boolean value indicating whether the operation succeeded."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setTotalPooledTokens(uint256)": {
        "details": "Only callable by contract owner",
        "params": {
          "_newTotalPooledTokens": "new amount of total tokens controlled by the Tenderizer"
        }
      },
      "sharesOf(address)": {
        "params": {
          "_account": "address of the account"
        },
        "returns": {
          "_0": "the amount of shares owned by `_account`."
        }
      },
      "sharesToTokens(uint256)": {
        "params": {
          "_shares": "the amount of shares to calculate the amount of tokens for"
        },
        "returns": {
          "_0": "the amount of tokens represented by the shares"
        }
      },
      "tokensToShares(uint256)": {
        "params": {
          "_tokens": "amount of tokens to calculate shares for"
        },
        "returns": {
          "_0": "nominal amount of shares the tokens represent"
        }
      },
      "totalSupply()": {
        "details": "Always equals to `_getTotalPooledTokens()` since token amount is pegged to the total amount of Tokens controlled by the protocol.",
        "returns": {
          "_0": "total supply"
        }
      },
      "transfer(address,uint256)": {
        "details": "Emits a `Transfer` event.Requirements: - `_recipient` cannot be the zero address. - the caller must have a balance of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.",
        "params": {
          "_amount": "amount of tokens to transfer",
          "_recipient": "address of the recipient"
        },
        "returns": {
          "_0": "a boolean value indicating whether the operation succeeded."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Emits a `Transfer` event.Emits an `Approval` event indicating the updated allowance.Requirements: - `_sender` and `_recipient` cannot be the zero addresses. - `_sender` must have a balance of at least `_amount`. - the caller must have allowance for `_sender`'s tokens of at least `_amount`.The `_amount` argument is the amount of tokens, not shares.",
        "params": {
          "_recipient": "address of the recipient",
          "_sender": "address of the account to transfer tokens from"
        },
        "returns": {
          "_0": "a boolean value indicating whether the operation succeeded."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "allowances": {
        "details": "Allowances nominated in tokens, not token shares."
      },
      "shares": {
        "details": "Nominal amount of shares held by each account"
      },
      "totalPooledTokens": {
        "details": "Total amount of underlying tokens pooled"
      },
      "totalShares": {
        "details": "Total amount of outstanding shares"
      }
    },
    "title": "Interest-bearing ERC20-like token for Tenderize protocol.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "The remaining number of tokens that `_spender` is allowed to spend behalf of `_owner` through `transferFrom`. This is zero by default."
      },
      "approve(address,uint256)": {
        "notice": "Sets `_amount` as the allowance of `_spender` over the caller's tokens."
      },
      "balanceOf(address)": {
        "notice": "the amount of tokens owned by the `_account`."
      },
      "burn(address,uint256)": {
        "notice": "Burns '_amount' of tokens from '_recipient'"
      },
      "decimals()": {
        "notice": "The number of decimals the TenderToken uses"
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`."
      },
      "getTotalPooledTokens()": {
        "notice": "Total amount of underlying tokens controlled by the Tenderizer"
      },
      "getTotalShares()": {
        "notice": "The total amount of shares in existence."
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`."
      },
      "mint(address,uint256)": {
        "notice": "Mints '_amount' of tokens for '_recipient'"
      },
      "setTotalPooledTokens(uint256)": {
        "notice": "Sets the total amount of pooled tokens controlled by the Tenderizer"
      },
      "sharesOf(address)": {
        "notice": "The amount of shares owned by an account"
      },
      "sharesToTokens(uint256)": {
        "notice": "The amount of tokens that corresponds to `_shares` token shares."
      },
      "tokensToShares(uint256)": {
        "notice": "The amount of shares that corresponds to `_tokens` protocol-controlled Tokens."
      },
      "totalSupply()": {
        "notice": "The total supply of tender tokens in existence"
      },
      "transfer(address,uint256)": {
        "notice": "Transfers `_amount` tokens from the caller's account to the `_recipient` account."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers `_amount` tokens from `_sender` to `_recipient` using the allowance mechanism. `_amount` is then deducted from the caller's allowance."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4776,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4778,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4830,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "totalShares",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4833,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "totalPooledTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4838,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "shares",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4845,
        "contract": "contracts/token/TenderToken.sol:TenderToken",
        "label": "allowances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}