{
  "address": "0x512eF8A8B7020E18EC76104578402045C66334a0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_param",
          "type": "string"
        }
      ],
      "name": "GovernanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPrincipal",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectLiquidityFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "contract ILivepeer",
          "name": "_livepeer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "node",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingLiquidityFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "setNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        }
      ],
      "name": "setSteak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "steak",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2da24a539d0af52c68271f7b93cd8a8292435bc9224239c90d31b48a3a146d20",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x512eF8A8B7020E18EC76104578402045C66334a0",
    "transactionIndex": 26,
    "gasUsed": "2480632",
    "logsBloom": "0x
    "blockHash": "0xc3d3d49bce63dd5bc088c2d8f4ebc84a5fff76e74c4433a023812b6415df07d4",
    "transactionHash": "0x2da24a539d0af52c68271f7b93cd8a8292435bc9224239c90d31b48a3a146d20",
    "logs": [],
    "blockNumber": 8843726,
    "cumulativeGasUsed": "7981541",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a9f830c0f7a81c19f770a0b97bdb89ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_param\",\"type\":\"string\"}],\"name\":\"GovernanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrincipal\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectLiquidityFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"contract ILivepeer\",\"name\":\"_livepeer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingLiquidityFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"setNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"}],\"name\":\"setSteak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards()\":{\"details\":\"Only callable by controller\"},\"deposit(address,uint256)\":{\"details\":\"only callable by Controllerdoesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be stakedrequires '_amount' to be approved by '_from'\",\"params\":{\"_amount\":\"amount deposited\",\"_from\":\"account that deposits\"}},\"stake(address,uint256)\":{\"details\":\"If '_account' is not specified, stake towards the default addressIf '_amount' is 0, stake the entire current token balance of the TenderizerOnly callable by controller\",\"params\":{\"_account\":\"account to stake to in the underlying protocol\",\"_amount\":\"amount to stake\"}},\"unstake(address,uint256)\":{\"details\":\"If '_account' is not specified, stake towards the default addressIf '_amount' is 0, unstake the entire amount staked towards _accountOnly callable by controller\",\"params\":{\"_account\":\"account to unstake from in the underlying protocol\",\"_amount\":\"amount to unstake\"}},\"withdraw(address,uint256)\":{\"details\":\"If '_amount' isn't specified all unstake tokens by '_account' will be withdrawnRequires '_account' to have unstaked prior to calling withdrawOnly callable by controller\",\"params\":{\"_account\":\"account requesting the withdrawam\",\"_amount\":\"amount to withdraw (optional)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claim staking rewards for the underlying protocol\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit tokens in Tenderizer\"},\"stake(address,uint256)\":{\"notice\":\"Stake '_amount' of tokens to '_account'\"},\"unstake(address,uint256)\":{\"notice\":\"Unstake '_amount' of tokens from '_account'\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw '_amount' of tokens previously unstaked by '_account'\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tenderizer/integrations/livepeer/Livepeer.sol\":\"Livepeer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0x789126d80f77ab810cb8091f87377656efd37a532fb6299b814d42e516c09f2f\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/IOneInch.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOneInch {\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    ) external view returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 flags\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256[] calldata parts,\\n        uint256[] calldata flags,\\n        uint256[] calldata destTokenEthPriceTimesGasPrices\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory returnAmounts,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function swapMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256[] calldata flags\\n    ) external payable returns (uint256 returnAmount);\\n}\\n\",\"keccak256\":\"0x704342c0db760c331a87ed51c03c4d423ac9a4810229bbfe80e3a1bc3ad808c1\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITenderizer {\\n    function deposit(address _from, uint256 _amount) external;\\n\\n    function stake(address _node, uint256 _amount) external;\\n\\n    function unstake(address _account, uint256 _amount) external;\\n\\n    function withdraw(address _account, uint256 _amount) external;\\n\\n    function claimRewards() external;\\n\\n    function collectFees() external returns (uint256);\\n\\n    function collectLiquidityFees() external returns (uint256);\\n\\n    function totalStakedTokens() external view returns (uint256);\\n\\n    // Governance\\n\\n    function setController(address _controller) external;\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n}\\n\",\"keccak256\":\"0x7444b6d881daf48a25d32a5cfd747b787e39a24e8cbeed106533fc81d88f5f0e\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/Tenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ITenderizer.sol\\\";\\n\\nabstract contract Tenderizer is Initializable, ITenderizer {\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    IERC20 public steak;\\n    address public node;\\n\\n    address public controller;\\n\\n    uint256 public protocolFee;\\n    uint256 public liquidityFee;\\n    uint256 public pendingFees; // pending protocol fees since last distribution\\n    uint256 public pendingLiquidityFees;\\n    uint256 public currentPrincipal; // Principal since last claiming earnings\\n\\n    // Events\\n    event Deposit(address indexed from, uint256 amount);\\n    event Stake(address indexed node, uint256 amount);\\n    event Unstake(address indexed from, address indexed node, uint256 amount);\\n    event Withdraw(address indexed from, uint256 amount);\\n    event RewardsClaimed(uint256 rewards, uint256 currentPrincipal);\\n    event ProtocolFeeCollected(uint256 amount);\\n    event LiquidityFeeCollected(uint256 amount);\\n    event GovernanceUpdate(string _param);\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    function _initialize(\\n        IERC20 _steak,\\n        address _node,\\n        address _controller\\n    ) internal initializer {\\n        steak = _steak;\\n        node = _node;\\n        protocolFee = 25 * 1e15; // 2.5%\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer\\n     * @param _from account that deposits\\n     * @param _amount amount deposited\\n     * @dev only callable by Controller\\n     * @dev doesn't actually stakes the tokens but aggregates the balance in the tenderizer\\n        awaiting to be staked\\n     * @dev requires '_amount' to be approved by '_from'\\n     */\\n    function deposit(address _from, uint256 _amount) external override onlyController {\\n        _deposit(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake '_amount' of tokens to '_account'\\n     * @param _account account to stake to in the underlying protocol\\n     * @param _amount amount to stake\\n     * @dev If '_account' is not specified, stake towards the default address\\n     * @dev If '_amount' is 0, stake the entire current token balance of the Tenderizer\\n     * @dev Only callable by controller\\n     */\\n    function stake(address _account, uint256 _amount) external override onlyController {\\n        // Execute state updates\\n        // approve pendingTokens for staking\\n        // Stake tokens\\n        _stake(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake '_amount' of tokens from '_account'\\n     * @param _account account to unstake from in the underlying protocol\\n     * @param _amount amount to unstake\\n     * @dev If '_account' is not specified, stake towards the default address\\n     * @dev If '_amount' is 0, unstake the entire amount staked towards _account\\n     * @dev Only callable by controller\\n     */\\n    function unstake(address _account, uint256 _amount) external override onlyController {\\n        // Execute state updates to pending withdrawals\\n        // Unstake tokens\\n        _unstake(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw '_amount' of tokens previously unstaked by '_account'\\n     * @param _account account requesting the withdrawam\\n     * @param _amount amount to withdraw (optional)\\n     * @dev If '_amount' isn't specified all unstake tokens by '_account' will be withdrawn\\n     * @dev Requires '_account' to have unstaked prior to calling withdraw\\n     * @dev Only callable by controller\\n     */\\n    function withdraw(address _account, uint256 _amount) external override onlyController {\\n        // Execute state updates to pending withdrawals\\n        // Transfer tokens to _account\\n        _withdraw(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Claim staking rewards for the underlying protocol\\n     * @dev Only callable by controller\\n     */\\n    function claimRewards() external override onlyController {\\n        // Claim rewards\\n        // If received staking rewards in steak don't automatically compound, add to pendingTokens\\n        // Swap tokens with address != steak to steak\\n        // Add steak from swap to pendingTokens\\n        _claimRewards();\\n    }\\n\\n    function setController(address _controller) external override onlyController {\\n        require(_controller != address(0), \\\"ZERO_ADDRESS\\\");\\n        controller = _controller;\\n        emit GovernanceUpdate(\\\"CONTROLLER\\\");\\n    }\\n\\n    function setNode(address _node) external virtual override onlyController {\\n        require(_node != address(0), \\\"ZERO_ADDRESS\\\");\\n        node = _node;\\n        emit GovernanceUpdate(\\\"NODE\\\");\\n    }\\n\\n    function setSteak(IERC20 _steak) external virtual override onlyController {\\n        require(address(_steak) != address(0), \\\"ZERO_ADDRESS\\\");\\n        steak = _steak;\\n        emit GovernanceUpdate(\\\"STEAK\\\");\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external virtual override onlyController {\\n        protocolFee = _protocolFee;\\n        emit GovernanceUpdate(\\\"PROTOCOL_FEE\\\");\\n    }\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external virtual override onlyController {\\n        liquidityFee = _liquidityFee;\\n    }\\n\\n    function setStakingContract(address _stakingContract) external override onlyController {\\n        _setStakingContract(_stakingContract);\\n    }\\n\\n    function collectFees() external override onlyController returns (uint256) {\\n        return _collectFees();\\n    }\\n\\n    function collectLiquidityFees() external override onlyController returns (uint256) {\\n        return _collectLiquidityFees();\\n    }\\n\\n    function totalStakedTokens() external view override returns (uint256) {\\n        return _totalStakedTokens();\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal virtual;\\n\\n    function _stake(address _account, uint256 _amount) internal virtual;\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal virtual;\\n\\n    function _withdraw(address _account, uint256 _amount) internal virtual;\\n\\n    function _claimRewards() internal virtual;\\n\\n    function _collectFees() internal virtual returns (uint256) {\\n        // set pendingFees to 0\\n        // Controller will mint tenderToken and distribute it\\n        uint256 before = pendingFees;\\n        pendingFees = 0;\\n        emit ProtocolFeeCollected(before);\\n        return before;\\n    }\\n\\n    function _collectLiquidityFees() internal virtual returns (uint256) {\\n        // set pendingFees to 0\\n        // Controller will mint tenderToken and distribute it\\n        uint256 before = pendingLiquidityFees;\\n        pendingLiquidityFees = 0;\\n        emit LiquidityFeeCollected(before);\\n        return before;\\n    }\\n\\n    function _totalStakedTokens() internal view virtual returns (uint256);\\n\\n    // Internal governance functions\\n    function _setStakingContract(address _stakingContract) internal virtual;\\n}\\n\",\"keccak256\":\"0xcf860a3541178c39a8412d08ec68d08703ccfe5b713a7c4d9923bd55cb183121\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/integrations/livepeer/ILivepeer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ninterface ILivepeer {\\n    function bond(uint256 _amount, address _to) external;\\n\\n    function unbond(uint256 _amount) external;\\n\\n    function rebond(uint256 _unbondingLockId) external;\\n\\n    function rebondFromUnbonded(address _to, uint256 _unbondingLockId) external;\\n\\n    function withdrawStake(uint256 _unbondingLockId) external;\\n\\n    function withdrawFees() external;\\n\\n    function claimEarnings(uint256 _endRound) external;\\n\\n    function pendingFees(address _delegator, uint256 _endRound) external view returns (uint256);\\n\\n    function pendingStake(address _delegator, uint256 _endRound) external view returns (uint256);\\n\\n    function getDelegator(address _delegator)\\n        external\\n        view\\n        returns (\\n            uint256 bondedAmount,\\n            uint256 fees,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            uint256 startRound,\\n            uint256 lastClaimRound,\\n            uint256 nextUnbondingLockId\\n        );\\n}\\n\",\"keccak256\":\"0xd64218414193209d861d0905357a1506caf7965ef1f1501869caadf4745caecf\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/integrations/livepeer/Livepeer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../libs/MathUtils.sol\\\";\\n\\nimport \\\"../../Tenderizer.sol\\\";\\nimport \\\"./ILivepeer.sol\\\";\\nimport \\\"../../../liquidity/IOneInch.sol\\\";\\n\\ncontract Livepeer is Tenderizer {\\n    uint256 private constant MAX_ROUND = 2**256 - 1;\\n\\n    IOneInch private constant oneInch = IOneInch(address(0));\\n\\n    ILivepeer livepeer;\\n\\n    struct unbondingLock {\\n        uint256 id;\\n        uint256 amount;\\n    }\\n\\n    mapping(address => unbondingLock) unbondingLocks;\\n    uint256 private nextUnbondingLockID;\\n\\n    uint256 private constant ethFees_threshold = 1**17;\\n\\n    function initialize(\\n        IERC20 _steak,\\n        ILivepeer _livepeer,\\n        address _node\\n    ) public {\\n        Tenderizer._initialize(_steak, _node, msg.sender);\\n        livepeer = _livepeer;\\n    }\\n\\n    function _deposit(address _from, uint256 _amount) internal override {\\n        currentPrincipal += _amount;\\n\\n        emit Deposit(_from, _amount);\\n    }\\n\\n    function _stake(address _node, uint256 _amount) internal override {\\n        // if no amount is specified, stake all available tokens\\n        uint256 amount = _amount;\\n        if (amount == 0) {\\n            amount = IERC20(steak).balanceOf(address(this));\\n        }\\n\\n        if (amount == 0) {\\n            return;\\n            // TODO: revert ?\\n        }\\n\\n        // if no _node is specified, stake towards the default node\\n        address node_ = _node;\\n        if (node_ == address(0)) {\\n            node_ = node;\\n        }\\n\\n        // approve amount to Livepeer protocol\\n        steak.approve(address(livepeer), amount);\\n\\n        // stake tokens\\n        livepeer.bond(amount, node_);\\n\\n        emit Stake(node_, amount);\\n    }\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal override {\\n        // Check that no withdrawal is pending\\n        require(unbondingLocks[_account].amount == 0, \\\"PENDING_WITHDRAWAL\\\");\\n\\n        uint256 amount = _amount;\\n        // Sanity check. Controller already checks user deposits and withdrawals > 0\\n        if (_account != controller) require(amount > 0, \\\"ZERO_AMOUNT\\\");\\n        if (amount == 0) {\\n            amount = livepeer.pendingStake(address(this), MAX_ROUND);\\n            require(amount > 0, \\\"ZERO_STAKE\\\");\\n        }\\n\\n        // if no _node is specified, stake towards the default node\\n        address node_ = _node;\\n        if (node_ == address(0)) {\\n            node_ = node;\\n        }\\n\\n        currentPrincipal -= amount;\\n\\n        // Unbond tokens\\n        livepeer.unbond(amount);\\n\\n        // Manage Livepeer unbonding locks\\n        uint256 unbondingLockID = nextUnbondingLockID;\\n        nextUnbondingLockID += 1;\\n\\n        unbondingLocks[_account] = unbondingLock({ id: unbondingLockID, amount: _amount });\\n\\n        emit Unstake(_account, node_, amount);\\n    }\\n\\n    function _withdraw(\\n        address _account,\\n        uint256 /*_amount*/\\n    ) internal override {\\n        // Check that a withdrawal is pending\\n        require(unbondingLocks[_account].amount > 0, \\\"NO_PENDING_WITHDRAWAL\\\");\\n\\n        // Store values from lock\\n        uint256 unbondingLockId = unbondingLocks[_account].id;\\n        uint256 amount = unbondingLocks[_account].amount;\\n\\n        // Remove it from the locks\\n        delete unbondingLocks[_account];\\n\\n        // Withdraw stake, transfers steak tokens to address(this)\\n        livepeer.withdrawStake(unbondingLockId);\\n\\n        // Transfer amount from unbondingLock to _account\\n        steak.transfer(_account, amount);\\n\\n        emit Withdraw(_account, amount);\\n    }\\n\\n    function _claimRewards() internal override {\\n        // Livepeer automatically compounds\\n        // The rewards is the difference between\\n        // pending stake and the latest cached stake amount\\n\\n        // TODO: Oh god this is going to be so costly\\n        // What if we gulp before this call so we have the updated state in getDelegator ? bond might be more costly\\n        // Let's just code this with everything we need and benchmark gas\\n\\n        // Account for LPT rewards\\n        address del = address(this);\\n        uint256 stake = livepeer.pendingStake(del, MAX_ROUND);\\n        uint256 ethFees = livepeer.pendingFees(del, MAX_ROUND);\\n        uint256 currentPrincipal_ = currentPrincipal;\\n\\n        uint256 rewards;\\n        if (stake >= currentPrincipal_) {\\n            rewards = stake - currentPrincipal_;\\n        }\\n\\n        // withdraw fees\\n        if (ethFees >= ethFees_threshold) {\\n            livepeer.withdrawFees();\\n\\n            // swap ETH fees for LPT\\n            if (address(oneInch) != address(0)) {\\n                uint256 swapAmount = address(this).balance;\\n                (uint256 returnAmount, uint256[] memory distribution) = oneInch.getExpectedReturn(\\n                    IERC20(address(0)),\\n                    steak,\\n                    swapAmount,\\n                    1,\\n                    0\\n                );\\n                uint256 swappedLPT = oneInch.swap(IERC20(address(0)), steak, swapAmount, returnAmount, distribution, 0);\\n                // Add swapped LPT to rewards\\n                rewards += swappedLPT;\\n            }\\n        }\\n\\n        // Substract protocol fee amount and add it to pendingFees\\n        uint256 _pendingFees = pendingFees + MathUtils.percOf(rewards, protocolFee);\\n        pendingFees = _pendingFees;\\n        uint256 _liquidityFees = pendingLiquidityFees + MathUtils.percOf(rewards, liquidityFee);\\n        pendingLiquidityFees = _liquidityFees;\\n        // Add current pending stake minus fees and set it as current principal\\n        currentPrincipal = stake - _pendingFees - _liquidityFees;\\n\\n        emit RewardsClaimed(rewards, currentPrincipal);\\n    }\\n\\n    function _totalStakedTokens() internal view override returns (uint256) {\\n        return currentPrincipal;\\n    }\\n\\n    function _setStakingContract(address _stakingContract) internal override {\\n        livepeer = ILivepeer(_stakingContract);\\n\\n        emit GovernanceUpdate(\\\"STAKING_CONTRACT\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfb81ce34eab48af8de6227ac2c57b58d62ade3fe7aadd0d9b95f3b732763ea7b\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards()": {
        "details": "Only callable by controller"
      },
      "deposit(address,uint256)": {
        "details": "only callable by Controllerdoesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be stakedrequires '_amount' to be approved by '_from'",
        "params": {
          "_amount": "amount deposited",
          "_from": "account that deposits"
        }
      },
      "stake(address,uint256)": {
        "details": "If '_account' is not specified, stake towards the default addressIf '_amount' is 0, stake the entire current token balance of the TenderizerOnly callable by controller",
        "params": {
          "_account": "account to stake to in the underlying protocol",
          "_amount": "amount to stake"
        }
      },
      "unstake(address,uint256)": {
        "details": "If '_account' is not specified, stake towards the default addressIf '_amount' is 0, unstake the entire amount staked towards _accountOnly callable by controller",
        "params": {
          "_account": "account to unstake from in the underlying protocol",
          "_amount": "amount to unstake"
        }
      },
      "withdraw(address,uint256)": {
        "details": "If '_amount' isn't specified all unstake tokens by '_account' will be withdrawnRequires '_account' to have unstaked prior to calling withdrawOnly callable by controller",
        "params": {
          "_account": "account requesting the withdrawam",
          "_amount": "amount to withdraw (optional)"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Claim staking rewards for the underlying protocol"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit tokens in Tenderizer"
      },
      "stake(address,uint256)": {
        "notice": "Stake '_amount' of tokens to '_account'"
      },
      "unstake(address,uint256)": {
        "notice": "Unstake '_amount' of tokens from '_account'"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw '_amount' of tokens previously unstaked by '_account'"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2179,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "steak",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)740"
      },
      {
        "astId": 2181,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "node",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2183,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2185,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2187,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "liquidityFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2189,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "pendingFees",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2191,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "pendingLiquidityFees",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2193,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "currentPrincipal",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3359,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "livepeer",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(ILivepeer)3331"
      },
      {
        "astId": 3369,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "unbondingLocks",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(unbondingLock)3364_storage)"
      },
      {
        "astId": 3371,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "nextUnbondingLockID",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)740": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILivepeer)3331": {
        "encoding": "inplace",
        "label": "contract ILivepeer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(unbondingLock)3364_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Livepeer.unbondingLock)",
        "numberOfBytes": "32",
        "value": "t_struct(unbondingLock)3364_storage"
      },
      "t_struct(unbondingLock)3364_storage": {
        "encoding": "inplace",
        "label": "struct Livepeer.unbondingLock",
        "members": [
          {
            "astId": 3361,
            "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3363,
            "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}