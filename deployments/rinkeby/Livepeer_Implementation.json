{
  "address": "0x9AA1C42901A03141fca33fF612cE519115F83C7E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_param",
          "type": "string"
        }
      ],
      "name": "GovernanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrincipal",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectLiquidityFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "contract ILivepeer",
          "name": "_livepeer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "node",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingLiquidityFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "setNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oneInch",
          "type": "address"
        }
      ],
      "name": "setOneInchContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        }
      ],
      "name": "setSteak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "steak",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unstakeLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c4555e3083719140504a62a2995b7df3d43c277fc1e07acfe8bb50232d0e0d7",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x9AA1C42901A03141fca33fF612cE519115F83C7E",
    "transactionIndex": 16,
    "gasUsed": "2594870",
    "logsBloom": "0x
    "blockHash": "0x65514b3ce4b2f398ef3e9ae49eacffd9899d7e46ed18acbbc61fa9c10f2d35b9",
    "transactionHash": "0x4c4555e3083719140504a62a2995b7df3d43c277fc1e07acfe8bb50232d0e0d7",
    "logs": [],
    "blockNumber": 9062288,
    "cumulativeGasUsed": "4588982",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "5e4415e4e8939fd733caffc58c66dbb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_param\",\"type\":\"string\"}],\"name\":\"GovernanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrincipal\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectLiquidityFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"contract ILivepeer\",\"name\":\"_livepeer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingLiquidityFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"setNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oneInch\",\"type\":\"address\"}],\"name\":\"setOneInchContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"}],\"name\":\"setSteak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards()\":{\"details\":\"Only callable by controller\"},\"deposit(address,uint256)\":{\"details\":\"only callable by Controllerdoesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be stakedrequires '_amount' to be approved by '_from'\",\"params\":{\"_amount\":\"amount deposited\",\"_from\":\"account that deposits\"}},\"stake(address,uint256)\":{\"details\":\"If '_account' is not specified, stake towards the default addressIf '_amount' is 0, stake the entire current token balance of the TenderizerOnly callable by controller\",\"params\":{\"_account\":\"account to stake to in the underlying protocol\",\"_amount\":\"amount to stake\"}},\"unstake(address,uint256)\":{\"details\":\"If '_account' is not specified, stake towards the default addressIf '_amount' is 0, unstake the entire amount staked towards _accountOnly callable by controller\",\"params\":{\"_account\":\"account to unstake from in the underlying protocol\",\"_amount\":\"amount to unstake\"}},\"withdraw(address,uint256)\":{\"details\":\"If '_amount' isn't specified all unstake tokens by '_account' will be withdrawnRequires '_account' to have unstaked prior to calling withdrawOnly callable by controller\",\"params\":{\"_account\":\"account requesting the withdrawam\",\"_unstakeLockID\":\"ID for the lock to request the withdraw for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claim staking rewards for the underlying protocol\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit tokens in Tenderizer\"},\"stake(address,uint256)\":{\"notice\":\"Stake '_amount' of tokens to '_account'\"},\"unstake(address,uint256)\":{\"notice\":\"Unstake '_amount' of tokens from '_account'\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw '_amount' of tokens previously unstaked by '_account'\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tenderizer/integrations/livepeer/Livepeer.sol\":\"Livepeer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0x789126d80f77ab810cb8091f87377656efd37a532fb6299b814d42e516c09f2f\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/IOneInch.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOneInch {\\n    function getExpectedReturn(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags // See constants in IOneSplit.sol\\n    ) external view returns (uint256 returnAmount, uint256[] memory distribution);\\n\\n    function getExpectedReturnWithGas(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 parts,\\n        uint256 flags, // See constants in IOneSplit.sol\\n        uint256 destTokenEthPriceTimesGasPrice\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 returnAmount,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function swap(\\n        IERC20 fromToken,\\n        IERC20 destToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256 flags\\n    ) external payable returns (uint256 returnAmount);\\n\\n    function getExpectedReturnWithGasMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256[] calldata parts,\\n        uint256[] calldata flags,\\n        uint256[] calldata destTokenEthPriceTimesGasPrices\\n    )\\n        external\\n        view\\n        returns (\\n            uint256[] memory returnAmounts,\\n            uint256 estimateGasAmount,\\n            uint256[] memory distribution\\n        );\\n\\n    function swapMulti(\\n        IERC20[] calldata tokens,\\n        uint256 amount,\\n        uint256 minReturn,\\n        uint256[] calldata distribution,\\n        uint256[] calldata flags\\n    ) external payable returns (uint256 returnAmount);\\n}\\n\",\"keccak256\":\"0x704342c0db760c331a87ed51c03c4d423ac9a4810229bbfe80e3a1bc3ad808c1\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITenderizer {\\n    function deposit(address _from, uint256 _amount) external;\\n\\n    function stake(address _node, uint256 _amount) external;\\n\\n    function unstake(address _account, uint256 _amount) external returns (uint256 unstakeLockID);\\n\\n    function withdraw(address _account, uint256 _unstakeLockID) external;\\n\\n    function claimRewards() external;\\n\\n    function collectFees() external returns (uint256);\\n\\n    function collectLiquidityFees() external returns (uint256);\\n\\n    function totalStakedTokens() external view returns (uint256);\\n\\n    // Governance\\n\\n    function setController(address _controller) external;\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n}\\n\",\"keccak256\":\"0x816bb3d844a8dbec33ba6255a7994dbab27fb078fbf66d00baf9e84aa7884448\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/Tenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ITenderizer.sol\\\";\\n\\nabstract contract Tenderizer is Initializable, ITenderizer {\\n\\n    struct UnstakeLock {\\n        uint256 amount;\\n        address account;\\n    }\\n\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    IERC20 public steak;\\n    address public node;\\n\\n    address public controller;\\n\\n    uint256 public protocolFee;\\n    uint256 public liquidityFee;\\n    uint256 public pendingFees; // pending protocol fees since last distribution\\n    uint256 public pendingLiquidityFees;\\n    uint256 public currentPrincipal; // Principal since last claiming earnings\\n\\n    mapping (uint256 => UnstakeLock) public unstakeLocks;\\n    uint256 lastUnstakeLockID;\\n\\n    // Events\\n    event Deposit(address indexed from, uint256 amount);\\n    event Stake(address indexed node, uint256 amount);\\n    event Unstake(address indexed from, address indexed node, uint256 amount, uint256 unstakeLockID);\\n    event Withdraw(address indexed from, uint256 amount, uint256 unstakeLockID);\\n    event RewardsClaimed(uint256 rewards, uint256 currentPrincipal, uint256 oldPrincipal);\\n    event ProtocolFeeCollected(uint256 amount);\\n    event LiquidityFeeCollected(uint256 amount);\\n    event GovernanceUpdate(string _param);\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    function _initialize(\\n        IERC20 _steak,\\n        address _node,\\n        address _controller\\n    ) internal initializer {\\n        steak = _steak;\\n        node = _node;\\n        protocolFee = 25 * 1e15; // 2.5%\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer\\n     * @param _from account that deposits\\n     * @param _amount amount deposited\\n     * @dev only callable by Controller\\n     * @dev doesn't actually stakes the tokens but aggregates the balance in the tenderizer\\n        awaiting to be staked\\n     * @dev requires '_amount' to be approved by '_from'\\n     */\\n    function deposit(address _from, uint256 _amount) external override onlyController {\\n        _deposit(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake '_amount' of tokens to '_account'\\n     * @param _account account to stake to in the underlying protocol\\n     * @param _amount amount to stake\\n     * @dev If '_account' is not specified, stake towards the default address\\n     * @dev If '_amount' is 0, stake the entire current token balance of the Tenderizer\\n     * @dev Only callable by controller\\n     */\\n    function stake(address _account, uint256 _amount) external override onlyController {\\n        // Execute state updates\\n        // approve pendingTokens for staking\\n        // Stake tokens\\n        _stake(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake '_amount' of tokens from '_account'\\n     * @param _account account to unstake from in the underlying protocol\\n     * @param _amount amount to unstake\\n     * @dev If '_account' is not specified, stake towards the default address\\n     * @dev If '_amount' is 0, unstake the entire amount staked towards _account\\n     * @dev Only callable by controller\\n     */\\n    function unstake(address _account, uint256 _amount) \\n        external\\n        override\\n        onlyController \\n        returns (uint256 unstakeLockID) {\\n        // Execute state updates to pending withdrawals\\n        // Unstake tokens\\n        return _unstake(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw '_amount' of tokens previously unstaked by '_account'\\n      * @param _unstakeLockID ID for the lock to request the withdraw for\\n     * @param _account account requesting the withdrawam\\n     * @dev If '_amount' isn't specified all unstake tokens by '_account' will be withdrawn\\n     * @dev Requires '_account' to have unstaked prior to calling withdraw\\n     * @dev Only callable by controller\\n     */\\n    function withdraw(address _account, uint256 _unstakeLockID) \\n        external\\n        override\\n        onlyController {\\n        // Execute state updates to pending withdrawals\\n        // Transfer tokens to _account\\n        _withdraw(_account, _unstakeLockID);\\n    }\\n\\n    /**\\n     * @notice Claim staking rewards for the underlying protocol\\n     * @dev Only callable by controller\\n     */\\n    function claimRewards() external override onlyController {\\n        // Claim rewards\\n        // If received staking rewards in steak don't automatically compound, add to pendingTokens\\n        // Swap tokens with address != steak to steak\\n        // Add steak from swap to pendingTokens\\n        _claimRewards();\\n    }\\n\\n    function setController(address _controller) external override onlyController {\\n        require(_controller != address(0), \\\"ZERO_ADDRESS\\\");\\n        controller = _controller;\\n        emit GovernanceUpdate(\\\"CONTROLLER\\\");\\n    }\\n\\n    function setNode(address _node) external virtual override onlyController {\\n        require(_node != address(0), \\\"ZERO_ADDRESS\\\");\\n        node = _node;\\n        emit GovernanceUpdate(\\\"NODE\\\");\\n    }\\n\\n    function setSteak(IERC20 _steak) external virtual override onlyController {\\n        require(address(_steak) != address(0), \\\"ZERO_ADDRESS\\\");\\n        steak = _steak;\\n        emit GovernanceUpdate(\\\"STEAK\\\");\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external virtual override onlyController {\\n        protocolFee = _protocolFee;\\n        emit GovernanceUpdate(\\\"PROTOCOL_FEE\\\");\\n    }\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external virtual override onlyController {\\n        liquidityFee = _liquidityFee;\\n        emit GovernanceUpdate(\\\"LIQUIDITY_FEE\\\");\\n    }\\n\\n    function setStakingContract(address _stakingContract) external override onlyController {\\n        _setStakingContract(_stakingContract);\\n    }\\n\\n    function collectFees() external override onlyController returns (uint256) {\\n        return _collectFees();\\n    }\\n\\n    function collectLiquidityFees() external override onlyController returns (uint256) {\\n        return _collectLiquidityFees();\\n    }\\n\\n    function totalStakedTokens() external view override returns (uint256) {\\n        return _totalStakedTokens();\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal virtual;\\n\\n    function _stake(address _account, uint256 _amount) internal virtual;\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal virtual returns (uint256  unstakeLockID);\\n\\n    function _withdraw(address _account, uint256 _unstakeLockID) internal virtual;\\n\\n    function _claimRewards() internal virtual;\\n\\n    function _collectFees() internal virtual returns (uint256) {\\n        // set pendingFees to 0\\n        // Controller will mint tenderToken and distribute it\\n        uint256 before = pendingFees;\\n        pendingFees = 0;\\n        emit ProtocolFeeCollected(before);\\n        return before;\\n    }\\n\\n    function _collectLiquidityFees() internal virtual returns (uint256) {\\n        // set pendingFees to 0\\n        // Controller will mint tenderToken and distribute it\\n        uint256 before = pendingLiquidityFees;\\n        pendingLiquidityFees = 0;\\n        emit LiquidityFeeCollected(before);\\n        return before;\\n    }\\n\\n    function _totalStakedTokens() internal view virtual returns (uint256);\\n\\n    // Internal governance functions\\n    function _setStakingContract(address _stakingContract) internal virtual;\\n}\\n\",\"keccak256\":\"0x3733435597053645d13dc2e16c8c8991f6f2d463298e687d931640ce2dd7caf9\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/integrations/livepeer/ILivepeer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ninterface ILivepeer {\\n    function bond(uint256 _amount, address _to) external;\\n\\n    function unbond(uint256 _amount) external;\\n\\n    function rebond(uint256 _unbondingLockId) external;\\n\\n    function rebondFromUnbonded(address _to, uint256 _unbondingLockId) external;\\n\\n    function withdrawStake(uint256 _unbondingLockId) external;\\n\\n    function withdrawFees() external;\\n\\n    function claimEarnings(uint256 _endRound) external;\\n\\n    function pendingFees(address _delegator, uint256 _endRound) external view returns (uint256);\\n\\n    function pendingStake(address _delegator, uint256 _endRound) external view returns (uint256);\\n\\n    function getDelegator(address _delegator)\\n        external\\n        view\\n        returns (\\n            uint256 bondedAmount,\\n            uint256 fees,\\n            address delegateAddress,\\n            uint256 delegatedAmount,\\n            uint256 startRound,\\n            uint256 lastClaimRound,\\n            uint256 nextUnbondingLockId\\n        );\\n}\\n\",\"keccak256\":\"0xd64218414193209d861d0905357a1506caf7965ef1f1501869caadf4745caecf\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/integrations/livepeer/Livepeer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../libs/MathUtils.sol\\\";\\n\\nimport \\\"../../Tenderizer.sol\\\";\\nimport \\\"./ILivepeer.sol\\\";\\nimport \\\"../../../liquidity/IOneInch.sol\\\";\\n\\ncontract Livepeer is Tenderizer {\\n    uint256 private constant MAX_ROUND = 2**256 - 1;\\n\\n    IOneInch private oneInch;\\n\\n    ILivepeer livepeer;\\n\\n    uint256 private constant ethFees_threshold = 1**17;\\n\\n    function initialize(\\n        IERC20 _steak,\\n        ILivepeer _livepeer,\\n        address _node\\n    ) public {\\n        Tenderizer._initialize(_steak, _node, msg.sender);\\n        livepeer = _livepeer;\\n    }\\n\\n    function _deposit(address _from, uint256 _amount) internal override {\\n        currentPrincipal += _amount;\\n\\n        emit Deposit(_from, _amount);\\n    }\\n\\n    function _stake(address _node, uint256 _amount) internal override {\\n        // if no amount is specified, stake all available tokens\\n        uint256 amount = _amount;\\n        if (amount == 0) {\\n            amount = IERC20(steak).balanceOf(address(this));\\n        }\\n\\n        if (amount == 0) {\\n            return;\\n            // TODO: revert ?\\n        }\\n\\n        // if no _node is specified, stake towards the default node\\n        address node_ = _node;\\n        if (node_ == address(0)) {\\n            node_ = node;\\n        }\\n\\n        // approve amount to Livepeer protocol\\n        steak.approve(address(livepeer), amount);\\n\\n        // stake tokens\\n        livepeer.bond(amount, node_);\\n\\n        emit Stake(node_, amount);\\n    }\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal override returns (uint256 unstakeLockID) {\\n        uint256 amount = _amount;\\n\\n        // Sanity check. Controller already checks user deposits and withdrawals > 0\\n        if (_account != controller) require(amount > 0, \\\"ZERO_AMOUNT\\\");\\n        if (amount == 0) {\\n            amount = livepeer.pendingStake(address(this), MAX_ROUND);\\n            require(amount > 0, \\\"ZERO_STAKE\\\");\\n        }\\n\\n        // if no _node is specified, stake towards the default node\\n        address node_ = _node;\\n        if (node_ == address(0)) {\\n            node_ = node;\\n        }\\n\\n        currentPrincipal -= amount;\\n\\n        // Unbond tokens\\n        livepeer.unbond(amount);\\n\\n        // Manage Livepeer unbonding locks\\n       unstakeLockID = ++lastUnstakeLockID;\\n       unstakeLocks[unstakeLockID] = UnstakeLock({ amount: amount, account: _account });\\n       \\n       emit Unstake(_account, node_, amount, unstakeLockID);\\n    }\\n\\n    function _withdraw(\\n        address _account,\\n        uint256 _unstakeID\\n    ) internal override {\\n        UnstakeLock storage lock = unstakeLocks[_unstakeID];\\n        address account = lock.account;\\n        uint256 amount = lock.amount;\\n\\n        require(account == _account, \\\"ACCOUNT_MISTMATCH\\\");\\n        // Check that a withdrawal is pending\\n        require(amount > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        // Remove it from the locks\\n        delete unstakeLocks[_unstakeID];\\n\\n        // Withdraw stake, transfers steak tokens to address(this)\\n        livepeer.withdrawStake(_unstakeID);\\n\\n        // Transfer amount from unbondingLock to _account\\n        steak.transfer(account, amount);\\n\\n        emit Withdraw(account, amount, _unstakeID);\\n    }\\n\\n    function _claimRewards() internal override {\\n        // Livepeer automatically compounds\\n        // The rewards is the difference between\\n        // pending stake and the latest cached stake amount\\n\\n        // TODO: Oh god this is going to be so costly\\n        // What if we gulp before this call so we have the updated state in getDelegator ? bond might be more costly\\n        // Let's just code this with everything we need and benchmark gas\\n\\n        // Account for LPT rewards\\n        address del = address(this);\\n        uint256 stake = livepeer.pendingStake(del, MAX_ROUND);\\n        uint256 ethFees = livepeer.pendingFees(del, MAX_ROUND);\\n        uint256 currentPrincipal_ = currentPrincipal;\\n\\n        uint256 rewards;\\n        if (stake >= currentPrincipal_) {\\n            rewards = stake - currentPrincipal_;\\n        }\\n\\n        // withdraw fees\\n        uint256  swappedLPT;\\n        if (ethFees >= ethFees_threshold) {\\n            livepeer.withdrawFees();\\n\\n            // swap ETH fees for LPT\\n            if (address(oneInch) != address(0)) {\\n                uint256 swapAmount = address(this).balance;\\n                (uint256 returnAmount, uint256[] memory distribution) = oneInch.getExpectedReturn(\\n                    IERC20(address(0)),\\n                    steak,\\n                    swapAmount,\\n                    20,\\n                    0\\n                );\\n                swappedLPT = oneInch.swap(IERC20(address(0)), steak, swapAmount, returnAmount, distribution, 0);\\n                // Add swapped LPT to rewards\\n                rewards += swappedLPT;\\n            }\\n        }\\n\\n        // Substract protocol fee amount and add it to pendingFees\\n        uint256 _pendingFees = pendingFees + MathUtils.percOf(rewards, protocolFee);\\n        pendingFees = _pendingFees;\\n        uint256 _liquidityFees = pendingLiquidityFees + MathUtils.percOf(rewards, liquidityFee);\\n        pendingLiquidityFees = _liquidityFees;\\n        // Add current pending stake minus fees and set it as current principal\\n        uint256 newPrincipal = stake + swappedLPT - _pendingFees - _liquidityFees;\\n        currentPrincipal =  newPrincipal;\\n\\n        emit RewardsClaimed(rewards, newPrincipal, currentPrincipal_);\\n    }\\n\\n    function _totalStakedTokens() internal view override returns (uint256) {\\n        return currentPrincipal;\\n    }\\n\\n    function _setStakingContract(address _stakingContract) internal override {\\n        livepeer = ILivepeer(_stakingContract);\\n\\n        emit GovernanceUpdate(\\\"STAKING_CONTRACT\\\");\\n    }\\n\\n    function setOneInchContract(address _oneInch) external onlyController {\\n        oneInch = IOneInch(_oneInch);\\n    }\\n}\\n\",\"keccak256\":\"0xff4070a27d0929790d3bbdc6b2e1a59c0956f4711f7097171150c084b12a5f28\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612e1e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c8063adc9772e116100de578063c21d5ab711610097578063d70754ec11610071578063d70754ec146103d8578063f3fef3a3146103f6578063f5492b9514610412578063f77c47911461044357610173565b8063c21d5ab71461036e578063c2a672e01461038a578063c8796572146103ba57610173565b8063adc9772e146102c2578063afef75d2146102de578063b089af31146102fa578063b0e21e8a14610318578063c08a458414610336578063c0c53b8b1461035257610173565b806351c669c01161013057806351c669c0146102145780636f19031514610232578063787dce3d1461025057806392eefe9b1461026c57806398118cb4146102885780639dd373b9146102a657610173565b8063224438d1146101785780632a777db214610196578063357bf15c146101b4578063372500ab146101d05780633ae73259146101da57806347e7ef24146101f8575b600080fd5b610180610461565b60405161018d919061298b565b60405180910390f35b61019e610467565b6040516101ab919061298b565b60405180910390f35b6101ce60048036038101906101c991906122b5565b61046d565b005b6101d8610506565b005b6101e261056a565b6040516101ef919061298b565b60405180910390f35b610212600480360381019061020d91906121d8565b610579565b005b61021c6105e1565b604051610229919061298b565b60405180910390f35b61023a6105e7565b6040516102479190612755565b60405180910390f35b61026a600480360381019061026591906122b5565b61060d565b005b610286600480360381019061028191906121af565b6106a6565b005b6102906107e9565b60405161029d919061298b565b60405180910390f35b6102c060048036038101906102bb91906121af565b6107ef565b005b6102dc60048036038101906102d791906121d8565b610855565b005b6102f860048036038101906102f3919061223d565b6108bd565b005b610302610a00565b60405161030f919061298b565b60405180910390f35b610320610a69565b60405161032d919061298b565b60405180910390f35b610350600480360381019061034b91906121af565b610a6f565b005b61036c60048036038101906103679190612266565b610b0d565b005b610388600480360381019061038391906121af565b610b5e565b005b6103a4600480360381019061039f91906121d8565b610ca1565b6040516103b1919061298b565b60405180910390f35b6103c2610d11565b6040516103cf919061298b565b60405180910390f35b6103e0610d7a565b6040516103ed9190612711565b60405180910390f35b610410600480360381019061040b91906121d8565b610da0565b005b61042c600480360381019061042791906122b5565b610e08565b60405161043a9291906129a6565b60405180910390f35b61044b610e4c565b6040516104589190612711565b60405180910390f35b60055481565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c757600080fd5b806004819055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516104fb9061296b565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056057600080fd5b610568610e72565b565b60006105746113ac565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d357600080fd5b6105dd82826113b6565b5050565b60075481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066757600080fd5b806003819055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa60405161069b9061292b565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610770576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610767906128ab565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516107de9061288b565b60405180910390a150565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461084957600080fd5b61085281611421565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108af57600080fd5b6108b9828261149a565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e906128ab565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516109f5906128eb565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a5c57600080fd5b610a6461177b565b905090565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac957600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b188382336117c9565b81600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bb857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f906128ab565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa604051610c969061290b565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cfd57600080fd5b610d0983600084611976565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d6d57600080fd5b610d75611d50565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfa57600080fd5b610e048282611d9e565b5050565b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003090506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610ef692919061272c565b60206040518083038186803b158015610f0e57600080fd5b505afa158015610f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4691906122de565b90506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f595f1cc847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610fc792919061272c565b60206040518083038186803b158015610fdf57600080fd5b505afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101791906122de565b90506000600754905060008184106110385781846110359190612bb7565b90505b6000600184106112f157600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663476343ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112f0576000479050600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663085e2c5b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686601460006040518663ffffffff1660e01b81526004016111a9959493929190612770565b60006040518083038186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111fe9190612307565b91509150600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2a7515e60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686868660006040518763ffffffff1660e01b815260040161128a969594939291906127c3565b602060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906122de565b935083856112ea9190612ad6565b94505050505b5b60006112ff83600354612071565b60055461130c9190612ad6565b905080600581905550600061132384600454612071565b6006546113309190612ad6565b90508060068190555060008183858a6113499190612ad6565b6113539190612bb7565b61135d9190612bb7565b9050806007819055507f74a6c69d87eba241366f58629be99186a3a0a4c378d615da3b48c616c2e4e284858288604051611399939291906129f8565b60405180910390a1505050505050505050565b6000600754905090565b80600760008282546113c89190612ad6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051611415919061298b565b60405180910390a25050565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa60405161148f9061284b565b60405180910390a150565b6000819050600081141561155657600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115039190612711565b60206040518083038186803b15801561151b57600080fd5b505afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155391906122de565b90505b60008114156115655750611777565b6000839050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115c557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161164492919061272c565b602060405180830381600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190612214565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b78d27dc83836040518363ffffffff1660e01b81526004016116f49291906129a6565b600060405180830381600087803b15801561170e57600080fd5b505af1158015611722573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a8360405161176c919061298b565b60405180910390a250505b5050565b600080600654905060006006819055507f1d8f4bab53e84801fc35b88b53df72a998fa29c92e6fc65d412c4677d0d88c62816040516117ba919061298b565b60405180910390a18091505090565b600060019054906101000a900460ff16806117ef575060008054906101000a900460ff16155b61182e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611825906128cb565b60405180910390fd5b60008060019054906101000a900460ff16159050801561187e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b83600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506658d15e1762800060038190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156119705760008060016101000a81548160ff0219169083151502179055505b50505050565b600080829050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611a155760008111611a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0b9061294b565b60405180910390fd5b5b6000811415611b3157600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611a9b92919061272c565b60206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb91906122de565b905060008111611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b279061282b565b60405180910390fd5b5b6000849050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b9157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b8160076000828254611ba39190612bb7565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327de9e32836040518263ffffffff1660e01b8152600401611c05919061298b565b600060405180830381600087803b158015611c1f57600080fd5b505af1158015611c33573d6000803e3d6000fd5b50505050600960008154611c4690612c9f565b919050819055925060405180604001604052808381526020018773ffffffffffffffffffffffffffffffffffffffff16815250600860008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef8486604051611d3f9291906129cf565b60405180910390a350509392505050565b600080600554905060006005819055507f414d7d8eae12f648156e75499fc0a5a10aa84f2745c6f791b0453cb17f1e17fa81604051611d8f919061298b565b60405180910390a18091505090565b600060086000838152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000826000015490508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4c9061286b565b60405180910390fd5b60008111611e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8f9061294b565b60405180910390fd5b600860008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325d5971f856040518263ffffffff1660e01b8152600401611f38919061298b565b600060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b50505050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611fc792919061272c565b602060405180830381600087803b158015611fe157600080fd5b505af1158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120199190612214565b508173ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882866040516120629291906129cf565b60405180910390a25050505050565b6000683635c9adc5dea0000082846120899190612b5d565b6120939190612b2c565b905092915050565b60006120ae6120a984612a60565b612a2f565b905080838252602082019050828560208602820111156120cd57600080fd5b60005b858110156120fd57816120e3888261219a565b8452602084019350602083019250506001810190506120d0565b5050509392505050565b60008135905061211681612d75565b92915050565b600082601f83011261212d57600080fd5b815161213d84826020860161209b565b91505092915050565b60008151905061215581612d8c565b92915050565b60008135905061216a81612da3565b92915050565b60008135905061217f81612dba565b92915050565b60008135905061219481612dd1565b92915050565b6000815190506121a981612dd1565b92915050565b6000602082840312156121c157600080fd5b60006121cf84828501612107565b91505092915050565b600080604083850312156121eb57600080fd5b60006121f985828601612107565b925050602061220a85828601612185565b9150509250929050565b60006020828403121561222657600080fd5b600061223484828501612146565b91505092915050565b60006020828403121561224f57600080fd5b600061225d8482850161215b565b91505092915050565b60008060006060848603121561227b57600080fd5b60006122898682870161215b565b935050602061229a86828701612170565b92505060406122ab86828701612107565b9150509250925092565b6000602082840312156122c757600080fd5b60006122d584828501612185565b91505092915050565b6000602082840312156122f057600080fd5b60006122fe8482850161219a565b91505092915050565b6000806040838503121561231a57600080fd5b60006123288582860161219a565b925050602083015167ffffffffffffffff81111561234557600080fd5b6123518582860161211c565b9150509250929050565b600061236783836126f3565b60208301905092915050565b61237c81612beb565b82525050565b600061238d82612a9c565b6123978185612ab4565b93506123a283612a8c565b8060005b838110156123d35781516123ba888261235b565b97506123c583612aa7565b9250506001810190506123a6565b5085935050505092915050565b6123e981612c57565b82525050565b6123f881612c7b565b82525050565b61240781612c8d565b82525050565b600061241a600a83612ac5565b91507f5a45524f5f5354414b45000000000000000000000000000000000000000000006000830152602082019050919050565b600061245a601083612ac5565b91507f5354414b494e475f434f4e5452414354000000000000000000000000000000006000830152602082019050919050565b600061249a601183612ac5565b91507f4143434f554e545f4d4953544d415443480000000000000000000000000000006000830152602082019050919050565b60006124da600a83612ac5565b91507f434f4e54524f4c4c4552000000000000000000000000000000000000000000006000830152602082019050919050565b600061251a600c83612ac5565b91507f5a45524f5f4144445245535300000000000000000000000000000000000000006000830152602082019050919050565b600061255a602e83612ac5565b91507f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008301527f647920696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006125c0600583612ac5565b91507f535445414b0000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612600600483612ac5565b91507f4e4f4445000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612640600c83612ac5565b91507f50524f544f434f4c5f46454500000000000000000000000000000000000000006000830152602082019050919050565b6000612680600b83612ac5565b91507f5a45524f5f414d4f554e540000000000000000000000000000000000000000006000830152602082019050919050565b60006126c0600d83612ac5565b91507f4c49515549444954595f464545000000000000000000000000000000000000006000830152602082019050919050565b6126fc81612c4d565b82525050565b61270b81612c4d565b82525050565b60006020820190506127266000830184612373565b92915050565b60006040820190506127416000830185612373565b61274e6020830184612702565b9392505050565b600060208201905061276a60008301846123e0565b92915050565b600060a08201905061278560008301886123e0565b61279260208301876123e0565b61279f6040830186612702565b6127ac60608301856123fe565b6127b960808301846123ef565b9695505050505050565b600060c0820190506127d860008301896123e0565b6127e560208301886123e0565b6127f26040830187612702565b6127ff6060830186612702565b81810360808301526128118185612382565b905061282060a08301846123ef565b979650505050505050565b600060208201905081810360008301526128448161240d565b9050919050565b600060208201905081810360008301526128648161244d565b9050919050565b600060208201905081810360008301526128848161248d565b9050919050565b600060208201905081810360008301526128a4816124cd565b9050919050565b600060208201905081810360008301526128c48161250d565b9050919050565b600060208201905081810360008301526128e48161254d565b9050919050565b60006020820190508181036000830152612904816125b3565b9050919050565b60006020820190508181036000830152612924816125f3565b9050919050565b6000602082019050818103600083015261294481612633565b9050919050565b6000602082019050818103600083015261296481612673565b9050919050565b60006020820190508181036000830152612984816126b3565b9050919050565b60006020820190506129a06000830184612702565b92915050565b60006040820190506129bb6000830185612702565b6129c86020830184612373565b9392505050565b60006040820190506129e46000830185612702565b6129f16020830184612702565b9392505050565b6000606082019050612a0d6000830186612702565b612a1a6020830185612702565b612a276040830184612702565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715612a5657612a55612d46565b5b8060405250919050565b600067ffffffffffffffff821115612a7b57612a7a612d46565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612ae182612c4d565b9150612aec83612c4d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b2157612b20612ce8565b5b828201905092915050565b6000612b3782612c4d565b9150612b4283612c4d565b925082612b5257612b51612d17565b5b828204905092915050565b6000612b6882612c4d565b9150612b7383612c4d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612bac57612bab612ce8565b5b828202905092915050565b6000612bc282612c4d565b9150612bcd83612c4d565b925082821015612be057612bdf612ce8565b5b828203905092915050565b6000612bf682612c2d565b9050919050565b60008115159050919050565b6000612c1482612beb565b9050919050565b6000612c2682612beb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612c6282612c69565b9050919050565b6000612c7482612c2d565b9050919050565b6000612c8682612c4d565b9050919050565b6000612c9882612c4d565b9050919050565b6000612caa82612c4d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612cdd57612cdc612ce8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d7e81612beb565b8114612d8957600080fd5b50565b612d9581612bfd565b8114612da057600080fd5b50565b612dac81612c09565b8114612db757600080fd5b50565b612dc381612c1b565b8114612dce57600080fd5b50565b612dda81612c4d565b8114612de557600080fd5b5056fea2646970667358221220d1f00b1699c776d27ec87fef26a7b7ad0edd4479c49f2bc3ac1088a7446a19da64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c8063adc9772e116100de578063c21d5ab711610097578063d70754ec11610071578063d70754ec146103d8578063f3fef3a3146103f6578063f5492b9514610412578063f77c47911461044357610173565b8063c21d5ab71461036e578063c2a672e01461038a578063c8796572146103ba57610173565b8063adc9772e146102c2578063afef75d2146102de578063b089af31146102fa578063b0e21e8a14610318578063c08a458414610336578063c0c53b8b1461035257610173565b806351c669c01161013057806351c669c0146102145780636f19031514610232578063787dce3d1461025057806392eefe9b1461026c57806398118cb4146102885780639dd373b9146102a657610173565b8063224438d1146101785780632a777db214610196578063357bf15c146101b4578063372500ab146101d05780633ae73259146101da57806347e7ef24146101f8575b600080fd5b610180610461565b60405161018d919061298b565b60405180910390f35b61019e610467565b6040516101ab919061298b565b60405180910390f35b6101ce60048036038101906101c991906122b5565b61046d565b005b6101d8610506565b005b6101e261056a565b6040516101ef919061298b565b60405180910390f35b610212600480360381019061020d91906121d8565b610579565b005b61021c6105e1565b604051610229919061298b565b60405180910390f35b61023a6105e7565b6040516102479190612755565b60405180910390f35b61026a600480360381019061026591906122b5565b61060d565b005b610286600480360381019061028191906121af565b6106a6565b005b6102906107e9565b60405161029d919061298b565b60405180910390f35b6102c060048036038101906102bb91906121af565b6107ef565b005b6102dc60048036038101906102d791906121d8565b610855565b005b6102f860048036038101906102f3919061223d565b6108bd565b005b610302610a00565b60405161030f919061298b565b60405180910390f35b610320610a69565b60405161032d919061298b565b60405180910390f35b610350600480360381019061034b91906121af565b610a6f565b005b61036c60048036038101906103679190612266565b610b0d565b005b610388600480360381019061038391906121af565b610b5e565b005b6103a4600480360381019061039f91906121d8565b610ca1565b6040516103b1919061298b565b60405180910390f35b6103c2610d11565b6040516103cf919061298b565b60405180910390f35b6103e0610d7a565b6040516103ed9190612711565b60405180910390f35b610410600480360381019061040b91906121d8565b610da0565b005b61042c600480360381019061042791906122b5565b610e08565b60405161043a9291906129a6565b60405180910390f35b61044b610e4c565b6040516104589190612711565b60405180910390f35b60055481565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c757600080fd5b806004819055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516104fb9061296b565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461056057600080fd5b610568610e72565b565b60006105746113ac565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d357600080fd5b6105dd82826113b6565b5050565b60075481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461066757600080fd5b806003819055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa60405161069b9061292b565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610770576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610767906128ab565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516107de9061288b565b60405180910390a150565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461084957600080fd5b61085281611421565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108af57600080fd5b6108b9828261149a565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e906128ab565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516109f5906128eb565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a5c57600080fd5b610a6461177b565b905090565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac957600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610b188382336117c9565b81600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bb857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f906128ab565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa604051610c969061290b565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cfd57600080fd5b610d0983600084611976565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d6d57600080fd5b610d75611d50565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfa57600080fd5b610e048282611d9e565b5050565b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60003090506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610ef692919061272c565b60206040518083038186803b158015610f0e57600080fd5b505afa158015610f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4691906122de565b90506000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f595f1cc847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610fc792919061272c565b60206040518083038186803b158015610fdf57600080fd5b505afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101791906122de565b90506000600754905060008184106110385781846110359190612bb7565b90505b6000600184106112f157600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663476343ee6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156110ac57600080fd5b505af11580156110c0573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112f0576000479050600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663085e2c5b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686601460006040518663ffffffff1660e01b81526004016111a9959493929190612770565b60006040518083038186803b1580156111c157600080fd5b505afa1580156111d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111fe9190612307565b91509150600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2a7515e60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686868660006040518763ffffffff1660e01b815260040161128a969594939291906127c3565b602060405180830381600087803b1580156112a457600080fd5b505af11580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906122de565b935083856112ea9190612ad6565b94505050505b5b60006112ff83600354612071565b60055461130c9190612ad6565b905080600581905550600061132384600454612071565b6006546113309190612ad6565b90508060068190555060008183858a6113499190612ad6565b6113539190612bb7565b61135d9190612bb7565b9050806007819055507f74a6c69d87eba241366f58629be99186a3a0a4c378d615da3b48c616c2e4e284858288604051611399939291906129f8565b60405180910390a1505050505050505050565b6000600754905090565b80600760008282546113c89190612ad6565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051611415919061298b565b60405180910390a25050565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa60405161148f9061284b565b60405180910390a150565b6000819050600081141561155657600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115039190612711565b60206040518083038186803b15801561151b57600080fd5b505afa15801561152f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155391906122de565b90505b60008114156115655750611777565b6000839050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115c557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b815260040161164492919061272c565b602060405180830381600087803b15801561165e57600080fd5b505af1158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190612214565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b78d27dc83836040518363ffffffff1660e01b81526004016116f49291906129a6565b600060405180830381600087803b15801561170e57600080fd5b505af1158015611722573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a8360405161176c919061298b565b60405180910390a250505b5050565b600080600654905060006006819055507f1d8f4bab53e84801fc35b88b53df72a998fa29c92e6fc65d412c4677d0d88c62816040516117ba919061298b565b60405180910390a18091505090565b600060019054906101000a900460ff16806117ef575060008054906101000a900460ff16155b61182e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611825906128cb565b60405180910390fd5b60008060019054906101000a900460ff16159050801561187e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b83600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506658d15e1762800060038190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156119705760008060016101000a81548160ff0219169083151502179055505b50505050565b600080829050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611a155760008111611a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0b9061294b565b60405180910390fd5b5b6000811415611b3157600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639d0b2c7a307fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611a9b92919061272c565b60206040518083038186803b158015611ab357600080fd5b505afa158015611ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aeb91906122de565b905060008111611b30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b279061282b565b60405180910390fd5b5b6000849050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b9157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b8160076000828254611ba39190612bb7565b92505081905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327de9e32836040518263ffffffff1660e01b8152600401611c05919061298b565b600060405180830381600087803b158015611c1f57600080fd5b505af1158015611c33573d6000803e3d6000fd5b50505050600960008154611c4690612c9f565b919050819055925060405180604001604052808381526020018773ffffffffffffffffffffffffffffffffffffffff16815250600860008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef8486604051611d3f9291906129cf565b60405180910390a350509392505050565b600080600554905060006005819055507f414d7d8eae12f648156e75499fc0a5a10aa84f2745c6f791b0453cb17f1e17fa81604051611d8f919061298b565b60405180910390a18091505090565b600060086000838152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000826000015490508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4c9061286b565b60405180910390fd5b60008111611e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8f9061294b565b60405180910390fd5b600860008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166325d5971f856040518263ffffffff1660e01b8152600401611f38919061298b565b600060405180830381600087803b158015611f5257600080fd5b505af1158015611f66573d6000803e3d6000fd5b50505050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401611fc792919061272c565b602060405180830381600087803b158015611fe157600080fd5b505af1158015611ff5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120199190612214565b508173ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56882866040516120629291906129cf565b60405180910390a25050505050565b6000683635c9adc5dea0000082846120899190612b5d565b6120939190612b2c565b905092915050565b60006120ae6120a984612a60565b612a2f565b905080838252602082019050828560208602820111156120cd57600080fd5b60005b858110156120fd57816120e3888261219a565b8452602084019350602083019250506001810190506120d0565b5050509392505050565b60008135905061211681612d75565b92915050565b600082601f83011261212d57600080fd5b815161213d84826020860161209b565b91505092915050565b60008151905061215581612d8c565b92915050565b60008135905061216a81612da3565b92915050565b60008135905061217f81612dba565b92915050565b60008135905061219481612dd1565b92915050565b6000815190506121a981612dd1565b92915050565b6000602082840312156121c157600080fd5b60006121cf84828501612107565b91505092915050565b600080604083850312156121eb57600080fd5b60006121f985828601612107565b925050602061220a85828601612185565b9150509250929050565b60006020828403121561222657600080fd5b600061223484828501612146565b91505092915050565b60006020828403121561224f57600080fd5b600061225d8482850161215b565b91505092915050565b60008060006060848603121561227b57600080fd5b60006122898682870161215b565b935050602061229a86828701612170565b92505060406122ab86828701612107565b9150509250925092565b6000602082840312156122c757600080fd5b60006122d584828501612185565b91505092915050565b6000602082840312156122f057600080fd5b60006122fe8482850161219a565b91505092915050565b6000806040838503121561231a57600080fd5b60006123288582860161219a565b925050602083015167ffffffffffffffff81111561234557600080fd5b6123518582860161211c565b9150509250929050565b600061236783836126f3565b60208301905092915050565b61237c81612beb565b82525050565b600061238d82612a9c565b6123978185612ab4565b93506123a283612a8c565b8060005b838110156123d35781516123ba888261235b565b97506123c583612aa7565b9250506001810190506123a6565b5085935050505092915050565b6123e981612c57565b82525050565b6123f881612c7b565b82525050565b61240781612c8d565b82525050565b600061241a600a83612ac5565b91507f5a45524f5f5354414b45000000000000000000000000000000000000000000006000830152602082019050919050565b600061245a601083612ac5565b91507f5354414b494e475f434f4e5452414354000000000000000000000000000000006000830152602082019050919050565b600061249a601183612ac5565b91507f4143434f554e545f4d4953544d415443480000000000000000000000000000006000830152602082019050919050565b60006124da600a83612ac5565b91507f434f4e54524f4c4c4552000000000000000000000000000000000000000000006000830152602082019050919050565b600061251a600c83612ac5565b91507f5a45524f5f4144445245535300000000000000000000000000000000000000006000830152602082019050919050565b600061255a602e83612ac5565b91507f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008301527f647920696e697469616c697a65640000000000000000000000000000000000006020830152604082019050919050565b60006125c0600583612ac5565b91507f535445414b0000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612600600483612ac5565b91507f4e4f4445000000000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612640600c83612ac5565b91507f50524f544f434f4c5f46454500000000000000000000000000000000000000006000830152602082019050919050565b6000612680600b83612ac5565b91507f5a45524f5f414d4f554e540000000000000000000000000000000000000000006000830152602082019050919050565b60006126c0600d83612ac5565b91507f4c49515549444954595f464545000000000000000000000000000000000000006000830152602082019050919050565b6126fc81612c4d565b82525050565b61270b81612c4d565b82525050565b60006020820190506127266000830184612373565b92915050565b60006040820190506127416000830185612373565b61274e6020830184612702565b9392505050565b600060208201905061276a60008301846123e0565b92915050565b600060a08201905061278560008301886123e0565b61279260208301876123e0565b61279f6040830186612702565b6127ac60608301856123fe565b6127b960808301846123ef565b9695505050505050565b600060c0820190506127d860008301896123e0565b6127e560208301886123e0565b6127f26040830187612702565b6127ff6060830186612702565b81810360808301526128118185612382565b905061282060a08301846123ef565b979650505050505050565b600060208201905081810360008301526128448161240d565b9050919050565b600060208201905081810360008301526128648161244d565b9050919050565b600060208201905081810360008301526128848161248d565b9050919050565b600060208201905081810360008301526128a4816124cd565b9050919050565b600060208201905081810360008301526128c48161250d565b9050919050565b600060208201905081810360008301526128e48161254d565b9050919050565b60006020820190508181036000830152612904816125b3565b9050919050565b60006020820190508181036000830152612924816125f3565b9050919050565b6000602082019050818103600083015261294481612633565b9050919050565b6000602082019050818103600083015261296481612673565b9050919050565b60006020820190508181036000830152612984816126b3565b9050919050565b60006020820190506129a06000830184612702565b92915050565b60006040820190506129bb6000830185612702565b6129c86020830184612373565b9392505050565b60006040820190506129e46000830185612702565b6129f16020830184612702565b9392505050565b6000606082019050612a0d6000830186612702565b612a1a6020830185612702565b612a276040830184612702565b949350505050565b6000604051905081810181811067ffffffffffffffff82111715612a5657612a55612d46565b5b8060405250919050565b600067ffffffffffffffff821115612a7b57612a7a612d46565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000612ae182612c4d565b9150612aec83612c4d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b2157612b20612ce8565b5b828201905092915050565b6000612b3782612c4d565b9150612b4283612c4d565b925082612b5257612b51612d17565b5b828204905092915050565b6000612b6882612c4d565b9150612b7383612c4d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612bac57612bab612ce8565b5b828202905092915050565b6000612bc282612c4d565b9150612bcd83612c4d565b925082821015612be057612bdf612ce8565b5b828203905092915050565b6000612bf682612c2d565b9050919050565b60008115159050919050565b6000612c1482612beb565b9050919050565b6000612c2682612beb565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612c6282612c69565b9050919050565b6000612c7482612c2d565b9050919050565b6000612c8682612c4d565b9050919050565b6000612c9882612c4d565b9050919050565b6000612caa82612c4d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612cdd57612cdc612ce8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d7e81612beb565b8114612d8957600080fd5b50565b612d9581612bfd565b8114612da057600080fd5b50565b612dac81612c09565b8114612db757600080fd5b50565b612dc381612c1b565b8114612dce57600080fd5b50565b612dda81612c4d565b8114612de557600080fd5b5056fea2646970667358221220d1f00b1699c776d27ec87fef26a7b7ad0edd4479c49f2bc3ac1088a7446a19da64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards()": {
        "details": "Only callable by controller"
      },
      "deposit(address,uint256)": {
        "details": "only callable by Controllerdoesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be stakedrequires '_amount' to be approved by '_from'",
        "params": {
          "_amount": "amount deposited",
          "_from": "account that deposits"
        }
      },
      "stake(address,uint256)": {
        "details": "If '_account' is not specified, stake towards the default addressIf '_amount' is 0, stake the entire current token balance of the TenderizerOnly callable by controller",
        "params": {
          "_account": "account to stake to in the underlying protocol",
          "_amount": "amount to stake"
        }
      },
      "unstake(address,uint256)": {
        "details": "If '_account' is not specified, stake towards the default addressIf '_amount' is 0, unstake the entire amount staked towards _accountOnly callable by controller",
        "params": {
          "_account": "account to unstake from in the underlying protocol",
          "_amount": "amount to unstake"
        }
      },
      "withdraw(address,uint256)": {
        "details": "If '_amount' isn't specified all unstake tokens by '_account' will be withdrawnRequires '_account' to have unstaked prior to calling withdrawOnly callable by controller",
        "params": {
          "_account": "account requesting the withdrawam",
          "_unstakeLockID": "ID for the lock to request the withdraw for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Claim staking rewards for the underlying protocol"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit tokens in Tenderizer"
      },
      "stake(address,uint256)": {
        "notice": "Stake '_amount' of tokens to '_account'"
      },
      "unstake(address,uint256)": {
        "notice": "Unstake '_amount' of tokens from '_account'"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw '_amount' of tokens previously unstaked by '_account'"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2291,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "steak",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)780"
      },
      {
        "astId": 2293,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "node",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2295,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2297,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2299,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "liquidityFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2301,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "pendingFees",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2303,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "pendingLiquidityFees",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2305,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "currentPrincipal",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2310,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "unstakeLocks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(UnstakeLock)2282_storage)"
      },
      {
        "astId": 2312,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "lastUnstakeLockID",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3551,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "oneInch",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IOneInch)1693"
      },
      {
        "astId": 3554,
        "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
        "label": "livepeer",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ILivepeer)3532"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)780": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILivepeer)3532": {
        "encoding": "inplace",
        "label": "contract ILivepeer",
        "numberOfBytes": "20"
      },
      "t_contract(IOneInch)1693": {
        "encoding": "inplace",
        "label": "contract IOneInch",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(UnstakeLock)2282_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Tenderizer.UnstakeLock)",
        "numberOfBytes": "32",
        "value": "t_struct(UnstakeLock)2282_storage"
      },
      "t_struct(UnstakeLock)2282_storage": {
        "encoding": "inplace",
        "label": "struct Tenderizer.UnstakeLock",
        "members": [
          {
            "astId": 2279,
            "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2281,
            "contract": "contracts/tenderizer/integrations/livepeer/Livepeer.sol:Livepeer",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}