{
  "address": "0x9655eC05050d83cA0162147DA67c732D20b4f65b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        },
        {
          "internalType": "contract ITenderToken",
          "name": "_tenderToken",
          "type": "address"
        },
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "_esp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        }
      ],
      "name": "batchExecute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectLiquidityFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esp",
      "outputs": [
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gulp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "migrateToNewTenderizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "_esp",
          "type": "address"
        }
      ],
      "name": "setEsp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITenderFarm",
          "name": "_tenderFarm",
          "type": "address"
        }
      ],
      "name": "setTenderFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "steak",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderFarm",
      "outputs": [
        {
          "internalType": "contract ITenderFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderToken",
      "outputs": [
        {
          "internalType": "contract ITenderToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderizer",
      "outputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4e6999529d633db6f45e8603d4c3619dfe0940bef52de9a08114bfe6c87c63a",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x9655eC05050d83cA0162147DA67c732D20b4f65b",
    "transactionIndex": 10,
    "gasUsed": "2495872",
    "logsBloom": "0x
    "blockHash": "0x050db6660449a819e7f7a4e3f8e2b999b698a01668454f26b3766e7786a3d877",
    "transactionHash": "0xf4e6999529d633db6f45e8603d4c3619dfe0940bef52de9a08114bfe6c87c63a",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 9146726,
        "transactionHash": "0xf4e6999529d633db6f45e8603d4c3619dfe0940bef52de9a08114bfe6c87c63a",
        "address": "0x9655eC05050d83cA0162147DA67c732D20b4f65b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x050db6660449a819e7f7a4e3f8e2b999b698a01668454f26b3766e7786a3d877"
      }
    ],
    "blockNumber": 9146726,
    "cumulativeGasUsed": "3921156",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7F63C78456D836B9C385932c3A9A8678c4FD9960",
    "0x42Df57138BfCa61339eEB41f0D5E8728EB0cE101",
    "0x10F249f2CD19F444418145A03B2AB49695EE86d7",
    "0xF92fbD1bd56e047c5A7A1f3d4b6A2973288506d1"
  ],
  "solcInputHash": "b7051145c1b6661ee356a26cc998fc4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"},{\"internalType\":\"contract ITenderToken\",\"name\":\"_tenderToken\",\"type\":\"address\"},{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"_esp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"batchExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectLiquidityFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esp\",\"outputs\":[{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gulp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"migrateToNewTenderizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"_esp\",\"type\":\"address\"}],\"name\":\"setEsp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITenderFarm\",\"name\":\"_tenderFarm\",\"type\":\"address\"}],\"name\":\"setTenderFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderFarm\",\"outputs\":[{\"internalType\":\"contract ITenderFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderToken\",\"outputs\":[{\"internalType\":\"contract ITenderToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderizer\",\"outputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"batchExecute(address[],uint256[],bytes[])\":{\"details\":\"Every target to its value, data via it's corresponding indexonly callable by owner(gov)\",\"params\":{\"_datas\":\"array of call datas - check ethers.interface.encodeFunctionData()\",\"_targets\":\"array of target addresses for the contract call\",\"_values\":\"array of ether values to be transeffered with the transactions\"}},\"collectFees()\":{\"details\":\"mints equal number of tender tokens to the owneronly callable by owner(gov)\"},\"collectLiquidityFees()\":{\"details\":\"mints equal number of tender tokens to the tenderFarmonly callable by owner(gov)\"},\"deposit(uint256)\":{\"details\":\"calls Tenderizer to deposit tokens and updates total pooled tokensequal amount of tenderTokens are minted for the callerrequires '_amount' to be approved by '_from'\",\"params\":{\"_amount\":\"amount deposited\"}},\"execute(address,uint256,bytes)\":{\"details\":\"only callable by owner(gov)\",\"params\":{\"_data\":\"call data - check ethers.interface.encodeFunctionData()\",\"_target\":\"target address for the contract call\",\"_value\":\"ether value to be transeffered with the transaction\"}},\"gulp()\":{\"details\":\"deposit() only aggregates stake in the tenderizer, while gulp will perform the actual stake callonly callable by owner(gov)\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"rebase()\":{\"details\":\"only callable by owner(gov)\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setEsp(address)\":{\"details\":\"only callable by owner(gov)\",\"params\":{\"_esp\":\"Elastic Supply Pool contract address\"}},\"setTenderFarm(address)\":{\"details\":\"only callable by owner(gov)\",\"params\":{\"_tenderFarm\":\"TenderFarm contract address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(uint256)\":{\"details\":\"calls Tenderizer to unstake tokens and updates total pooled tokensequal amount of tenderTokens are burned from the userunstaking functionality varies by the protocol, check tenderizer.unstake()\",\"params\":{\"_amount\":\"amount deposited\"},\"returns\":{\"unstakeLockID\":\"\"}},\"withdraw(uint256)\":{\"details\":\"tokens need to be unstaked before they can be withdrawncaller address should match the user address in lock\",\"params\":{\"_unstakeLockID\":\"lockID of the unstake\"}}},\"title\":\"Controller contract for a Tenderizer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchExecute(address[],uint256[],bytes[])\":{\"notice\":\"Exectutes a batch of transaction on behalf of the controller\"},\"collectFees()\":{\"notice\":\"Collect pending protocol fees from Tenderizer\"},\"collectLiquidityFees()\":{\"notice\":\"Collect pending liquidity provider fees from Tenderizer\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens in Tenderizer to earn staking rewards\"},\"execute(address,uint256,bytes)\":{\"notice\":\"Exectutes a transaction on behalf of the controller\"},\"gulp()\":{\"notice\":\"Gulp stakes any unstaked token balance held by the Tenderizer\"},\"rebase()\":{\"notice\":\"Rebase will stake pending deposits, claim rewards,  resync the liquidity pool and collect fees\"},\"setEsp(address)\":{\"notice\":\"Set Elastic Supply Pool contract\"},\"setTenderFarm(address)\":{\"notice\":\"Set TenderFarm contract\"},\"unlock(uint256)\":{\"notice\":\"Unlock staked tokens\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws unstaked tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./token/ITenderToken.sol\\\";\\nimport \\\"./tenderizer/ITenderizer.sol\\\";\\nimport \\\"./liquidity/IElasticSupplyPool.sol\\\";\\nimport \\\"./liquidity/ITenderFarm.sol\\\";\\n\\n/**\\n * @title Controller contract for a Tenderizer\\n */\\n\\ncontract Controller is Ownable, ReentrancyGuard {\\n    IERC20 public steak;\\n    ITenderizer public tenderizer;\\n    ITenderToken public tenderToken;\\n    IElasticSupplyPool public esp;\\n    ITenderFarm public tenderFarm;\\n\\n    constructor(\\n        IERC20 _steak,\\n        ITenderizer _tenderizer,\\n        ITenderToken _tenderToken,\\n        IElasticSupplyPool _esp\\n    ) {\\n        steak = _steak;\\n        tenderizer = _tenderizer;\\n        // TODO: consider deploying these contracts using factories and proxies\\n        // from the constructutor so that deploying a new system is only deploying a single contract\\n        tenderToken = _tenderToken;\\n        esp = _esp;\\n    }\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer to earn staking rewards\\n     * @param _amount amount deposited\\n     * @dev calls Tenderizer to deposit tokens and updates total pooled tokens\\n     * @dev equal amount of tenderTokens are minted for the caller\\n     * @dev requires '_amount' to be approved by '_from'\\n     */\\n    function deposit(uint256 _amount) public {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        // mint tenderTokens\\n        require(tenderToken.mint(msg.sender, _amount), \\\"TENDER_MINT_FAILED\\\");\\n\\n        tenderizer.deposit(msg.sender, _amount);\\n\\n        _updateTotalPooledTokens();\\n\\n        // Transfer tokens to tenderizer\\n        require(steak.transferFrom(msg.sender, address(tenderizer), _amount), \\\"STEAK_TRANSFERFROM_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice Unlock staked tokens\\n     * @param _amount amount deposited\\n     * @return unstakeLockID \\n     * @dev calls Tenderizer to unstake tokens and updates total pooled tokens\\n     * @dev equal amount of tenderTokens are burned from the user\\n     * @dev unstaking functionality varies by the protocol, check tenderizer.unstake()\\n     */\\n    function unlock(uint256 _amount) public nonReentrant returns (uint256 unstakeLockID) {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n        // Burn tenderTokens\\n        require(tenderToken.burn(msg.sender, _amount), \\\"TENDER_BURN_FAILED\\\");\\n\\n        // Unstake tokens for pending withdrawal\\n        unstakeLockID = tenderizer.unstake(msg.sender, _amount);\\n\\n        // update total pooled tokens\\n        _updateTotalPooledTokens();\\n    }\\n\\n    /**\\n     * @notice Withdraws unstaked tokens\\n     * @param _unstakeLockID lockID of the unstake\\n     * @dev tokens need to be unstaked before they can be withdrawn\\n     * @dev caller address should match the user address in lock\\n     */\\n    function withdraw(uint256 _unstakeLockID) public nonReentrant {\\n        require(_unstakeLockID > 0, \\\"ZERO_AMOUNT\\\");\\n        // Execute pending withdrawal\\n        // Reverts if unthawing period hasn't ended\\n        tenderizer.withdraw(msg.sender, _unstakeLockID);\\n    }\\n\\n    /**\\n     * @notice Rebase will stake pending deposits, claim rewards, \\n     resync the liquidity pool and collect fees\\n     * @dev only callable by owner(gov)\\n     */\\n    function rebase() public nonReentrant {\\n        // stake tokens\\n        gulp();\\n\\n        // claim rewards\\n        tenderizer.claimRewards();\\n\\n        // update total pooled tokens\\n        _updateTotalPooledTokens();\\n\\n        // Collect governance fees\\n        _collectFees();\\n        // Collect LP fees\\n        _collectLiquidityFees();\\n\\n        // Resync weight for tenderToken\\n        try esp.resyncWeight(address(tenderToken)) {} catch {\\n            // No-op\\n        }\\n    }\\n\\n    /**\\n     * @notice Gulp stakes any unstaked token balance held by the Tenderizer\\n     * @dev deposit() only aggregates stake in the tenderizer, while gulp\\n     will perform the actual stake call\\n     * @dev only callable by owner(gov)\\n     */\\n    function gulp() public {\\n        // gulp steak balance of Tenderizer and stake it\\n        try tenderizer.stake(address(0), 0) {} catch {}\\n    }\\n\\n    /**\\n     * @notice Collect pending protocol fees from Tenderizer\\n     * @dev mints equal number of tender tokens to the owner\\n     * @dev only callable by owner(gov)\\n     */\\n    function collectFees() public onlyOwner {\\n        _collectFees();\\n    }\\n\\n    /**\\n     * @notice Collect pending liquidity provider fees from Tenderizer\\n     * @dev mints equal number of tender tokens to the tenderFarm\\n     * @dev only callable by owner(gov)\\n     */\\n    function collectLiquidityFees() public onlyOwner {\\n        _collectLiquidityFees();\\n    }\\n\\n    /**\\n     * @notice Set Elastic Supply Pool contract\\n     * @param _esp Elastic Supply Pool contract address\\n     * @dev only callable by owner(gov)\\n     */\\n    function setEsp(IElasticSupplyPool _esp) public onlyOwner {\\n        require(address(_esp) != address(0), \\\"ZERO_ADDRESS\\\");\\n        esp = _esp;\\n    }\\n\\n    function migrateToNewTenderizer(ITenderizer _tenderizer) public onlyOwner {}\\n\\n    /**\\n     * @notice Set TenderFarm contract\\n     * @param _tenderFarm TenderFarm contract address\\n     * @dev only callable by owner(gov)\\n     */\\n    function setTenderFarm(ITenderFarm _tenderFarm) public onlyOwner {\\n        tenderFarm = _tenderFarm;\\n    }\\n\\n    /**\\n     * @notice Exectutes a transaction on behalf of the controller\\n     * @param _target target address for the contract call\\n     * @param _value ether value to be transeffered with the transaction\\n     * @param _data call data - check ethers.interface.encodeFunctionData()\\n     * @dev only callable by owner(gov)\\n     */\\n    function execute(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) public onlyOwner {\\n        _execute(_target, _value, _data);\\n    }\\n\\n    /**\\n     * @notice Exectutes a batch of transaction on behalf of the controller\\n     * @param _targets array of target addresses for the contract call\\n     * @param _values array of ether values to be transeffered with the transactions\\n     * @param _datas array of call datas - check ethers.interface.encodeFunctionData()\\n     * @dev Every target to its value, data via it's corresponding index\\n     * @dev only callable by owner(gov)\\n     */\\n    function batchExecute(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _datas\\n    ) public onlyOwner {\\n        require(_targets.length == _values.length && _targets.length == _datas.length, \\\"INVALID_ARGUMENTS\\\");\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            _execute(_targets[i], _values[i], _datas[i]);\\n        }\\n    }\\n\\n    function _execute(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) internal {\\n        (bool success, bytes memory returnData) = _target.call{ value: _value }(_data);\\n        require(success, string(returnData));\\n    }\\n\\n    function _updateTotalPooledTokens() internal {\\n        // get total staked tokens\\n        uint256 stakedTokens = tenderizer.totalStakedTokens();\\n\\n        // Set total pooled tokens, rebases tenderToken supply\\n        tenderToken.setTotalPooledTokens(stakedTokens);\\n    }\\n\\n    function _collectFees() internal {\\n        // collect fees and get amount\\n        uint256 amount = tenderizer.collectFees();\\n\\n        // mint tenderToken to fee distributor (governance)\\n        tenderToken.mint(owner(), amount);\\n    }\\n\\n    function _collectLiquidityFees() internal {\\n        if (tenderFarm.nextTotalStake() == 0) return;\\n        // collect fees and get amount\\n        uint256 amount = tenderizer.collectLiquidityFees();\\n\\n        // mint tenderToken to fee distributor (governance)\\n        tenderToken.mint(address(this), amount);\\n        tenderToken.approve(address(tenderFarm), amount);\\n        tenderFarm.addRewards(amount);\\n    }\\n}\\n\",\"keccak256\":\"0xef951fc1d9d7e17cafbd239c14de350bf6be73be47d9603f7d8140f7bfb0b61c\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/IElasticSupplyPool.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\ninterface IElasticSupplyPool {\\n    function resyncWeight(address _token) external;\\n}\\n\",\"keccak256\":\"0x2c89ed353924b2feb00dbdca278b56f82bd45d42cfa835b9afe0bf156691d30a\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/ITenderFarm.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\ninterface ITenderFarm {\\n    function farm(uint256 _amount) external;\\n\\n    function farmFor(address _for, uint256 _amount) external;\\n\\n    function unfarm(uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function addRewards(uint256 _amount) external;\\n\\n    function availableRewards(address _for) external view returns (uint256);\\n\\n    function stakeOf(address _of) external view returns (uint256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function nextTotalStake() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x199a2738b0853361858fdb24844582421c722fff0202fd3b6c6ececa5f4e4389\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITenderizer {\\n    function deposit(address _from, uint256 _amount) external;\\n\\n    function stake(address _node, uint256 _amount) external;\\n\\n    function unstake(address _account, uint256 _amount) external returns (uint256 unstakeLockID);\\n\\n    function withdraw(address _account, uint256 _unstakeLockID) external;\\n\\n    function claimRewards() external;\\n\\n    function collectFees() external returns (uint256);\\n\\n    function collectLiquidityFees() external returns (uint256);\\n\\n    function totalStakedTokens() external view returns (uint256);\\n\\n    // Governance\\n\\n    function setController(address _controller) external;\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n}\\n\",\"keccak256\":\"0x3883ea903f3f23a167b5e6d4311cc05956f48450e84defc5626a76d9f187816a\",\"license\":\"GPL-3.0\"},\"contracts/token/ITenderToken.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\ninterface ITenderToken {\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getTotalPooledTokens() external view returns (uint256);\\n\\n    function getTotalShares() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function tokensToShares(uint256 _tokens) external view returns (uint256);\\n\\n    function sharesToTokens(uint256 _shares) external view returns (uint256);\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n\\n    function mint(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function burn(address _account, uint256 _amount) external returns (bool);\\n\\n    function setTotalPooledTokens(uint256 _newTotalPooledTokens) external;\\n}\\n\",\"keccak256\":\"0x6cb71598dfe3a0eae7b07b24edac1c4dddf7af43ca93c31ebe9a26d28fad7415\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d6f38038062002d6f833981810160405281019062000037919062000260565b600062000049620001fc60201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506001808190555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620003b8565b600033905090565b600081519050620002158162000350565b92915050565b6000815190506200022c816200036a565b92915050565b600081519050620002438162000384565b92915050565b6000815190506200025a816200039e565b92915050565b600080600080608085870312156200027757600080fd5b6000620002878782880162000204565b94505060206200029a8782880162000249565b9350506040620002ad8782880162000232565b9250506060620002c0878288016200021b565b91505092959194509250565b6000620002d98262000330565b9050919050565b6000620002ed82620002cc565b9050919050565b60006200030182620002cc565b9050919050565b60006200031582620002cc565b9050919050565b60006200032982620002cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200035b81620002e0565b81146200036757600080fd5b50565b6200037581620002f4565b81146200038157600080fd5b50565b6200038f8162000308565b81146200039b57600080fd5b50565b620003a9816200031c565b8114620003b557600080fd5b50565b6129a780620003c86000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063b089af31116100ad578063d7f8e33c11610071578063d7f8e33c14610297578063f2fde38b146102b5578063f41cb976146102d1578063f4d95a71146102ed578063fbdfc9611461030b5761012c565b8063b089af311461022f578063b61d27f614610239578063b6b55f2514610255578063c2ca884b14610271578063c87965721461028d5761012c565b80636f190315116100f45780636f190315146101d5578063715018a6146101f35780638da5cb5b146101fd57806394909e621461021b578063af14052c146102255761012c565b8063077d97d7146101315780632d8221601461014d5780632e1a7d4d1461016b5780635b3e2077146101875780636198e339146101a5575b600080fd5b61014b60048036038101906101469190611e77565b610327565b005b610155610507565b6040516101629190612330565b60405180910390f35b61018560048036038101906101809190611fbf565b61052d565b005b61018f610657565b60405161019c919061234b565b60405180910390f35b6101bf60048036038101906101ba9190611fbf565b61067d565b6040516101cc91906124a8565b60405180910390f35b6101dd6108c3565b6040516101ea91906122df565b60405180910390f35b6101fb6108e9565b005b610205610a23565b604051610212919061223b565b60405180910390f35b610223610a4c565b005b61022d610ae1565b005b610237610c8c565b005b610253600480360381019061024e9190611e0b565b610d12565b005b61026f600480360381019061026a9190611fbf565b610da0565b005b61028b60048036038101906102869190611f44565b61107d565b005b6102956111ad565b005b61029f611233565b6040516102ac91906122fa565b60405180910390f35b6102cf60048036038101906102ca9190611de2565b611259565b005b6102eb60048036038101906102e69190611f96565b611402565b005b6102f5611481565b6040516103029190612315565b60405180910390f35b61032560048036038101906103209190611f6d565b6114a7565b005b61032f611567565b73ffffffffffffffffffffffffffffffffffffffff1661034d610a23565b73ffffffffffffffffffffffffffffffffffffffff16146103a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039a90612448565b60405180910390fd5b83839050868690501480156103bd57508181905086869050145b6103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390612428565b60405180910390fd5b60005b868690508110156104fe576104eb878783818110610446577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061045b9190611de2565b868684818110610494577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358585858181106104d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906104e691906124c3565b61156f565b80806104f6906126c7565b9150506103ff565b50505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90612488565b60405180910390fd5b6002600181905550600081116105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590612468565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b815260040161061b9291906122b6565b600060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b505050506001808190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260015414156106c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bc90612488565b60405180910390fd5b600260018190555060008211610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070790612468565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b815260040161076d9291906122b6565b602060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190611f1b565b6107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590612388565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a672e033846040518363ffffffff1660e01b815260040161085b9291906122b6565b602060405180830381600087803b15801561087557600080fd5b505af1158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611fe8565b90506108b761162d565b60018081905550919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108f1611567565b73ffffffffffffffffffffffffffffffffffffffff1661090f610a23565b73ffffffffffffffffffffffffffffffffffffffff1614610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c90612448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adc9772e6000806040518363ffffffff1660e01b8152600401610aaa92919061228d565b600060405180830381600087803b158015610ac457600080fd5b505af1925050508015610ad5575060015b610ade57610adf565b5b565b60026001541415610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90612488565b60405180910390fd5b6002600181905550610b37610a4c565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b50505050610bc161162d565b610bc9611761565b610bd16118c1565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f93ab47600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610c4e919061223b565b600060405180830381600087803b158015610c6857600080fd5b505af1925050508015610c79575060015b610c8257610c83565b5b60018081905550565b610c94611567565b73ffffffffffffffffffffffffffffffffffffffff16610cb2610a23565b73ffffffffffffffffffffffffffffffffffffffff1614610d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cff90612448565b60405180910390fd5b610d106118c1565b565b610d1a611567565b73ffffffffffffffffffffffffffffffffffffffff16610d38610a23565b73ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8590612448565b60405180910390fd5b610d9a8484848461156f565b50505050565b60008111610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda90612468565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610e409291906122b6565b602060405180830381600087803b158015610e5a57600080fd5b505af1158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e929190611f1b565b610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec8906123e8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433836040518363ffffffff1660e01b8152600401610f2e9291906122b6565b600060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b50505050610f6861162d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610fe993929190612256565b602060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190611f1b565b61107a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611071906123a8565b60405180910390fd5b50565b611085611567565b73ffffffffffffffffffffffffffffffffffffffff166110a3610a23565b73ffffffffffffffffffffffffffffffffffffffff16146110f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f090612448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116090612408565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6111b5611567565b73ffffffffffffffffffffffffffffffffffffffff166111d3610a23565b73ffffffffffffffffffffffffffffffffffffffff1614611229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122090612448565b60405180910390fd5b611231611761565b565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611261611567565b73ffffffffffffffffffffffffffffffffffffffff1661127f610a23565b73ffffffffffffffffffffffffffffffffffffffff16146112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90612448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133c906123c8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61140a611567565b73ffffffffffffffffffffffffffffffffffffffff16611428610a23565b73ffffffffffffffffffffffffffffffffffffffff161461147e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147590612448565b60405180910390fd5b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114af611567565b73ffffffffffffffffffffffffffffffffffffffff166114cd610a23565b73ffffffffffffffffffffffffffffffffffffffff1614611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151a90612448565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff1685858560405161159a929190612222565b60006040518083038185875af1925050503d80600081146115d7576040519150601f19603f3d011682016040523d82523d6000602084013e6115dc565b606091505b5091509150818190611624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161b9190612366565b60405180910390fd5b50505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561169757600080fd5b505afa1580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf9190611fe8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4eaf749826040518263ffffffff1660e01b815260040161172c91906124a8565b600060405180830381600087803b15801561174657600080fd5b505af115801561175a573d6000803e3d6000fd5b5050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87965726040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117cd57600080fd5b505af11580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118059190611fe8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1961184d610a23565b836040518363ffffffff1660e01b815260040161186b9291906122b6565b602060405180830381600087803b15801561188557600080fd5b505af1158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd9190611f1b565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d3b7c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119639190611fe8565b141561196e57611c25565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b089af316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119da57600080fd5b505af11580156119ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a129190611fe8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401611a719291906122b6565b602060405180830381600087803b158015611a8b57600080fd5b505af1158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190611f1b565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b439291906122b6565b602060405180830381600087803b158015611b5d57600080fd5b505af1158015611b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b959190611f1b565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beceed39826040518263ffffffff1660e01b8152600401611bf191906124a8565b600060405180830381600087803b158015611c0b57600080fd5b505af1158015611c1f573d6000803e3d6000fd5b50505050505b565b600081359050611c36816128e7565b92915050565b60008083601f840112611c4e57600080fd5b8235905067ffffffffffffffff811115611c6757600080fd5b602083019150836020820283011115611c7f57600080fd5b9250929050565b60008083601f840112611c9857600080fd5b8235905067ffffffffffffffff811115611cb157600080fd5b602083019150836020820283011115611cc957600080fd5b9250929050565b60008083601f840112611ce257600080fd5b8235905067ffffffffffffffff811115611cfb57600080fd5b602083019150836020820283011115611d1357600080fd5b9250929050565b600081519050611d29816128fe565b92915050565b60008083601f840112611d4157600080fd5b8235905067ffffffffffffffff811115611d5a57600080fd5b602083019150836001820283011115611d7257600080fd5b9250929050565b600081359050611d8881612915565b92915050565b600081359050611d9d8161292c565b92915050565b600081359050611db281612943565b92915050565b600081359050611dc78161295a565b92915050565b600081519050611ddc8161295a565b92915050565b600060208284031215611df457600080fd5b6000611e0284828501611c27565b91505092915050565b60008060008060608587031215611e2157600080fd5b6000611e2f87828801611c27565b9450506020611e4087828801611db8565b935050604085013567ffffffffffffffff811115611e5d57600080fd5b611e6987828801611d2f565b925092505092959194509250565b60008060008060008060608789031215611e9057600080fd5b600087013567ffffffffffffffff811115611eaa57600080fd5b611eb689828a01611c3c565b9650965050602087013567ffffffffffffffff811115611ed557600080fd5b611ee189828a01611cd0565b9450945050604087013567ffffffffffffffff811115611f0057600080fd5b611f0c89828a01611c86565b92509250509295509295509295565b600060208284031215611f2d57600080fd5b6000611f3b84828501611d1a565b91505092915050565b600060208284031215611f5657600080fd5b6000611f6484828501611d79565b91505092915050565b600060208284031215611f7f57600080fd5b6000611f8d84828501611d8e565b91505092915050565b600060208284031215611fa857600080fd5b6000611fb684828501611da3565b91505092915050565b600060208284031215611fd157600080fd5b6000611fdf84828501611db8565b91505092915050565b600060208284031215611ffa57600080fd5b600061200884828501611dcd565b91505092915050565b61201a81612541565b82525050565b600061202c8385612525565b9350612039838584612685565b82840190509392505050565b61204e816125bf565b82525050565b61205d816125e3565b82525050565b61206c81612607565b82525050565b61207b8161262b565b82525050565b61208a8161264f565b82525050565b61209981612673565b82525050565b60006120aa8261251a565b6120b48185612530565b93506120c4818560208601612694565b6120cd8161273f565b840191505092915050565b60006120e5601283612530565b91506120f082612750565b602082019050919050565b6000612108601983612530565b915061211382612779565b602082019050919050565b600061212b602683612530565b9150612136826127a2565b604082019050919050565b600061214e601283612530565b9150612159826127f1565b602082019050919050565b6000612171600c83612530565b915061217c8261281a565b602082019050919050565b6000612194601183612530565b915061219f82612843565b602082019050919050565b60006121b7602083612530565b91506121c28261286c565b602082019050919050565b60006121da600b83612530565b91506121e582612895565b602082019050919050565b60006121fd601f83612530565b9150612208826128be565b602082019050919050565b61221c816125b5565b82525050565b600061222f828486612020565b91508190509392505050565b60006020820190506122506000830184612011565b92915050565b600060608201905061226b6000830186612011565b6122786020830185612011565b6122856040830184612213565b949350505050565b60006040820190506122a26000830185612011565b6122af6020830184612090565b9392505050565b60006040820190506122cb6000830185612011565b6122d86020830184612213565b9392505050565b60006020820190506122f46000830184612045565b92915050565b600060208201905061230f6000830184612054565b92915050565b600060208201905061232a6000830184612063565b92915050565b60006020820190506123456000830184612072565b92915050565b60006020820190506123606000830184612081565b92915050565b60006020820190508181036000830152612380818461209f565b905092915050565b600060208201905081810360008301526123a1816120d8565b9050919050565b600060208201905081810360008301526123c1816120fb565b9050919050565b600060208201905081810360008301526123e18161211e565b9050919050565b6000602082019050818103600083015261240181612141565b9050919050565b6000602082019050818103600083015261242181612164565b9050919050565b6000602082019050818103600083015261244181612187565b9050919050565b60006020820190508181036000830152612461816121aa565b9050919050565b60006020820190508181036000830152612481816121cd565b9050919050565b600060208201905081810360008301526124a1816121f0565b9050919050565b60006020820190506124bd6000830184612213565b92915050565b600080833560016020038436030381126124dc57600080fd5b80840192508235915067ffffffffffffffff8211156124fa57600080fd5b60208301925060018202360383131561251257600080fd5b509250929050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061254c82612595565b9050919050565b60008115159050919050565b600061256a82612541565b9050919050565b600061257c82612541565b9050919050565b600061258e82612541565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006125ca826125d1565b9050919050565b60006125dc82612595565b9050919050565b60006125ee826125f5565b9050919050565b600061260082612595565b9050919050565b600061261282612619565b9050919050565b600061262482612595565b9050919050565b60006126368261263d565b9050919050565b600061264882612595565b9050919050565b600061265a82612661565b9050919050565b600061266c82612595565b9050919050565b600061267e826125b5565b9050919050565b82818337600083830152505050565b60005b838110156126b2578082015181840152602081019050612697565b838111156126c1576000848401525b50505050565b60006126d2826125b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561270557612704612710565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f54454e4445525f4255524e5f4641494c45440000000000000000000000000000600082015250565b7f535445414b5f5452414e5346455246524f4d5f4641494c454400000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f54454e4445525f4d494e545f4641494c45440000000000000000000000000000600082015250565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b7f494e56414c49445f415247554d454e5453000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5a45524f5f414d4f554e54000000000000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6128f081612541565b81146128fb57600080fd5b50565b61290781612553565b811461291257600080fd5b50565b61291e8161255f565b811461292957600080fd5b50565b61293581612571565b811461294057600080fd5b50565b61294c81612583565b811461295757600080fd5b50565b612963816125b5565b811461296e57600080fd5b5056fea2646970667358221220503c7b2f3b7b5643445f5a4b1f377b8cfea83c8aa6c6637327a9445baf9b9a9264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063b089af31116100ad578063d7f8e33c11610071578063d7f8e33c14610297578063f2fde38b146102b5578063f41cb976146102d1578063f4d95a71146102ed578063fbdfc9611461030b5761012c565b8063b089af311461022f578063b61d27f614610239578063b6b55f2514610255578063c2ca884b14610271578063c87965721461028d5761012c565b80636f190315116100f45780636f190315146101d5578063715018a6146101f35780638da5cb5b146101fd57806394909e621461021b578063af14052c146102255761012c565b8063077d97d7146101315780632d8221601461014d5780632e1a7d4d1461016b5780635b3e2077146101875780636198e339146101a5575b600080fd5b61014b60048036038101906101469190611e77565b610327565b005b610155610507565b6040516101629190612330565b60405180910390f35b61018560048036038101906101809190611fbf565b61052d565b005b61018f610657565b60405161019c919061234b565b60405180910390f35b6101bf60048036038101906101ba9190611fbf565b61067d565b6040516101cc91906124a8565b60405180910390f35b6101dd6108c3565b6040516101ea91906122df565b60405180910390f35b6101fb6108e9565b005b610205610a23565b604051610212919061223b565b60405180910390f35b610223610a4c565b005b61022d610ae1565b005b610237610c8c565b005b610253600480360381019061024e9190611e0b565b610d12565b005b61026f600480360381019061026a9190611fbf565b610da0565b005b61028b60048036038101906102869190611f44565b61107d565b005b6102956111ad565b005b61029f611233565b6040516102ac91906122fa565b60405180910390f35b6102cf60048036038101906102ca9190611de2565b611259565b005b6102eb60048036038101906102e69190611f96565b611402565b005b6102f5611481565b6040516103029190612315565b60405180910390f35b61032560048036038101906103209190611f6d565b6114a7565b005b61032f611567565b73ffffffffffffffffffffffffffffffffffffffff1661034d610a23565b73ffffffffffffffffffffffffffffffffffffffff16146103a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039a90612448565b60405180910390fd5b83839050868690501480156103bd57508181905086869050145b6103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390612428565b60405180910390fd5b60005b868690508110156104fe576104eb878783818110610446577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061045b9190611de2565b868684818110610494577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358585858181106104d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906104e691906124c3565b61156f565b80806104f6906126c7565b9150506103ff565b50505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026001541415610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90612488565b60405180910390fd5b6002600181905550600081116105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590612468565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b815260040161061b9291906122b6565b600060405180830381600087803b15801561063557600080fd5b505af1158015610649573d6000803e3d6000fd5b505050506001808190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260015414156106c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bc90612488565b60405180910390fd5b600260018190555060008211610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070790612468565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b815260040161076d9291906122b6565b602060405180830381600087803b15801561078757600080fd5b505af115801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf9190611f1b565b6107fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f590612388565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a672e033846040518363ffffffff1660e01b815260040161085b9291906122b6565b602060405180830381600087803b15801561087557600080fd5b505af1158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad9190611fe8565b90506108b761162d565b60018081905550919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108f1611567565b73ffffffffffffffffffffffffffffffffffffffff1661090f610a23565b73ffffffffffffffffffffffffffffffffffffffff1614610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c90612448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adc9772e6000806040518363ffffffff1660e01b8152600401610aaa92919061228d565b600060405180830381600087803b158015610ac457600080fd5b505af1925050508015610ad5575060015b610ade57610adf565b5b565b60026001541415610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90612488565b60405180910390fd5b6002600181905550610b37610a4c565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ba157600080fd5b505af1158015610bb5573d6000803e3d6000fd5b50505050610bc161162d565b610bc9611761565b610bd16118c1565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f93ab47600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610c4e919061223b565b600060405180830381600087803b158015610c6857600080fd5b505af1925050508015610c79575060015b610c8257610c83565b5b60018081905550565b610c94611567565b73ffffffffffffffffffffffffffffffffffffffff16610cb2610a23565b73ffffffffffffffffffffffffffffffffffffffff1614610d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cff90612448565b60405180910390fd5b610d106118c1565b565b610d1a611567565b73ffffffffffffffffffffffffffffffffffffffff16610d38610a23565b73ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8590612448565b60405180910390fd5b610d9a8484848461156f565b50505050565b60008111610de3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dda90612468565b60405180910390fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610e409291906122b6565b602060405180830381600087803b158015610e5a57600080fd5b505af1158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e929190611f1b565b610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec8906123e8565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433836040518363ffffffff1660e01b8152600401610f2e9291906122b6565b600060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b50505050610f6861162d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610fe993929190612256565b602060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190611f1b565b61107a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611071906123a8565b60405180910390fd5b50565b611085611567565b73ffffffffffffffffffffffffffffffffffffffff166110a3610a23565b73ffffffffffffffffffffffffffffffffffffffff16146110f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f090612448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116090612408565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6111b5611567565b73ffffffffffffffffffffffffffffffffffffffff166111d3610a23565b73ffffffffffffffffffffffffffffffffffffffff1614611229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122090612448565b60405180910390fd5b611231611761565b565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611261611567565b73ffffffffffffffffffffffffffffffffffffffff1661127f610a23565b73ffffffffffffffffffffffffffffffffffffffff16146112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90612448565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133c906123c8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61140a611567565b73ffffffffffffffffffffffffffffffffffffffff16611428610a23565b73ffffffffffffffffffffffffffffffffffffffff161461147e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147590612448565b60405180910390fd5b50565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6114af611567565b73ffffffffffffffffffffffffffffffffffffffff166114cd610a23565b73ffffffffffffffffffffffffffffffffffffffff1614611523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151a90612448565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff1685858560405161159a929190612222565b60006040518083038185875af1925050503d80600081146115d7576040519150601f19603f3d011682016040523d82523d6000602084013e6115dc565b606091505b5091509150818190611624576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161b9190612366565b60405180910390fd5b50505050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561169757600080fd5b505afa1580156116ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cf9190611fe8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4eaf749826040518263ffffffff1660e01b815260040161172c91906124a8565b600060405180830381600087803b15801561174657600080fd5b505af115801561175a573d6000803e3d6000fd5b5050505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87965726040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117cd57600080fd5b505af11580156117e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118059190611fe8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1961184d610a23565b836040518363ffffffff1660e01b815260040161186b9291906122b6565b602060405180830381600087803b15801561188557600080fd5b505af1158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd9190611f1b565b5050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d3b7c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561192b57600080fd5b505afa15801561193f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119639190611fe8565b141561196e57611c25565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b089af316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119da57600080fd5b505af11580156119ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a129190611fe8565b9050600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401611a719291906122b6565b602060405180830381600087803b158015611a8b57600080fd5b505af1158015611a9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac39190611f1b565b50600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b439291906122b6565b602060405180830381600087803b158015611b5d57600080fd5b505af1158015611b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b959190611f1b565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beceed39826040518263ffffffff1660e01b8152600401611bf191906124a8565b600060405180830381600087803b158015611c0b57600080fd5b505af1158015611c1f573d6000803e3d6000fd5b50505050505b565b600081359050611c36816128e7565b92915050565b60008083601f840112611c4e57600080fd5b8235905067ffffffffffffffff811115611c6757600080fd5b602083019150836020820283011115611c7f57600080fd5b9250929050565b60008083601f840112611c9857600080fd5b8235905067ffffffffffffffff811115611cb157600080fd5b602083019150836020820283011115611cc957600080fd5b9250929050565b60008083601f840112611ce257600080fd5b8235905067ffffffffffffffff811115611cfb57600080fd5b602083019150836020820283011115611d1357600080fd5b9250929050565b600081519050611d29816128fe565b92915050565b60008083601f840112611d4157600080fd5b8235905067ffffffffffffffff811115611d5a57600080fd5b602083019150836001820283011115611d7257600080fd5b9250929050565b600081359050611d8881612915565b92915050565b600081359050611d9d8161292c565b92915050565b600081359050611db281612943565b92915050565b600081359050611dc78161295a565b92915050565b600081519050611ddc8161295a565b92915050565b600060208284031215611df457600080fd5b6000611e0284828501611c27565b91505092915050565b60008060008060608587031215611e2157600080fd5b6000611e2f87828801611c27565b9450506020611e4087828801611db8565b935050604085013567ffffffffffffffff811115611e5d57600080fd5b611e6987828801611d2f565b925092505092959194509250565b60008060008060008060608789031215611e9057600080fd5b600087013567ffffffffffffffff811115611eaa57600080fd5b611eb689828a01611c3c565b9650965050602087013567ffffffffffffffff811115611ed557600080fd5b611ee189828a01611cd0565b9450945050604087013567ffffffffffffffff811115611f0057600080fd5b611f0c89828a01611c86565b92509250509295509295509295565b600060208284031215611f2d57600080fd5b6000611f3b84828501611d1a565b91505092915050565b600060208284031215611f5657600080fd5b6000611f6484828501611d79565b91505092915050565b600060208284031215611f7f57600080fd5b6000611f8d84828501611d8e565b91505092915050565b600060208284031215611fa857600080fd5b6000611fb684828501611da3565b91505092915050565b600060208284031215611fd157600080fd5b6000611fdf84828501611db8565b91505092915050565b600060208284031215611ffa57600080fd5b600061200884828501611dcd565b91505092915050565b61201a81612541565b82525050565b600061202c8385612525565b9350612039838584612685565b82840190509392505050565b61204e816125bf565b82525050565b61205d816125e3565b82525050565b61206c81612607565b82525050565b61207b8161262b565b82525050565b61208a8161264f565b82525050565b61209981612673565b82525050565b60006120aa8261251a565b6120b48185612530565b93506120c4818560208601612694565b6120cd8161273f565b840191505092915050565b60006120e5601283612530565b91506120f082612750565b602082019050919050565b6000612108601983612530565b915061211382612779565b602082019050919050565b600061212b602683612530565b9150612136826127a2565b604082019050919050565b600061214e601283612530565b9150612159826127f1565b602082019050919050565b6000612171600c83612530565b915061217c8261281a565b602082019050919050565b6000612194601183612530565b915061219f82612843565b602082019050919050565b60006121b7602083612530565b91506121c28261286c565b602082019050919050565b60006121da600b83612530565b91506121e582612895565b602082019050919050565b60006121fd601f83612530565b9150612208826128be565b602082019050919050565b61221c816125b5565b82525050565b600061222f828486612020565b91508190509392505050565b60006020820190506122506000830184612011565b92915050565b600060608201905061226b6000830186612011565b6122786020830185612011565b6122856040830184612213565b949350505050565b60006040820190506122a26000830185612011565b6122af6020830184612090565b9392505050565b60006040820190506122cb6000830185612011565b6122d86020830184612213565b9392505050565b60006020820190506122f46000830184612045565b92915050565b600060208201905061230f6000830184612054565b92915050565b600060208201905061232a6000830184612063565b92915050565b60006020820190506123456000830184612072565b92915050565b60006020820190506123606000830184612081565b92915050565b60006020820190508181036000830152612380818461209f565b905092915050565b600060208201905081810360008301526123a1816120d8565b9050919050565b600060208201905081810360008301526123c1816120fb565b9050919050565b600060208201905081810360008301526123e18161211e565b9050919050565b6000602082019050818103600083015261240181612141565b9050919050565b6000602082019050818103600083015261242181612164565b9050919050565b6000602082019050818103600083015261244181612187565b9050919050565b60006020820190508181036000830152612461816121aa565b9050919050565b60006020820190508181036000830152612481816121cd565b9050919050565b600060208201905081810360008301526124a1816121f0565b9050919050565b60006020820190506124bd6000830184612213565b92915050565b600080833560016020038436030381126124dc57600080fd5b80840192508235915067ffffffffffffffff8211156124fa57600080fd5b60208301925060018202360383131561251257600080fd5b509250929050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061254c82612595565b9050919050565b60008115159050919050565b600061256a82612541565b9050919050565b600061257c82612541565b9050919050565b600061258e82612541565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006125ca826125d1565b9050919050565b60006125dc82612595565b9050919050565b60006125ee826125f5565b9050919050565b600061260082612595565b9050919050565b600061261282612619565b9050919050565b600061262482612595565b9050919050565b60006126368261263d565b9050919050565b600061264882612595565b9050919050565b600061265a82612661565b9050919050565b600061266c82612595565b9050919050565b600061267e826125b5565b9050919050565b82818337600083830152505050565b60005b838110156126b2578082015181840152602081019050612697565b838111156126c1576000848401525b50505050565b60006126d2826125b5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561270557612704612710565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b7f54454e4445525f4255524e5f4641494c45440000000000000000000000000000600082015250565b7f535445414b5f5452414e5346455246524f4d5f4641494c454400000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f54454e4445525f4d494e545f4641494c45440000000000000000000000000000600082015250565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b7f494e56414c49445f415247554d454e5453000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f5a45524f5f414d4f554e54000000000000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6128f081612541565b81146128fb57600080fd5b50565b61290781612553565b811461291257600080fd5b50565b61291e8161255f565b811461292957600080fd5b50565b61293581612571565b811461294057600080fd5b50565b61294c81612583565b811461295757600080fd5b50565b612963816125b5565b811461296e57600080fd5b5056fea2646970667358221220503c7b2f3b7b5643445f5a4b1f377b8cfea83c8aa6c6637327a9445baf9b9a9264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "batchExecute(address[],uint256[],bytes[])": {
        "details": "Every target to its value, data via it's corresponding indexonly callable by owner(gov)",
        "params": {
          "_datas": "array of call datas - check ethers.interface.encodeFunctionData()",
          "_targets": "array of target addresses for the contract call",
          "_values": "array of ether values to be transeffered with the transactions"
        }
      },
      "collectFees()": {
        "details": "mints equal number of tender tokens to the owneronly callable by owner(gov)"
      },
      "collectLiquidityFees()": {
        "details": "mints equal number of tender tokens to the tenderFarmonly callable by owner(gov)"
      },
      "deposit(uint256)": {
        "details": "calls Tenderizer to deposit tokens and updates total pooled tokensequal amount of tenderTokens are minted for the callerrequires '_amount' to be approved by '_from'",
        "params": {
          "_amount": "amount deposited"
        }
      },
      "execute(address,uint256,bytes)": {
        "details": "only callable by owner(gov)",
        "params": {
          "_data": "call data - check ethers.interface.encodeFunctionData()",
          "_target": "target address for the contract call",
          "_value": "ether value to be transeffered with the transaction"
        }
      },
      "gulp()": {
        "details": "deposit() only aggregates stake in the tenderizer, while gulp will perform the actual stake callonly callable by owner(gov)"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "rebase()": {
        "details": "only callable by owner(gov)"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setEsp(address)": {
        "details": "only callable by owner(gov)",
        "params": {
          "_esp": "Elastic Supply Pool contract address"
        }
      },
      "setTenderFarm(address)": {
        "details": "only callable by owner(gov)",
        "params": {
          "_tenderFarm": "TenderFarm contract address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(uint256)": {
        "details": "calls Tenderizer to unstake tokens and updates total pooled tokensequal amount of tenderTokens are burned from the userunstaking functionality varies by the protocol, check tenderizer.unstake()",
        "params": {
          "_amount": "amount deposited"
        },
        "returns": {
          "unstakeLockID": ""
        }
      },
      "withdraw(uint256)": {
        "details": "tokens need to be unstaked before they can be withdrawncaller address should match the user address in lock",
        "params": {
          "_unstakeLockID": "lockID of the unstake"
        }
      }
    },
    "title": "Controller contract for a Tenderizer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchExecute(address[],uint256[],bytes[])": {
        "notice": "Exectutes a batch of transaction on behalf of the controller"
      },
      "collectFees()": {
        "notice": "Collect pending protocol fees from Tenderizer"
      },
      "collectLiquidityFees()": {
        "notice": "Collect pending liquidity provider fees from Tenderizer"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens in Tenderizer to earn staking rewards"
      },
      "execute(address,uint256,bytes)": {
        "notice": "Exectutes a transaction on behalf of the controller"
      },
      "gulp()": {
        "notice": "Gulp stakes any unstaked token balance held by the Tenderizer"
      },
      "rebase()": {
        "notice": "Rebase will stake pending deposits, claim rewards,  resync the liquidity pool and collect fees"
      },
      "setEsp(address)": {
        "notice": "Set Elastic Supply Pool contract"
      },
      "setTenderFarm(address)": {
        "notice": "Set TenderFarm contract"
      },
      "unlock(uint256)": {
        "notice": "Unlock staked tokens"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws unstaked tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 166,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 845,
        "contract": "contracts/Controller.sol:Controller",
        "label": "steak",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)780"
      },
      {
        "astId": 848,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderizer",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITenderizer)2267"
      },
      {
        "astId": 851,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderToken",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(ITenderToken)4811"
      },
      {
        "astId": 854,
        "contract": "contracts/Controller.sol:Controller",
        "label": "esp",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IElasticSupplyPool)1580"
      },
      {
        "astId": 857,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderFarm",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITenderFarm)1745"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)780": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IElasticSupplyPool)1580": {
        "encoding": "inplace",
        "label": "contract IElasticSupplyPool",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderFarm)1745": {
        "encoding": "inplace",
        "label": "contract ITenderFarm",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderToken)4811": {
        "encoding": "inplace",
        "label": "contract ITenderToken",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderizer)2267": {
        "encoding": "inplace",
        "label": "contract ITenderizer",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}