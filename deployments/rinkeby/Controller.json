{
  "address": "0xFdF9A8ce8A898Ae5e21855C665d8843c48FD55A6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        },
        {
          "internalType": "contract ITenderToken",
          "name": "_tenderToken",
          "type": "address"
        },
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "_esp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esp",
      "outputs": [
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gulp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "migrateToNewTenderizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "_esp",
          "type": "address"
        }
      ],
      "name": "setEsp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "steak",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderToken",
      "outputs": [
        {
          "internalType": "contract ITenderToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderizer",
      "outputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "updateStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe47a379872789b142bd393dd3fc9684109c5fae574ddd320c3e3210554e5a1cc",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0xFdF9A8ce8A898Ae5e21855C665d8843c48FD55A6",
    "transactionIndex": 11,
    "gasUsed": "1761128",
    "logsBloom": "0x
    "blockHash": "0xaac412f2fe7ca4b0854148ef95d1745b37c31642f72ec48f8464f2ac77aa368e",
    "transactionHash": "0xe47a379872789b142bd393dd3fc9684109c5fae574ddd320c3e3210554e5a1cc",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 8621386,
        "transactionHash": "0xe47a379872789b142bd393dd3fc9684109c5fae574ddd320c3e3210554e5a1cc",
        "address": "0xFdF9A8ce8A898Ae5e21855C665d8843c48FD55A6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0xaac412f2fe7ca4b0854148ef95d1745b37c31642f72ec48f8464f2ac77aa368e"
      }
    ],
    "blockNumber": 8621386,
    "cumulativeGasUsed": "5776386",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x54419A2FB28458cf4A708811c78A8ae707a39caa",
    "0x4a9b33E14d61F7869182323cccd0635127a42775",
    "0x4F39d823fA1DfF3C2Ad87BC852030eFE4fF3c024",
    "0xB8377cd09E80022C2C36357d937216485E7e44Bc"
  ],
  "solcInputHash": "010cf92e83bfbf123ea51ad58a44026a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"},{\"internalType\":\"contract ITenderToken\",\"name\":\"_tenderToken\",\"type\":\"address\"},{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"_esp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esp\",\"outputs\":[{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gulp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"migrateToNewTenderizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"_esp\",\"type\":\"address\"}],\"name\":\"setEsp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderToken\",\"outputs\":[{\"internalType\":\"contract ITenderToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderizer\",\"outputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"updateStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Controller contract for a Tenderizer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./token/ITenderToken.sol\\\";\\nimport \\\"./tenderizer/ITenderizer.sol\\\";\\nimport \\\"./liquidity/IElasticSupplyPool.sol\\\";\\n\\n/**\\n * @title Controller contract for a Tenderizer\\n */\\n\\ncontract Controller is Ownable {\\n\\n    IERC20 public steak;\\n    ITenderizer public tenderizer;\\n    ITenderToken public tenderToken;\\n    IElasticSupplyPool public esp;\\n\\n    constructor(IERC20 _steak, ITenderizer _tenderizer, ITenderToken _tenderToken, IElasticSupplyPool _esp) {\\n        steak = _steak;\\n        tenderizer = _tenderizer;\\n        // TODO: consider deploying these contracts using factories and proxies\\n        // from the constructutor so that deploying a new system is only deploying a single contract\\n        tenderToken = _tenderToken;\\n        esp = _esp;\\n    }\\n\\n    function deposit(uint256 _amount) public {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        // mint tenderTokens\\n        require(\\n            tenderToken.mint(msg.sender, _amount),\\n            \\\"TENDER_MINT_FAILED\\\"\\n        );\\n\\n        tenderizer.deposit(msg.sender, _amount);\\n\\n        _updateTotalPooledTokens();\\n\\n        // Transfer tokens to tenderizer\\n        require(\\n            steak.transferFrom(msg.sender, address(tenderizer), _amount),\\n            \\\"STEAK_TRANSFERFROM_FAILED\\\"\\n        );\\n    }\\n\\n    function unlock(uint256 _amount) public {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n        // Burn tenderTokens\\n        require(\\n            tenderToken.burn(msg.sender, _amount),\\n            \\\"TENDER_BURN_FAILED\\\"\\n        );\\n\\n        // update total pooled tokens\\n        _updateTotalPooledTokens();\\n\\n        // Unstake tokens for pending withdrawal\\n        tenderizer.unstake(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n        // Execute pending withdrawal\\n        // Reverts if unthawing period hasn't ended\\n        tenderizer.withdraw(msg.sender, _amount);\\n\\n        // Transfer tokens after withdrawing from the tenderizer\\n        require(\\n            steak.transfer(msg.sender, _amount),\\n            \\\"TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function rebase() public onlyOwner {\\n        // stake tokens\\n        gulp();\\n\\n        // claim rewards\\n        tenderizer.claimRewards();\\n\\n        // update total pooled tokens\\n        _updateTotalPooledTokens();\\n\\n        // Resync weight for tenderToken\\n        try esp.resyncWeight(address(tenderToken)) {\\n\\n        } catch {\\n            // No-op\\n        }\\n\\n    }\\n\\n    function gulp() public {\\n        // gulp steak balance of Tenderizer and stake it\\n        tenderizer.stake(address(0), 0);\\n    }\\n\\n    function collectFees() public onlyOwner {\\n        // collect fees and get amount\\n        uint256 amount = tenderizer.collectFees();\\n\\n        // mint tenderToken to fee distributor (governance)\\n        tenderToken.mint(owner(), amount);\\n    }\\n\\n    function setEsp(IElasticSupplyPool _esp) public onlyOwner {\\n        require(address(_esp) != address(0), \\\"ZERO_ADDRESS\\\");\\n        esp = _esp;\\n    }\\n\\n    function migrateToNewTenderizer(ITenderizer _tenderizer) public onlyOwner {\\n        \\n    }\\n\\n    function updateStakingContract(address _stakingContract) public onlyOwner {\\n        tenderizer.setStakingContract(_stakingContract);\\n    }\\n\\n    function _updateTotalPooledTokens() internal {\\n        // get total staked tokens\\n        uint256 stakedTokens = tenderizer.totalStakedTokens();\\n\\n        // Set total pooled tokens, rebases tenderToken supply\\n        tenderToken.setTotalPooledTokens(stakedTokens);\\n    }\\n    // TODO:\\n    // - Migrate to new tenderizer\\n    // Add rescuefunds to tenderizer:\\n}\\n\",\"keccak256\":\"0xc2bf645e8e2ae69c40d7b72ecbf77216a0d399d07f63e165df841ec973cda91f\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/IElasticSupplyPool.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ninterface IElasticSupplyPool {\\n    function resyncWeight(address _token) external;\\n}\",\"keccak256\":\"0x342348ffa02ff1703ffc44502e6b792ae65b662061e2bce29a623c5db9a8e080\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITenderizer {\\n\\n    function deposit(address _from, uint256 _amount) external;\\n\\n    function stake(address _node, uint256 _amount) external;\\n\\n    function unstake(address _account, uint256 _amount) external;\\n\\n    function withdraw(address _account, uint256 _amount) external;\\n\\n    function claimRewards() external;\\n\\n    function collectFees() external returns (uint256);\\n\\n    function totalStakedTokens() external view returns (uint256);\\n\\n    // Governance\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n}\",\"keccak256\":\"0x3a0995ffd651b5667d117cb0eb36d662a3ebf15f517502b3096c29f2e53cbe72\",\"license\":\"GPL-3.0\"},\"contracts/token/ITenderToken.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ninterface ITenderToken {\\n    function burn(address _account, uint256 _amount) external returns (bool);\\n    function mint(address _recipient, uint256 _amount) external returns (bool);\\n    function setTotalPooledTokens(uint256 _newTotalPooledTokens) external;\\n    function getTotalPooledTokens() external view returns (uint256);\\n}\",\"keccak256\":\"0x34fb0340393838feb212f6435871f32456d5e6177242ca26b7be359686bb7c2d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200207438038062002074833981810160405281019062000037919062000259565b600062000049620001f560201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620003b1565b600033905090565b6000815190506200020e8162000349565b92915050565b600081519050620002258162000363565b92915050565b6000815190506200023c816200037d565b92915050565b600081519050620002538162000397565b92915050565b600080600080608085870312156200027057600080fd5b60006200028087828801620001fd565b9450506020620002938782880162000242565b9350506040620002a6878288016200022b565b9250506060620002b98782880162000214565b91505092959194509250565b6000620002d28262000329565b9050919050565b6000620002e682620002c5565b9050919050565b6000620002fa82620002c5565b9050919050565b60006200030e82620002c5565b9050919050565b60006200032282620002c5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200035481620002d9565b81146200036057600080fd5b50565b6200036e81620002ed565b81146200037a57600080fd5b50565b620003888162000301565b81146200039457600080fd5b50565b620003a28162000315565b8114620003ae57600080fd5b50565b611cb380620003c16000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806394909e6211610097578063c879657211610066578063c879657214610227578063d7f8e33c14610231578063f2fde38b1461024f578063f41cb9761461026b57610100565b806394909e62146101db578063af14052c146101e5578063b6b55f25146101ef578063c2ca884b1461020b57610100565b80636198e339116100d35780636198e339146101795780636f19031514610195578063715018a6146101b35780638da5cb5b146101bd57610100565b80632d822160146101055780632e1a7d4d146101235780633347e4d61461013f5780635b3e20771461015b575b600080fd5b61010d610287565b60405161011a919061199a565b60405180910390f35b61013d600480360381019061013891906115df565b6102ad565b005b6101596004803603810190610154919061153b565b610470565b005b61016361057c565b60405161017091906119b5565b60405180910390f35b610193600480360381019061018e91906115df565b6105a2565b005b61019d61076d565b6040516101aa9190611964565b60405180910390f35b6101bb610793565b005b6101c56108cd565b6040516101d291906118c0565b60405180910390f35b6101e36108f6565b005b6101ed610988565b005b610209600480360381019061020491906115df565b610b4a565b005b6102256004803603810190610220919061158d565b610e27565b005b61022f610f57565b005b610239611133565b604051610246919061197f565b60405180910390f35b6102696004803603810190610264919061153b565b611159565b005b610285600480360381019061028091906115b6565b611302565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e790611ab0565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b815260040161034d92919061193b565b600060405180830381600087803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016103dc92919061193b565b602060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190611564565b61046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046490611a70565b60405180910390fd5b50565b610478611381565b73ffffffffffffffffffffffffffffffffffffffff166104966108cd565b73ffffffffffffffffffffffffffffffffffffffff16146104ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e390611a90565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dd373b9826040518263ffffffff1660e01b815260040161054791906118c0565b600060405180830381600087803b15801561056157600080fd5b505af1158015610575573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116105e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dc90611ab0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b815260040161064292919061193b565b602060405180830381600087803b15801561065c57600080fd5b505af1158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190611564565b6106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca906119d0565b60405180910390fd5b6106db611389565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a672e033836040518363ffffffff1660e01b815260040161073892919061193b565b600060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61079b611381565b73ffffffffffffffffffffffffffffffffffffffff166107b96108cd565b73ffffffffffffffffffffffffffffffffffffffff161461080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690611a90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adc9772e6000806040518363ffffffff1660e01b8152600401610954929190611912565b600060405180830381600087803b15801561096e57600080fd5b505af1158015610982573d6000803e3d6000fd5b50505050565b610990611381565b73ffffffffffffffffffffffffffffffffffffffff166109ae6108cd565b73ffffffffffffffffffffffffffffffffffffffff1614610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90611a90565b60405180910390fd5b610a0c6108f6565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a7657600080fd5b505af1158015610a8a573d6000803e3d6000fd5b50505050610a96611389565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f93ab47600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610b1391906118c0565b600060405180830381600087803b158015610b2d57600080fd5b505af1925050508015610b3e575060015b610b4757610b48565b5b565b60008111610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8490611ab0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610bea92919061193b565b602060405180830381600087803b158015610c0457600080fd5b505af1158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611564565b610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7290611a30565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433836040518363ffffffff1660e01b8152600401610cd892919061193b565b600060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b50505050610d12611389565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610d93939291906118db565b602060405180830381600087803b158015610dad57600080fd5b505af1158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de59190611564565b610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b906119f0565b60405180910390fd5b50565b610e2f611381565b73ffffffffffffffffffffffffffffffffffffffff16610e4d6108cd565b73ffffffffffffffffffffffffffffffffffffffff1614610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a90611a90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0a90611a50565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610f5f611381565b73ffffffffffffffffffffffffffffffffffffffff16610f7d6108cd565b73ffffffffffffffffffffffffffffffffffffffff1614610fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fca90611a90565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87965726040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110779190611608565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f196110bf6108cd565b836040518363ffffffff1660e01b81526004016110dd92919061193b565b602060405180830381600087803b1580156110f757600080fd5b505af115801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f9190611564565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611161611381565b73ffffffffffffffffffffffffffffffffffffffff1661117f6108cd565b73ffffffffffffffffffffffffffffffffffffffff16146111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cc90611a90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90611a10565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61130a611381565b73ffffffffffffffffffffffffffffffffffffffff166113286108cd565b73ffffffffffffffffffffffffffffffffffffffff161461137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590611a90565b60405180910390fd5b50565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f357600080fd5b505afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190611608565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4eaf749826040518263ffffffff1660e01b81526004016114889190611ad0565b600060405180830381600087803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b5050505050565b6000813590506114cc81611c0a565b92915050565b6000815190506114e181611c21565b92915050565b6000813590506114f681611c38565b92915050565b60008135905061150b81611c4f565b92915050565b60008135905061152081611c66565b92915050565b60008151905061153581611c66565b92915050565b60006020828403121561154d57600080fd5b600061155b848285016114bd565b91505092915050565b60006020828403121561157657600080fd5b6000611584848285016114d2565b91505092915050565b60006020828403121561159f57600080fd5b60006115ad848285016114e7565b91505092915050565b6000602082840312156115c857600080fd5b60006115d6848285016114fc565b91505092915050565b6000602082840312156115f157600080fd5b60006115ff84828501611511565b91505092915050565b60006020828403121561161a57600080fd5b600061162884828501611526565b91505092915050565b61163a81611afc565b82525050565b61164981611b68565b82525050565b61165881611b8c565b82525050565b61166781611bb0565b82525050565b61167681611bd4565b82525050565b61168581611bf8565b82525050565b6000611698601283611aeb565b91507f54454e4445525f4255524e5f4641494c454400000000000000000000000000006000830152602082019050919050565b60006116d8601983611aeb565b91507f535445414b5f5452414e5346455246524f4d5f4641494c4544000000000000006000830152602082019050919050565b6000611718602683611aeb565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061177e601283611aeb565b91507f54454e4445525f4d494e545f4641494c454400000000000000000000000000006000830152602082019050919050565b60006117be600c83611aeb565b91507f5a45524f5f4144445245535300000000000000000000000000000000000000006000830152602082019050919050565b60006117fe600f83611aeb565b91507f5452414e534645525f4641494c454400000000000000000000000000000000006000830152602082019050919050565b600061183e602083611aeb565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061187e600b83611aeb565b91507f5a45524f5f414d4f554e540000000000000000000000000000000000000000006000830152602082019050919050565b6118ba81611b5e565b82525050565b60006020820190506118d56000830184611631565b92915050565b60006060820190506118f06000830186611631565b6118fd6020830185611631565b61190a60408301846118b1565b949350505050565b60006040820190506119276000830185611631565b611934602083018461167c565b9392505050565b60006040820190506119506000830185611631565b61195d60208301846118b1565b9392505050565b60006020820190506119796000830184611640565b92915050565b6000602082019050611994600083018461164f565b92915050565b60006020820190506119af600083018461165e565b92915050565b60006020820190506119ca600083018461166d565b92915050565b600060208201905081810360008301526119e98161168b565b9050919050565b60006020820190508181036000830152611a09816116cb565b9050919050565b60006020820190508181036000830152611a298161170b565b9050919050565b60006020820190508181036000830152611a4981611771565b9050919050565b60006020820190508181036000830152611a69816117b1565b9050919050565b60006020820190508181036000830152611a89816117f1565b9050919050565b60006020820190508181036000830152611aa981611831565b9050919050565b60006020820190508181036000830152611ac981611871565b9050919050565b6000602082019050611ae560008301846118b1565b92915050565b600082825260208201905092915050565b6000611b0782611b3e565b9050919050565b60008115159050919050565b6000611b2582611afc565b9050919050565b6000611b3782611afc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611b7382611b7a565b9050919050565b6000611b8582611b3e565b9050919050565b6000611b9782611b9e565b9050919050565b6000611ba982611b3e565b9050919050565b6000611bbb82611bc2565b9050919050565b6000611bcd82611b3e565b9050919050565b6000611bdf82611be6565b9050919050565b6000611bf182611b3e565b9050919050565b6000611c0382611b5e565b9050919050565b611c1381611afc565b8114611c1e57600080fd5b50565b611c2a81611b0e565b8114611c3557600080fd5b50565b611c4181611b1a565b8114611c4c57600080fd5b50565b611c5881611b2c565b8114611c6357600080fd5b50565b611c6f81611b5e565b8114611c7a57600080fd5b5056fea26469706673582212207a3ca3addb57b8b766e758dfe15222cad3bd253eaa81d28b888b49d20860ca0864736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806394909e6211610097578063c879657211610066578063c879657214610227578063d7f8e33c14610231578063f2fde38b1461024f578063f41cb9761461026b57610100565b806394909e62146101db578063af14052c146101e5578063b6b55f25146101ef578063c2ca884b1461020b57610100565b80636198e339116100d35780636198e339146101795780636f19031514610195578063715018a6146101b35780638da5cb5b146101bd57610100565b80632d822160146101055780632e1a7d4d146101235780633347e4d61461013f5780635b3e20771461015b575b600080fd5b61010d610287565b60405161011a919061199a565b60405180910390f35b61013d600480360381019061013891906115df565b6102ad565b005b6101596004803603810190610154919061153b565b610470565b005b61016361057c565b60405161017091906119b5565b60405180910390f35b610193600480360381019061018e91906115df565b6105a2565b005b61019d61076d565b6040516101aa9190611964565b60405180910390f35b6101bb610793565b005b6101c56108cd565b6040516101d291906118c0565b60405180910390f35b6101e36108f6565b005b6101ed610988565b005b610209600480360381019061020491906115df565b610b4a565b005b6102256004803603810190610220919061158d565b610e27565b005b61022f610f57565b005b610239611133565b604051610246919061197f565b60405180910390f35b6102696004803603810190610264919061153b565b611159565b005b610285600480360381019061028091906115b6565b611302565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e790611ab0565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b815260040161034d92919061193b565b600060405180830381600087803b15801561036757600080fd5b505af115801561037b573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016103dc92919061193b565b602060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190611564565b61046d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046490611a70565b60405180910390fd5b50565b610478611381565b73ffffffffffffffffffffffffffffffffffffffff166104966108cd565b73ffffffffffffffffffffffffffffffffffffffff16146104ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e390611a90565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dd373b9826040518263ffffffff1660e01b815260040161054791906118c0565b600060405180830381600087803b15801561056157600080fd5b505af1158015610575573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081116105e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105dc90611ab0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b815260040161064292919061193b565b602060405180830381600087803b15801561065c57600080fd5b505af1158015610670573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106949190611564565b6106d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ca906119d0565b60405180910390fd5b6106db611389565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a672e033836040518363ffffffff1660e01b815260040161073892919061193b565b600060405180830381600087803b15801561075257600080fd5b505af1158015610766573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61079b611381565b73ffffffffffffffffffffffffffffffffffffffff166107b96108cd565b73ffffffffffffffffffffffffffffffffffffffff161461080f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080690611a90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adc9772e6000806040518363ffffffff1660e01b8152600401610954929190611912565b600060405180830381600087803b15801561096e57600080fd5b505af1158015610982573d6000803e3d6000fd5b50505050565b610990611381565b73ffffffffffffffffffffffffffffffffffffffff166109ae6108cd565b73ffffffffffffffffffffffffffffffffffffffff1614610a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fb90611a90565b60405180910390fd5b610a0c6108f6565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a7657600080fd5b505af1158015610a8a573d6000803e3d6000fd5b50505050610a96611389565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f93ab47600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610b1391906118c0565b600060405180830381600087803b158015610b2d57600080fd5b505af1925050508015610b3e575060015b610b4757610b48565b5b565b60008111610b8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8490611ab0565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610bea92919061193b565b602060405180830381600087803b158015610c0457600080fd5b505af1158015610c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3c9190611564565b610c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7290611a30565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433836040518363ffffffff1660e01b8152600401610cd892919061193b565b600060405180830381600087803b158015610cf257600080fd5b505af1158015610d06573d6000803e3d6000fd5b50505050610d12611389565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610d93939291906118db565b602060405180830381600087803b158015610dad57600080fd5b505af1158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de59190611564565b610e24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1b906119f0565b60405180910390fd5b50565b610e2f611381565b73ffffffffffffffffffffffffffffffffffffffff16610e4d6108cd565b73ffffffffffffffffffffffffffffffffffffffff1614610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a90611a90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0a90611a50565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610f5f611381565b73ffffffffffffffffffffffffffffffffffffffff16610f7d6108cd565b73ffffffffffffffffffffffffffffffffffffffff1614610fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fca90611a90565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87965726040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561103f57600080fd5b505af1158015611053573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110779190611608565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f196110bf6108cd565b836040518363ffffffff1660e01b81526004016110dd92919061193b565b602060405180830381600087803b1580156110f757600080fd5b505af115801561110b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112f9190611564565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611161611381565b73ffffffffffffffffffffffffffffffffffffffff1661117f6108cd565b73ffffffffffffffffffffffffffffffffffffffff16146111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cc90611a90565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611245576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123c90611a10565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61130a611381565b73ffffffffffffffffffffffffffffffffffffffff166113286108cd565b73ffffffffffffffffffffffffffffffffffffffff161461137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590611a90565b60405180910390fd5b50565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b1580156113f357600080fd5b505afa158015611407573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142b9190611608565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4eaf749826040518263ffffffff1660e01b81526004016114889190611ad0565b600060405180830381600087803b1580156114a257600080fd5b505af11580156114b6573d6000803e3d6000fd5b5050505050565b6000813590506114cc81611c0a565b92915050565b6000815190506114e181611c21565b92915050565b6000813590506114f681611c38565b92915050565b60008135905061150b81611c4f565b92915050565b60008135905061152081611c66565b92915050565b60008151905061153581611c66565b92915050565b60006020828403121561154d57600080fd5b600061155b848285016114bd565b91505092915050565b60006020828403121561157657600080fd5b6000611584848285016114d2565b91505092915050565b60006020828403121561159f57600080fd5b60006115ad848285016114e7565b91505092915050565b6000602082840312156115c857600080fd5b60006115d6848285016114fc565b91505092915050565b6000602082840312156115f157600080fd5b60006115ff84828501611511565b91505092915050565b60006020828403121561161a57600080fd5b600061162884828501611526565b91505092915050565b61163a81611afc565b82525050565b61164981611b68565b82525050565b61165881611b8c565b82525050565b61166781611bb0565b82525050565b61167681611bd4565b82525050565b61168581611bf8565b82525050565b6000611698601283611aeb565b91507f54454e4445525f4255524e5f4641494c454400000000000000000000000000006000830152602082019050919050565b60006116d8601983611aeb565b91507f535445414b5f5452414e5346455246524f4d5f4641494c4544000000000000006000830152602082019050919050565b6000611718602683611aeb565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061177e601283611aeb565b91507f54454e4445525f4d494e545f4641494c454400000000000000000000000000006000830152602082019050919050565b60006117be600c83611aeb565b91507f5a45524f5f4144445245535300000000000000000000000000000000000000006000830152602082019050919050565b60006117fe600f83611aeb565b91507f5452414e534645525f4641494c454400000000000000000000000000000000006000830152602082019050919050565b600061183e602083611aeb565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061187e600b83611aeb565b91507f5a45524f5f414d4f554e540000000000000000000000000000000000000000006000830152602082019050919050565b6118ba81611b5e565b82525050565b60006020820190506118d56000830184611631565b92915050565b60006060820190506118f06000830186611631565b6118fd6020830185611631565b61190a60408301846118b1565b949350505050565b60006040820190506119276000830185611631565b611934602083018461167c565b9392505050565b60006040820190506119506000830185611631565b61195d60208301846118b1565b9392505050565b60006020820190506119796000830184611640565b92915050565b6000602082019050611994600083018461164f565b92915050565b60006020820190506119af600083018461165e565b92915050565b60006020820190506119ca600083018461166d565b92915050565b600060208201905081810360008301526119e98161168b565b9050919050565b60006020820190508181036000830152611a09816116cb565b9050919050565b60006020820190508181036000830152611a298161170b565b9050919050565b60006020820190508181036000830152611a4981611771565b9050919050565b60006020820190508181036000830152611a69816117b1565b9050919050565b60006020820190508181036000830152611a89816117f1565b9050919050565b60006020820190508181036000830152611aa981611831565b9050919050565b60006020820190508181036000830152611ac981611871565b9050919050565b6000602082019050611ae560008301846118b1565b92915050565b600082825260208201905092915050565b6000611b0782611b3e565b9050919050565b60008115159050919050565b6000611b2582611afc565b9050919050565b6000611b3782611afc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611b7382611b7a565b9050919050565b6000611b8582611b3e565b9050919050565b6000611b9782611b9e565b9050919050565b6000611ba982611b3e565b9050919050565b6000611bbb82611bc2565b9050919050565b6000611bcd82611b3e565b9050919050565b6000611bdf82611be6565b9050919050565b6000611bf182611b3e565b9050919050565b6000611c0382611b5e565b9050919050565b611c1381611afc565b8114611c1e57600080fd5b50565b611c2a81611b0e565b8114611c3557600080fd5b50565b611c4181611b1a565b8114611c4c57600080fd5b50565b611c5881611b2c565b8114611c6357600080fd5b50565b611c6f81611b5e565b8114611c7a57600080fd5b5056fea26469706673582212207a3ca3addb57b8b766e758dfe15222cad3bd253eaa81d28b888b49d20860ca0864736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Controller contract for a Tenderizer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 536,
        "contract": "contracts/Controller.sol:Controller",
        "label": "steak",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)187"
      },
      {
        "astId": 539,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderizer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITenderizer)1006"
      },
      {
        "astId": 542,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITenderToken)2610"
      },
      {
        "astId": 545,
        "contract": "contracts/Controller.sol:Controller",
        "label": "esp",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IElasticSupplyPool)940"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)187": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IElasticSupplyPool)940": {
        "encoding": "inplace",
        "label": "contract IElasticSupplyPool",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderToken)2610": {
        "encoding": "inplace",
        "label": "contract ITenderToken",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderizer)1006": {
        "encoding": "inplace",
        "label": "contract ITenderizer",
        "numberOfBytes": "20"
      }
    }
  }
}