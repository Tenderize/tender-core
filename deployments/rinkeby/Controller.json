{
  "address": "0x3891FB6b6B145Ad104FE98aC6EFAFc7d8feDD63C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        },
        {
          "internalType": "contract ITenderToken",
          "name": "_tenderToken",
          "type": "address"
        },
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "_esp",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_datas",
          "type": "bytes[]"
        }
      ],
      "name": "batchExecute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "esp",
      "outputs": [
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gulp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "migrateToNewTenderizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IElasticSupplyPool",
          "name": "_esp",
          "type": "address"
        }
      ],
      "name": "setEsp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITenderFarm",
          "name": "_tenderFarm",
          "type": "address"
        }
      ],
      "name": "setTenderFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "steak",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderFarm",
      "outputs": [
        {
          "internalType": "contract ITenderFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderToken",
      "outputs": [
        {
          "internalType": "contract ITenderToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderizer",
      "outputs": [
        {
          "internalType": "contract ITenderizer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "updateStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x227f730898967f8862bfdce444c0010223411b61044394d6cf295a49461a4d2d",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x3891FB6b6B145Ad104FE98aC6EFAFc7d8feDD63C",
    "transactionIndex": 19,
    "gasUsed": "2421460",
    "logsBloom": "0x
    "blockHash": "0xc6e2c61c50571939d8a254aba6d264db094ff3a83903d8204399b57392bd0778",
    "transactionHash": "0x227f730898967f8862bfdce444c0010223411b61044394d6cf295a49461a4d2d",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 8843731,
        "transactionHash": "0x227f730898967f8862bfdce444c0010223411b61044394d6cf295a49461a4d2d",
        "address": "0x3891FB6b6B145Ad104FE98aC6EFAFc7d8feDD63C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0xc6e2c61c50571939d8a254aba6d264db094ff3a83903d8204399b57392bd0778"
      }
    ],
    "blockNumber": 8843731,
    "cumulativeGasUsed": "8288269",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe80110C0a290c493C543148c5445a23D3403a096",
    "0x21AbB50cf89Ab2Ccf685b5671C06b5577279CC15",
    "0x6b903e6751e10d9F8AEa932891DED743F2F22616",
    "0xfb852b5F27B29394d2b51062BF677C6539279807"
  ],
  "solcInputHash": "a9f830c0f7a81c19f770a0b97bdb89ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"},{\"internalType\":\"contract ITenderToken\",\"name\":\"_tenderToken\",\"type\":\"address\"},{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"_esp\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_datas\",\"type\":\"bytes[]\"}],\"name\":\"batchExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esp\",\"outputs\":[{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gulp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"migrateToNewTenderizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IElasticSupplyPool\",\"name\":\"_esp\",\"type\":\"address\"}],\"name\":\"setEsp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITenderFarm\",\"name\":\"_tenderFarm\",\"type\":\"address\"}],\"name\":\"setTenderFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderFarm\",\"outputs\":[{\"internalType\":\"contract ITenderFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderToken\",\"outputs\":[{\"internalType\":\"contract ITenderToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderizer\",\"outputs\":[{\"internalType\":\"contract ITenderizer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"updateStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Controller contract for a Tenderizer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./token/ITenderToken.sol\\\";\\nimport \\\"./tenderizer/ITenderizer.sol\\\";\\nimport \\\"./liquidity/IElasticSupplyPool.sol\\\";\\nimport \\\"./liquidity/ITenderFarm.sol\\\";\\n\\n/**\\n * @title Controller contract for a Tenderizer\\n */\\n\\ncontract Controller is Ownable {\\n    IERC20 public steak;\\n    ITenderizer public tenderizer;\\n    ITenderToken public tenderToken;\\n    IElasticSupplyPool public esp;\\n    ITenderFarm public tenderFarm;\\n\\n    constructor(\\n        IERC20 _steak,\\n        ITenderizer _tenderizer,\\n        ITenderToken _tenderToken,\\n        IElasticSupplyPool _esp\\n    ) {\\n        steak = _steak;\\n        tenderizer = _tenderizer;\\n        // TODO: consider deploying these contracts using factories and proxies\\n        // from the constructutor so that deploying a new system is only deploying a single contract\\n        tenderToken = _tenderToken;\\n        esp = _esp;\\n    }\\n\\n    function deposit(uint256 _amount) public {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        // mint tenderTokens\\n        require(tenderToken.mint(msg.sender, _amount), \\\"TENDER_MINT_FAILED\\\");\\n\\n        tenderizer.deposit(msg.sender, _amount);\\n\\n        _updateTotalPooledTokens();\\n\\n        // Transfer tokens to tenderizer\\n        require(steak.transferFrom(msg.sender, address(tenderizer), _amount), \\\"STEAK_TRANSFERFROM_FAILED\\\");\\n    }\\n\\n    function unlock(uint256 _amount) public {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n        // Burn tenderTokens\\n        require(tenderToken.burn(msg.sender, _amount), \\\"TENDER_BURN_FAILED\\\");\\n\\n        // update total pooled tokens\\n        _updateTotalPooledTokens();\\n\\n        // Unstake tokens for pending withdrawal\\n        tenderizer.unstake(msg.sender, _amount);\\n    }\\n\\n    function withdraw(uint256 _amount) public {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n        // Execute pending withdrawal\\n        // Reverts if unthawing period hasn't ended\\n        tenderizer.withdraw(msg.sender, _amount);\\n    }\\n\\n    function rebase() public onlyOwner {\\n        // stake tokens\\n        gulp();\\n\\n        // claim rewards\\n        tenderizer.claimRewards();\\n\\n        // update total pooled tokens\\n        _updateTotalPooledTokens();\\n\\n        // Collect governance fees\\n        _collectFees();\\n        // Collect LP fees\\n        _collectLiquidityFees();\\n\\n        // Resync weight for tenderToken\\n        try esp.resyncWeight(address(tenderToken)) {} catch {\\n            // No-op\\n        }\\n    }\\n\\n    function gulp() public {\\n        // gulp steak balance of Tenderizer and stake it\\n        tenderizer.stake(address(0), 0);\\n    }\\n\\n    function collectFees() public onlyOwner {\\n        _collectFees();\\n    }\\n\\n    function setEsp(IElasticSupplyPool _esp) public onlyOwner {\\n        require(address(_esp) != address(0), \\\"ZERO_ADDRESS\\\");\\n        esp = _esp;\\n    }\\n\\n    function migrateToNewTenderizer(ITenderizer _tenderizer) public onlyOwner {}\\n\\n    function updateStakingContract(address _stakingContract) public onlyOwner {\\n        tenderizer.setStakingContract(_stakingContract);\\n    }\\n\\n    function setTenderFarm(ITenderFarm _tenderFarm) public onlyOwner {\\n        tenderFarm = _tenderFarm;\\n    }\\n\\n    function execute(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) public onlyOwner {\\n        _execute(_target, _value, _data);\\n    }\\n\\n    function batchExecute(\\n        address[] calldata _targets,\\n        uint256[] calldata _values,\\n        bytes[] calldata _datas\\n    ) public onlyOwner {\\n        require(_targets.length == _values.length && _targets.length == _datas.length, \\\"INVALID_ARGUMENTS\\\");\\n        for (uint256 i = 0; i < _targets.length; i++) {\\n            _execute(_targets[i], _values[i], _datas[i]);\\n        }\\n    }\\n\\n    function _execute(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) internal {\\n        (bool success, bytes memory returnData) = _target.call{ value: _value }(_data);\\n        require(success, string(returnData));\\n    }\\n\\n    function _updateTotalPooledTokens() internal {\\n        // get total staked tokens\\n        uint256 stakedTokens = tenderizer.totalStakedTokens();\\n\\n        // Set total pooled tokens, rebases tenderToken supply\\n        tenderToken.setTotalPooledTokens(stakedTokens);\\n    }\\n\\n    function _collectFees() internal {\\n        // collect fees and get amount\\n        uint256 amount = tenderizer.collectFees();\\n\\n        // mint tenderToken to fee distributor (governance)\\n        tenderToken.mint(owner(), amount);\\n    }\\n\\n    function _collectLiquidityFees() internal {\\n        if (tenderFarm.nextTotalStake() == 0) return;\\n        // collect fees and get amount\\n        uint256 amount = tenderizer.collectLiquidityFees();\\n\\n        // mint tenderToken to fee distributor (governance)\\n        tenderToken.mint(address(this), amount);\\n        tenderToken.approve(address(tenderFarm), amount);\\n        tenderFarm.addRewards(amount);\\n    }\\n    // TODO:\\n    // Add rescuefunds to tenderizer:\\n}\\n\",\"keccak256\":\"0x1bfc035c640807e4fe0fc4c0ffbb2c8a243aa9211090efeb5f2e9c09f9763030\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/IElasticSupplyPool.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ninterface IElasticSupplyPool {\\n    function resyncWeight(address _token) external;\\n}\\n\",\"keccak256\":\"0xb33c7239e346ce89aa109e48dc4c7dd01a7874d42816afc2a77b6db2aaa8e9bc\",\"license\":\"GPL-3.0\"},\"contracts/liquidity/ITenderFarm.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ninterface ITenderFarm {\\n    function farm(uint256 _amount) external;\\n\\n    function farmFor(address _for, uint256 _amount) external;\\n\\n    function unfarm(uint256 _amount) external;\\n\\n    function harvest() external;\\n\\n    function addRewards(uint256 _amount) external;\\n\\n    function availableRewards(address _for) external view returns (uint256);\\n\\n    function stakeOf(address _of) external view returns (uint256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function nextTotalStake() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfad434c974c4e725f7d120d8d0d2352237f5af6a2ee793a597a890c30c87b509\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITenderizer {\\n    function deposit(address _from, uint256 _amount) external;\\n\\n    function stake(address _node, uint256 _amount) external;\\n\\n    function unstake(address _account, uint256 _amount) external;\\n\\n    function withdraw(address _account, uint256 _amount) external;\\n\\n    function claimRewards() external;\\n\\n    function collectFees() external returns (uint256);\\n\\n    function collectLiquidityFees() external returns (uint256);\\n\\n    function totalStakedTokens() external view returns (uint256);\\n\\n    // Governance\\n\\n    function setController(address _controller) external;\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n}\\n\",\"keccak256\":\"0x7444b6d881daf48a25d32a5cfd747b787e39a24e8cbeed106533fc81d88f5f0e\",\"license\":\"GPL-3.0\"},\"contracts/token/ITenderToken.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity ^0.8.0;\\n\\ninterface ITenderToken {\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function getTotalPooledTokens() external view returns (uint256);\\n\\n    function getTotalShares() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    function tokensToShares(uint256 _tokens) external view returns (uint256);\\n\\n    function sharesToTokens(uint256 _shares) external view returns (uint256);\\n\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n\\n    function mint(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function burn(address _account, uint256 _amount) external returns (bool);\\n\\n    function setTotalPooledTokens(uint256 _newTotalPooledTokens) external;\\n}\\n\",\"keccak256\":\"0xa4d2cd9d3474260a9d2bb6cb70dd2f7f7928d09984f49e359fb368573a88c765\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002c7438038062002c74833981810160405281019062000037919062000259565b600062000049620001f560201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620003b1565b600033905090565b6000815190506200020e8162000349565b92915050565b600081519050620002258162000363565b92915050565b6000815190506200023c816200037d565b92915050565b600081519050620002538162000397565b92915050565b600080600080608085870312156200027057600080fd5b60006200028087828801620001fd565b9450506020620002938782880162000242565b9350506040620002a6878288016200022b565b9250506060620002b98782880162000214565b91505092959194509250565b6000620002d28262000329565b9050919050565b6000620002e682620002c5565b9050919050565b6000620002fa82620002c5565b9050919050565b60006200030e82620002c5565b9050919050565b60006200032282620002c5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200035481620002d9565b81146200036057600080fd5b50565b6200036e81620002ed565b81146200037a57600080fd5b50565b620003888162000301565b81146200039457600080fd5b50565b620003a28162000315565b8114620003ae57600080fd5b50565b6128b380620003c16000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063af14052c116100ad578063d7f8e33c11610071578063d7f8e33c14610295578063f2fde38b146102b3578063f41cb976146102cf578063f4d95a71146102eb578063fbdfc961146103095761012c565b8063af14052c1461022d578063b61d27f614610237578063b6b55f2514610253578063c2ca884b1461026f578063c87965721461028b5761012c565b80636198e339116100f45780636198e339146101c15780636f190315146101dd578063715018a6146101fb5780638da5cb5b1461020557806394909e62146102235761012c565b8063077d97d7146101315780632d8221601461014d5780632e1a7d4d1461016b5780633347e4d6146101875780635b3e2077146101a3575b600080fd5b61014b60048036038101906101469190611e4f565b610325565b005b610155610505565b60405161016291906123f3565b60405180910390f35b61018560048036038101906101809190611f97565b61052b565b005b6101a1600480360381019061019c9190611dba565b610600565b005b6101ab61070c565b6040516101b8919061240e565b60405180910390f35b6101db60048036038101906101d69190611f97565b610732565b005b6101e56108fd565b6040516101f291906123a2565b60405180910390f35b610203610923565b005b61020d610a5d565b60405161021a91906122fe565b60405180910390f35b61022b610a86565b005b610235610b18565b005b610251600480360381019061024c9190611de3565b610cea565b005b61026d60048036038101906102689190611f97565b610d78565b005b61028960048036038101906102849190611f1c565b611055565b005b610293611185565b005b61029d61120b565b6040516102aa91906123bd565b60405180910390f35b6102cd60048036038101906102c89190611dba565b611231565b005b6102e960048036038101906102e49190611f6e565b6113da565b005b6102f3611459565b60405161030091906123d8565b60405180910390f35b610323600480360381019061031e9190611f45565b61147f565b005b61032d61153f565b73ffffffffffffffffffffffffffffffffffffffff1661034b610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146103a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103989061250b565b60405180910390fd5b83839050868690501480156103bb57508181905086869050145b6103fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f1906124eb565b60405180910390fd5b60005b868690508110156104fc576104e9878783818110610444577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906104599190611dba565b868684818110610492577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358585858181106104d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906104e49190612566565b611547565b80806104f49061276a565b9150506103fd565b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000811161056e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105659061252b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b81526004016105cb929190612379565b600060405180830381600087803b1580156105e557600080fd5b505af11580156105f9573d6000803e3d6000fd5b5050505050565b61060861153f565b73ffffffffffffffffffffffffffffffffffffffff16610626610a5d565b73ffffffffffffffffffffffffffffffffffffffff161461067c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106739061250b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dd373b9826040518263ffffffff1660e01b81526004016106d791906122fe565b600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008111610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076c9061252b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b81526004016107d2929190612379565b602060405180830381600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190611ef3565b610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a9061244b565b60405180910390fd5b61086b611605565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a672e033836040518363ffffffff1660e01b81526004016108c8929190612379565b600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61092b61153f565b73ffffffffffffffffffffffffffffffffffffffff16610949610a5d565b73ffffffffffffffffffffffffffffffffffffffff161461099f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109969061250b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adc9772e6000806040518363ffffffff1660e01b8152600401610ae4929190612350565b600060405180830381600087803b158015610afe57600080fd5b505af1158015610b12573d6000803e3d6000fd5b50505050565b610b2061153f565b73ffffffffffffffffffffffffffffffffffffffff16610b3e610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b9061250b565b60405180910390fd5b610b9c610a86565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b50505050610c26611605565b610c2e611739565b610c36611899565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f93ab47600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610cb391906122fe565b600060405180830381600087803b158015610ccd57600080fd5b505af1925050508015610cde575060015b610ce757610ce8565b5b565b610cf261153f565b73ffffffffffffffffffffffffffffffffffffffff16610d10610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d9061250b565b60405180910390fd5b610d7284848484611547565b50505050565b60008111610dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db29061252b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610e18929190612379565b602060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190611ef3565b610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea0906124ab565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433836040518363ffffffff1660e01b8152600401610f06929190612379565b600060405180830381600087803b158015610f2057600080fd5b505af1158015610f34573d6000803e3d6000fd5b50505050610f40611605565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610fc193929190612319565b602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190611ef3565b611052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110499061246b565b60405180910390fd5b50565b61105d61153f565b73ffffffffffffffffffffffffffffffffffffffff1661107b610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c89061250b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611141576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611138906124cb565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61118d61153f565b73ffffffffffffffffffffffffffffffffffffffff166111ab610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f89061250b565b60405180910390fd5b611209611739565b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61123961153f565b73ffffffffffffffffffffffffffffffffffffffff16611257610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a49061250b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561131d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113149061248b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6113e261153f565b73ffffffffffffffffffffffffffffffffffffffff16611400610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144d9061250b565b60405180910390fd5b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61148761153f565b73ffffffffffffffffffffffffffffffffffffffff166114a5610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f29061250b565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff168585856040516115729291906122e5565b60006040518083038185875af1925050503d80600081146115af576040519150601f19603f3d011682016040523d82523d6000602084013e6115b4565b606091505b50915091508181906115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f39190612429565b60405180910390fd5b50505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561166f57600080fd5b505afa158015611683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a79190611fc0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4eaf749826040518263ffffffff1660e01b8152600401611704919061254b565b600060405180830381600087803b15801561171e57600080fd5b505af1158015611732573d6000803e3d6000fd5b5050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87965726040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117a557600080fd5b505af11580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190611fc0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19611825610a5d565b836040518363ffffffff1660e01b8152600401611843929190612379565b602060405180830381600087803b15801561185d57600080fd5b505af1158015611871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118959190611ef3565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d3b7c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561190357600080fd5b505afa158015611917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193b9190611fc0565b141561194657611bfd565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b089af316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea9190611fc0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401611a49929190612379565b602060405180830381600087803b158015611a6357600080fd5b505af1158015611a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9b9190611ef3565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b1b929190612379565b602060405180830381600087803b158015611b3557600080fd5b505af1158015611b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6d9190611ef3565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beceed39826040518263ffffffff1660e01b8152600401611bc9919061254b565b600060405180830381600087803b158015611be357600080fd5b505af1158015611bf7573d6000803e3d6000fd5b50505050505b565b600081359050611c0e816127f3565b92915050565b60008083601f840112611c2657600080fd5b8235905067ffffffffffffffff811115611c3f57600080fd5b602083019150836020820283011115611c5757600080fd5b9250929050565b60008083601f840112611c7057600080fd5b8235905067ffffffffffffffff811115611c8957600080fd5b602083019150836020820283011115611ca157600080fd5b9250929050565b60008083601f840112611cba57600080fd5b8235905067ffffffffffffffff811115611cd357600080fd5b602083019150836020820283011115611ceb57600080fd5b9250929050565b600081519050611d018161280a565b92915050565b60008083601f840112611d1957600080fd5b8235905067ffffffffffffffff811115611d3257600080fd5b602083019150836001820283011115611d4a57600080fd5b9250929050565b600081359050611d6081612821565b92915050565b600081359050611d7581612838565b92915050565b600081359050611d8a8161284f565b92915050565b600081359050611d9f81612866565b92915050565b600081519050611db481612866565b92915050565b600060208284031215611dcc57600080fd5b6000611dda84828501611bff565b91505092915050565b60008060008060608587031215611df957600080fd5b6000611e0787828801611bff565b9450506020611e1887828801611d90565b935050604085013567ffffffffffffffff811115611e3557600080fd5b611e4187828801611d07565b925092505092959194509250565b60008060008060008060608789031215611e6857600080fd5b600087013567ffffffffffffffff811115611e8257600080fd5b611e8e89828a01611c14565b9650965050602087013567ffffffffffffffff811115611ead57600080fd5b611eb989828a01611ca8565b9450945050604087013567ffffffffffffffff811115611ed857600080fd5b611ee489828a01611c5e565b92509250509295509295509295565b600060208284031215611f0557600080fd5b6000611f1384828501611cf2565b91505092915050565b600060208284031215611f2e57600080fd5b6000611f3c84828501611d51565b91505092915050565b600060208284031215611f5757600080fd5b6000611f6584828501611d66565b91505092915050565b600060208284031215611f8057600080fd5b6000611f8e84828501611d7b565b91505092915050565b600060208284031215611fa957600080fd5b6000611fb784828501611d90565b91505092915050565b600060208284031215611fd257600080fd5b6000611fe084828501611da5565b91505092915050565b611ff2816125e4565b82525050565b600061200483856125c8565b9350612011838584612728565b82840190509392505050565b61202681612662565b82525050565b61203581612686565b82525050565b612044816126aa565b82525050565b612053816126ce565b82525050565b612062816126f2565b82525050565b61207181612716565b82525050565b6000612082826125bd565b61208c81856125d3565b935061209c818560208601612737565b6120a5816127e2565b840191505092915050565b60006120bd6012836125d3565b91507f54454e4445525f4255524e5f4641494c454400000000000000000000000000006000830152602082019050919050565b60006120fd6019836125d3565b91507f535445414b5f5452414e5346455246524f4d5f4641494c4544000000000000006000830152602082019050919050565b600061213d6026836125d3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006121a36012836125d3565b91507f54454e4445525f4d494e545f4641494c454400000000000000000000000000006000830152602082019050919050565b60006121e3600c836125d3565b91507f5a45524f5f4144445245535300000000000000000000000000000000000000006000830152602082019050919050565b60006122236011836125d3565b91507f494e56414c49445f415247554d454e54530000000000000000000000000000006000830152602082019050919050565b60006122636020836125d3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006122a3600b836125d3565b91507f5a45524f5f414d4f554e540000000000000000000000000000000000000000006000830152602082019050919050565b6122df81612658565b82525050565b60006122f2828486611ff8565b91508190509392505050565b60006020820190506123136000830184611fe9565b92915050565b600060608201905061232e6000830186611fe9565b61233b6020830185611fe9565b61234860408301846122d6565b949350505050565b60006040820190506123656000830185611fe9565b6123726020830184612068565b9392505050565b600060408201905061238e6000830185611fe9565b61239b60208301846122d6565b9392505050565b60006020820190506123b7600083018461201d565b92915050565b60006020820190506123d2600083018461202c565b92915050565b60006020820190506123ed600083018461203b565b92915050565b6000602082019050612408600083018461204a565b92915050565b60006020820190506124236000830184612059565b92915050565b600060208201905081810360008301526124438184612077565b905092915050565b60006020820190508181036000830152612464816120b0565b9050919050565b60006020820190508181036000830152612484816120f0565b9050919050565b600060208201905081810360008301526124a481612130565b9050919050565b600060208201905081810360008301526124c481612196565b9050919050565b600060208201905081810360008301526124e4816121d6565b9050919050565b6000602082019050818103600083015261250481612216565b9050919050565b6000602082019050818103600083015261252481612256565b9050919050565b6000602082019050818103600083015261254481612296565b9050919050565b600060208201905061256060008301846122d6565b92915050565b6000808335600160200384360303811261257f57600080fd5b80840192508235915067ffffffffffffffff82111561259d57600080fd5b6020830192506001820236038313156125b557600080fd5b509250929050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006125ef82612638565b9050919050565b60008115159050919050565b600061260d826125e4565b9050919050565b600061261f826125e4565b9050919050565b6000612631826125e4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061266d82612674565b9050919050565b600061267f82612638565b9050919050565b600061269182612698565b9050919050565b60006126a382612638565b9050919050565b60006126b5826126bc565b9050919050565b60006126c782612638565b9050919050565b60006126d9826126e0565b9050919050565b60006126eb82612638565b9050919050565b60006126fd82612704565b9050919050565b600061270f82612638565b9050919050565b600061272182612658565b9050919050565b82818337600083830152505050565b60005b8381101561275557808201518184015260208101905061273a565b83811115612764576000848401525b50505050565b600061277582612658565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127a8576127a76127b3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b6127fc816125e4565b811461280757600080fd5b50565b612813816125f6565b811461281e57600080fd5b50565b61282a81612602565b811461283557600080fd5b50565b61284181612614565b811461284c57600080fd5b50565b61285881612626565b811461286357600080fd5b50565b61286f81612658565b811461287a57600080fd5b5056fea2646970667358221220fed29f9f6f9d27ffb70948fa1264c5dd05a975d9c841150275b3c5eebeef011964736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c8063af14052c116100ad578063d7f8e33c11610071578063d7f8e33c14610295578063f2fde38b146102b3578063f41cb976146102cf578063f4d95a71146102eb578063fbdfc961146103095761012c565b8063af14052c1461022d578063b61d27f614610237578063b6b55f2514610253578063c2ca884b1461026f578063c87965721461028b5761012c565b80636198e339116100f45780636198e339146101c15780636f190315146101dd578063715018a6146101fb5780638da5cb5b1461020557806394909e62146102235761012c565b8063077d97d7146101315780632d8221601461014d5780632e1a7d4d1461016b5780633347e4d6146101875780635b3e2077146101a3575b600080fd5b61014b60048036038101906101469190611e4f565b610325565b005b610155610505565b60405161016291906123f3565b60405180910390f35b61018560048036038101906101809190611f97565b61052b565b005b6101a1600480360381019061019c9190611dba565b610600565b005b6101ab61070c565b6040516101b8919061240e565b60405180910390f35b6101db60048036038101906101d69190611f97565b610732565b005b6101e56108fd565b6040516101f291906123a2565b60405180910390f35b610203610923565b005b61020d610a5d565b60405161021a91906122fe565b60405180910390f35b61022b610a86565b005b610235610b18565b005b610251600480360381019061024c9190611de3565b610cea565b005b61026d60048036038101906102689190611f97565b610d78565b005b61028960048036038101906102849190611f1c565b611055565b005b610293611185565b005b61029d61120b565b6040516102aa91906123bd565b60405180910390f35b6102cd60048036038101906102c89190611dba565b611231565b005b6102e960048036038101906102e49190611f6e565b6113da565b005b6102f3611459565b60405161030091906123d8565b60405180910390f35b610323600480360381019061031e9190611f45565b61147f565b005b61032d61153f565b73ffffffffffffffffffffffffffffffffffffffff1661034b610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146103a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103989061250b565b60405180910390fd5b83839050868690501480156103bb57508181905086869050145b6103fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f1906124eb565b60405180910390fd5b60005b868690508110156104fc576104e9878783818110610444577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906104599190611dba565b868684818110610492577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201358585858181106104d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906104e49190612566565b611547565b80806104f49061276a565b9150506103fd565b50505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000811161056e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105659061252b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b81526004016105cb929190612379565b600060405180830381600087803b1580156105e557600080fd5b505af11580156105f9573d6000803e3d6000fd5b5050505050565b61060861153f565b73ffffffffffffffffffffffffffffffffffffffff16610626610a5d565b73ffffffffffffffffffffffffffffffffffffffff161461067c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106739061250b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dd373b9826040518263ffffffff1660e01b81526004016106d791906122fe565b600060405180830381600087803b1580156106f157600080fd5b505af1158015610705573d6000803e3d6000fd5b5050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008111610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076c9061252b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33836040518363ffffffff1660e01b81526004016107d2929190612379565b602060405180830381600087803b1580156107ec57600080fd5b505af1158015610800573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108249190611ef3565b610863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085a9061244b565b60405180910390fd5b61086b611605565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2a672e033836040518363ffffffff1660e01b81526004016108c8929190612379565b600060405180830381600087803b1580156108e257600080fd5b505af11580156108f6573d6000803e3d6000fd5b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61092b61153f565b73ffffffffffffffffffffffffffffffffffffffff16610949610a5d565b73ffffffffffffffffffffffffffffffffffffffff161461099f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109969061250b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663adc9772e6000806040518363ffffffff1660e01b8152600401610ae4929190612350565b600060405180830381600087803b158015610afe57600080fd5b505af1158015610b12573d6000803e3d6000fd5b50505050565b610b2061153f565b73ffffffffffffffffffffffffffffffffffffffff16610b3e610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b9061250b565b60405180910390fd5b610b9c610a86565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610c0657600080fd5b505af1158015610c1a573d6000803e3d6000fd5b50505050610c26611605565b610c2e611739565b610c36611899565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f93ab47600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610cb391906122fe565b600060405180830381600087803b158015610ccd57600080fd5b505af1925050508015610cde575060015b610ce757610ce8565b5b565b610cf261153f565b73ffffffffffffffffffffffffffffffffffffffff16610d10610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d9061250b565b60405180910390fd5b610d7284848484611547565b50505050565b60008111610dbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db29061252b565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610e18929190612379565b602060405180830381600087803b158015610e3257600080fd5b505af1158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190611ef3565b610ea9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea0906124ab565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166347e7ef2433836040518363ffffffff1660e01b8152600401610f06929190612379565b600060405180830381600087803b158015610f2057600080fd5b505af1158015610f34573d6000803e3d6000fd5b50505050610f40611605565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff1660e01b8152600401610fc193929190612319565b602060405180830381600087803b158015610fdb57600080fd5b505af1158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190611ef3565b611052576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110499061246b565b60405180910390fd5b50565b61105d61153f565b73ffffffffffffffffffffffffffffffffffffffff1661107b610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c89061250b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611141576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611138906124cb565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61118d61153f565b73ffffffffffffffffffffffffffffffffffffffff166111ab610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f89061250b565b60405180910390fd5b611209611739565b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61123961153f565b73ffffffffffffffffffffffffffffffffffffffff16611257610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a49061250b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561131d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113149061248b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6113e261153f565b73ffffffffffffffffffffffffffffffffffffffff16611400610a5d565b73ffffffffffffffffffffffffffffffffffffffff1614611456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144d9061250b565b60405180910390fd5b50565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61148761153f565b73ffffffffffffffffffffffffffffffffffffffff166114a5610a5d565b73ffffffffffffffffffffffffffffffffffffffff16146114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f29061250b565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000808573ffffffffffffffffffffffffffffffffffffffff168585856040516115729291906122e5565b60006040518083038185875af1925050503d80600081146115af576040519150601f19603f3d011682016040523d82523d6000602084013e6115b4565b606091505b50915091508181906115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f39190612429565b60405180910390fd5b50505050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561166f57600080fd5b505afa158015611683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a79190611fc0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a4eaf749826040518263ffffffff1660e01b8152600401611704919061254b565b600060405180830381600087803b15801561171e57600080fd5b505af1158015611732573d6000803e3d6000fd5b5050505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c87965726040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156117a557600080fd5b505af11580156117b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117dd9190611fc0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19611825610a5d565b836040518363ffffffff1660e01b8152600401611843929190612379565b602060405180830381600087803b15801561185d57600080fd5b505af1158015611871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118959190611ef3565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d3b7c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561190357600080fd5b505afa158015611917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193b9190611fc0565b141561194657611bfd565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b089af316040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156119b257600080fd5b505af11580156119c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ea9190611fc0565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401611a49929190612379565b602060405180830381600087803b158015611a6357600080fd5b505af1158015611a77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9b9190611ef3565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611b1b929190612379565b602060405180830381600087803b158015611b3557600080fd5b505af1158015611b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6d9190611ef3565b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beceed39826040518263ffffffff1660e01b8152600401611bc9919061254b565b600060405180830381600087803b158015611be357600080fd5b505af1158015611bf7573d6000803e3d6000fd5b50505050505b565b600081359050611c0e816127f3565b92915050565b60008083601f840112611c2657600080fd5b8235905067ffffffffffffffff811115611c3f57600080fd5b602083019150836020820283011115611c5757600080fd5b9250929050565b60008083601f840112611c7057600080fd5b8235905067ffffffffffffffff811115611c8957600080fd5b602083019150836020820283011115611ca157600080fd5b9250929050565b60008083601f840112611cba57600080fd5b8235905067ffffffffffffffff811115611cd357600080fd5b602083019150836020820283011115611ceb57600080fd5b9250929050565b600081519050611d018161280a565b92915050565b60008083601f840112611d1957600080fd5b8235905067ffffffffffffffff811115611d3257600080fd5b602083019150836001820283011115611d4a57600080fd5b9250929050565b600081359050611d6081612821565b92915050565b600081359050611d7581612838565b92915050565b600081359050611d8a8161284f565b92915050565b600081359050611d9f81612866565b92915050565b600081519050611db481612866565b92915050565b600060208284031215611dcc57600080fd5b6000611dda84828501611bff565b91505092915050565b60008060008060608587031215611df957600080fd5b6000611e0787828801611bff565b9450506020611e1887828801611d90565b935050604085013567ffffffffffffffff811115611e3557600080fd5b611e4187828801611d07565b925092505092959194509250565b60008060008060008060608789031215611e6857600080fd5b600087013567ffffffffffffffff811115611e8257600080fd5b611e8e89828a01611c14565b9650965050602087013567ffffffffffffffff811115611ead57600080fd5b611eb989828a01611ca8565b9450945050604087013567ffffffffffffffff811115611ed857600080fd5b611ee489828a01611c5e565b92509250509295509295509295565b600060208284031215611f0557600080fd5b6000611f1384828501611cf2565b91505092915050565b600060208284031215611f2e57600080fd5b6000611f3c84828501611d51565b91505092915050565b600060208284031215611f5757600080fd5b6000611f6584828501611d66565b91505092915050565b600060208284031215611f8057600080fd5b6000611f8e84828501611d7b565b91505092915050565b600060208284031215611fa957600080fd5b6000611fb784828501611d90565b91505092915050565b600060208284031215611fd257600080fd5b6000611fe084828501611da5565b91505092915050565b611ff2816125e4565b82525050565b600061200483856125c8565b9350612011838584612728565b82840190509392505050565b61202681612662565b82525050565b61203581612686565b82525050565b612044816126aa565b82525050565b612053816126ce565b82525050565b612062816126f2565b82525050565b61207181612716565b82525050565b6000612082826125bd565b61208c81856125d3565b935061209c818560208601612737565b6120a5816127e2565b840191505092915050565b60006120bd6012836125d3565b91507f54454e4445525f4255524e5f4641494c454400000000000000000000000000006000830152602082019050919050565b60006120fd6019836125d3565b91507f535445414b5f5452414e5346455246524f4d5f4641494c4544000000000000006000830152602082019050919050565b600061213d6026836125d3565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006121a36012836125d3565b91507f54454e4445525f4d494e545f4641494c454400000000000000000000000000006000830152602082019050919050565b60006121e3600c836125d3565b91507f5a45524f5f4144445245535300000000000000000000000000000000000000006000830152602082019050919050565b60006122236011836125d3565b91507f494e56414c49445f415247554d454e54530000000000000000000000000000006000830152602082019050919050565b60006122636020836125d3565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006122a3600b836125d3565b91507f5a45524f5f414d4f554e540000000000000000000000000000000000000000006000830152602082019050919050565b6122df81612658565b82525050565b60006122f2828486611ff8565b91508190509392505050565b60006020820190506123136000830184611fe9565b92915050565b600060608201905061232e6000830186611fe9565b61233b6020830185611fe9565b61234860408301846122d6565b949350505050565b60006040820190506123656000830185611fe9565b6123726020830184612068565b9392505050565b600060408201905061238e6000830185611fe9565b61239b60208301846122d6565b9392505050565b60006020820190506123b7600083018461201d565b92915050565b60006020820190506123d2600083018461202c565b92915050565b60006020820190506123ed600083018461203b565b92915050565b6000602082019050612408600083018461204a565b92915050565b60006020820190506124236000830184612059565b92915050565b600060208201905081810360008301526124438184612077565b905092915050565b60006020820190508181036000830152612464816120b0565b9050919050565b60006020820190508181036000830152612484816120f0565b9050919050565b600060208201905081810360008301526124a481612130565b9050919050565b600060208201905081810360008301526124c481612196565b9050919050565b600060208201905081810360008301526124e4816121d6565b9050919050565b6000602082019050818103600083015261250481612216565b9050919050565b6000602082019050818103600083015261252481612256565b9050919050565b6000602082019050818103600083015261254481612296565b9050919050565b600060208201905061256060008301846122d6565b92915050565b6000808335600160200384360303811261257f57600080fd5b80840192508235915067ffffffffffffffff82111561259d57600080fd5b6020830192506001820236038313156125b557600080fd5b509250929050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006125ef82612638565b9050919050565b60008115159050919050565b600061260d826125e4565b9050919050565b600061261f826125e4565b9050919050565b6000612631826125e4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061266d82612674565b9050919050565b600061267f82612638565b9050919050565b600061269182612698565b9050919050565b60006126a382612638565b9050919050565b60006126b5826126bc565b9050919050565b60006126c782612638565b9050919050565b60006126d9826126e0565b9050919050565b60006126eb82612638565b9050919050565b60006126fd82612704565b9050919050565b600061270f82612638565b9050919050565b600061272182612658565b9050919050565b82818337600083830152505050565b60005b8381101561275557808201518184015260208101905061273a565b83811115612764576000848401525b50505050565b600061277582612658565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127a8576127a76127b3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000601f19601f8301169050919050565b6127fc816125e4565b811461280757600080fd5b50565b612813816125f6565b811461281e57600080fd5b50565b61282a81612602565b811461283557600080fd5b50565b61284181612614565b811461284c57600080fd5b50565b61285881612626565b811461286357600080fd5b50565b61286f81612658565b811461287a57600080fd5b5056fea2646970667358221220fed29f9f6f9d27ffb70948fa1264c5dd05a975d9c841150275b3c5eebeef011964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Controller contract for a Tenderizer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 802,
        "contract": "contracts/Controller.sol:Controller",
        "label": "steak",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)740"
      },
      {
        "astId": 805,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderizer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITenderizer)2160"
      },
      {
        "astId": 808,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITenderToken)4772"
      },
      {
        "astId": 811,
        "contract": "contracts/Controller.sol:Controller",
        "label": "esp",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IElasticSupplyPool)1521"
      },
      {
        "astId": 814,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tenderFarm",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ITenderFarm)1686"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)740": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IElasticSupplyPool)1521": {
        "encoding": "inplace",
        "label": "contract IElasticSupplyPool",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderFarm)1686": {
        "encoding": "inplace",
        "label": "contract ITenderFarm",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderToken)4772": {
        "encoding": "inplace",
        "label": "contract ITenderToken",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderizer)2160": {
        "encoding": "inplace",
        "label": "contract ITenderizer",
        "numberOfBytes": "20"
      }
    }
  }
}