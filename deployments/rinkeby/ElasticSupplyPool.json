{
  "address": "0xfb852b5F27B29394d2b51062BF677C6539279807",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "poolTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "poolTokenName",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "constituentTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenBalances",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenWeights",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "swapFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct ConfigurableRightsPool.PoolParams",
          "name": "poolParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "canPauseSwapping",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeSwapFee",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeWeights",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canAddRemoveTokens",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canWhitelistLPs",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "canChangeCap",
              "type": "bool"
            }
          ],
          "internalType": "struct RightsManager.Rights",
          "name": "rightsStruct",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapChanged",
      "type": "event"
    },
    {
      "anonymous": true,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "sig",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "LogCall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        }
      ],
      "name": "LogExit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        }
      ],
      "name": "LogJoin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "NewTokenCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addTokenTimeLockInBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "applyAddToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bFactory",
      "outputs": [
        {
          "internalType": "contract IBFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bPool",
      "outputs": [
        {
          "internalType": "contract IBPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bspCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "canProvideLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denormalizedWeight",
          "type": "uint256"
        }
      ],
      "name": "commitAddToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumWeightChangeBlockPeriodParam",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "addTokenTimeLockInBlocksParam",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPoolAmountIn",
          "type": "uint256"
        }
      ],
      "name": "exitswapExternAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "exitswapPoolAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalancerSafeMathVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getDenormalizedWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRightsManagerVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartPoolManagerVersion",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gradualUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RightsManager.Permissions",
          "name": "permission",
          "type": "uint8"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseApproval",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPublicSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPoolAmountOut",
          "type": "uint256"
        }
      ],
      "name": "joinswapExternAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "joinswapPoolAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumWeightChangeBlockPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isCommitted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "commitBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denorm",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pokeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pushPoolShareFromLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "removeWhitelistedLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "resyncWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rights",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canPauseSwapping",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeSwapFee",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeWeights",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canAddRemoveTokens",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canWhitelistLPs",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "canChangeCap",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "publicSwap",
          "type": "bool"
        }
      ],
      "name": "setPublicSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "swapFee",
          "type": "uint256"
        }
      ],
      "name": "setSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        }
      ],
      "name": "updateWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "newWeights",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "updateWeightsGradually",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "whitelistLiquidityProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c3236af2d1f9c8900222be895e614289f9769f2e735928e3d4441d00deededa",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0xfb852b5F27B29394d2b51062BF677C6539279807",
    "transactionIndex": 4,
    "gasUsed": "4921716",
    "logsBloom": "0x
    "blockHash": "0x08646a8d44c98a9cc63278068ede0a4016926b2d1314e455e775e88d7c3670b0",
    "transactionHash": "0x0c3236af2d1f9c8900222be895e614289f9769f2e735928e3d4441d00deededa",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 8843730,
        "transactionHash": "0x0c3236af2d1f9c8900222be895e614289f9769f2e735928e3d4441d00deededa",
        "address": "0x6b903e6751e10d9F8AEa932891DED743F2F22616",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000fb852b5f27b29394d2b51062bf677c6539279807",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 7,
        "blockHash": "0x08646a8d44c98a9cc63278068ede0a4016926b2d1314e455e775e88d7c3670b0"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 8843730,
        "transactionHash": "0x0c3236af2d1f9c8900222be895e614289f9769f2e735928e3d4441d00deededa",
        "address": "0xe80110C0a290c493C543148c5445a23D3403a096",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000fb852b5f27b29394d2b51062bf677c6539279807",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0x08646a8d44c98a9cc63278068ede0a4016926b2d1314e455e775e88d7c3670b0"
      }
    ],
    "blockNumber": 8843730,
    "cumulativeGasUsed": "9178629",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdB7057BCC60562Ea4971C8471640633Dd6B65319",
    {
      "poolTokenSymbol": "BAL-REBASING-SMART-V1-tLPT-LPT",
      "poolTokenName": "Balancer Rebasing Smart Pool Token V1 (tLPT-LPT)",
      "constituentTokens": [
        "0x6b903e6751e10d9F8AEa932891DED743F2F22616",
        "0xe80110C0a290c493C543148c5445a23D3403a096"
      ],
      "tokenBalances": [
        "50000000000000000000000",
        "50000000000000000000000"
      ],
      "tokenWeights": [
        "7071067811870000000",
        "7071067811870000000"
      ],
      "swapFee": "3000000000000000"
    },
    {
      "canPauseSwapping": true,
      "canChangeSwapFee": true,
      "canChangeWeights": true,
      "canAddRemoveTokens": false,
      "canWhitelistLPs": false,
      "canChangeCap": false
    }
  ],
  "solcInputHash": "1eb9c33d518bac0f324a602891a799da",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"poolTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTokenName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"constituentTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenBalances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"internalType\":\"struct ConfigurableRightsPool.PoolParams\",\"name\":\"poolParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"internalType\":\"struct RightsManager.Rights\",\"name\":\"rightsStruct\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapChanged\",\"type\":\"event\"},{\"anonymous\":true,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"sig\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogCall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"name\":\"LogExit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"name\":\"LogJoin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NewTokenCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTokenTimeLockInBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"applyAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bFactory\",\"outputs\":[{\"internalType\":\"contract IBFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bPool\",\"outputs\":[{\"internalType\":\"contract IBPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bspCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"canProvideLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denormalizedWeight\",\"type\":\"uint256\"}],\"name\":\"commitAddToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumWeightChangeBlockPeriodParam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"addTokenTimeLockInBlocksParam\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPoolAmountIn\",\"type\":\"uint256\"}],\"name\":\"exitswapExternAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitswapPoolAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancerSafeMathVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getDenormalizedWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRightsManagerVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartPoolManagerVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gradualUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RightsManager.Permissions\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPublicSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"joinswapExternAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"joinswapPoolAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumWeightChangeBlockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"commitBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denorm\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pokeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pushPoolShareFromLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"removeWhitelistedLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"resyncWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rights\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canPauseSwapping\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeSwapFee\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeWeights\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canAddRemoveTokens\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWhitelistLPs\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canChangeCap\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"publicSwap\",\"type\":\"bool\"}],\"name\":\"setPublicSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newWeight\",\"type\":\"uint256\"}],\"name\":\"updateWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"newWeights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"updateWeightsGradually\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"whitelistLiquidityProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ampleforth engineering team & Balancer Labs Reference: https://github.com/balancer-labs/configurable-rights-pool/blob/master/contracts/templates/ElasticSupplyPool.sol\",\"details\":\"Extension of Balancer labs' configurable rights pool (smart-pool).        Amples are a dynamic supply tokens, supply and individual balances change daily by a Rebase operation.        In constant-function markets, Ampleforth's supply adjustments result in Impermanent Loss (IL)        to liquidity providers. The AmplElasticCRP is an extension of Balancer Lab's        ConfigurableRightsPool which mitigates IL induced by supply adjustments.        It accomplishes this by doing the following mechanism:        The `resyncWeight` method will be invoked atomically after rebase through Ampleforth's orchestrator.        When rebase changes supply, ampl weight is updated to the geometric mean of        the current ampl weight and the target. Every other token's weight is updated        proportionally such that relative ratios are same.        Weights: {w_ampl, w_t1 ... w_tn}        Rebase_change: x% (Ample's supply changes by x%, can be positive or negative)        Ample target weight: w_ampl_target = (100+x)/100 * w_ampl        w_ampl_new = sqrt(w_ampl * w_ampl_target)  // geometric mean        for i in tn:           w_ti_new = (w_ampl_new * w_ti) / w_ampl_target\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"- owner of the tokens\",\"spender\":\"- entity allowed to spend the tokens\"},\"returns\":{\"_0\":\"uint - remaining amount spender is allowed to transfer\"}},\"approve(address,uint256)\":{\"details\":\"emits an Approval event\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"- address we're checking the balance of\"},\"returns\":{\"_0\":\"uint - token balance in the account\"}},\"canProvideLiquidity(address)\":{\"details\":\"If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)\",\"returns\":{\"_0\":\"boolean value indicating whether the address can join a pool\"}},\"commitAddToken(address,uint256,uint256)\":{\"details\":\"The purpose of this two-stage commit is to give warning of a potentially dangerous      operation. A malicious pool operator could add a large amount of a low-value token,      then drain the pool through price manipulation. Of course, there are many      legitimate purposes, such as adding additional collateral tokens.\",\"params\":{\"balance\":\"- how much to be added\",\"denormalizedWeight\":\"- the desired token weight\",\"token\":\"- the token to be added\"}},\"createPool(uint256,uint256,uint256)\":{\"details\":\"Initialize the swap fee to the value provided in the CRP constructor      Can be changed if the canChangeSwapFee permission is enabled      Time parameters will be fixed at these values      If this contract doesn't have canChangeWeights permission - or you want to use the default      values, the block time arguments are not needed, and you can just call the single-argument      createPool()\",\"params\":{\"addTokenTimeLockInBlocksParam\":\"- Enforce a mandatory wait time between updates                                   This is also the wait time between committing and applying a new token\",\"initialSupply\":\"- Starting token balance\",\"minimumWeightChangeBlockPeriodParam\":\"- Enforce a minimum time between the start and end blocks\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseApproval(address,uint256)\":{\"details\":\"emits an Approval eventIf you try to decrease it below the current limit, it's just set to zero (not an error)\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"exitPool(uint256,uint256[])\":{\"details\":\"Emits a LogExit event for each token      bPool is a contract interface; function calls on it are external\",\"params\":{\"minAmountsOut\":\"- minimum amount of asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\"}},\"exitswapExternAmountOut(address,uint256,uint256)\":{\"details\":\"Emits a LogExit event for the token\",\"params\":{\"maxPoolAmountIn\":\"- maximum pool tokens to be redeemed\",\"tokenAmountOut\":\"- amount of underlying asset tokens to receive\",\"tokenOut\":\"- which token the caller wants to receive\"},\"returns\":{\"poolAmountIn\":\"- amount of pool tokens redeemed\"}},\"exitswapPoolAmountIn(address,uint256,uint256)\":{\"details\":\"Emits a LogExit event for the token\",\"params\":{\"minAmountOut\":\"- minimum asset tokens to receive\",\"poolAmountIn\":\"- amount of pool tokens to redeem\",\"tokenOut\":\"- which token the caller wants to receive\"},\"returns\":{\"tokenAmountOut\":\"- amount of asset tokens returned\"}},\"getBalancerSafeMathVersion()\":{\"details\":\"Convenience function to get the address of the BalancerSafeMath library (so clients can check version)\",\"returns\":{\"_0\":\"address of the BalancerSafeMath library\"}},\"getController()\":{\"details\":\"external for gas optimization\",\"returns\":{\"_0\":\"address - of the owner (AKA controller)\"}},\"getDenormalizedWeight(address)\":{\"details\":\"viewlock to prevent calling if it's being updated\",\"returns\":{\"_0\":\"token weight\"}},\"getRightsManagerVersion()\":{\"details\":\"Convenience function to get the address of the RightsManager library (so clients can check version)\",\"returns\":{\"_0\":\"address of the RightsManager library\"}},\"getSmartPoolManagerVersion()\":{\"details\":\"Convenience function to get the address of the SmartPoolManager library (so clients can check version)\",\"returns\":{\"_0\":\"address of the SmartPoolManager library\"}},\"hasPermission(uint8)\":{\"details\":\"value of the enum is just the 0-based index in the enumeration      For instance canPauseSwapping is 0; canChangeWeights is 2\",\"returns\":{\"_0\":\"token boolean true if we have the given permission\"}},\"increaseApproval(address,uint256)\":{\"details\":\"emits an Approval event\",\"params\":{\"amount\":\"- number of tokens being approved\",\"spender\":\"- entity the owner (sender) is approving to spend his tokens\"},\"returns\":{\"_0\":\"bool - result of the approval (will always be true if it doesn't revert)\"}},\"isPublicSwap()\":{\"details\":\"viewLock, because setPublicSwap is lock      bPool is a contract interface; function calls on it are external\",\"returns\":{\"_0\":\"Current value of isPublicSwap\"}},\"joinPool(uint256,uint256[])\":{\"details\":\"Emits a LogJoin event (for each token)      bPool is a contract interface; function calls on it are external\",\"params\":{\"maxAmountsIn\":\"- Max amount of asset tokens to spend\",\"poolAmountOut\":\"- number of pool tokens to receive\"}},\"joinswapExternAmountIn(address,uint256,uint256)\":{\"details\":\"emits a LogJoin event\",\"params\":{\"minPoolAmountOut\":\"- minimum of pool tokens to receive\",\"tokenAmountIn\":\"- amount of deposit\",\"tokenIn\":\"- which token we're transferring in\"},\"returns\":{\"poolAmountOut\":\"- amount of pool tokens minted and transferred\"}},\"joinswapPoolAmountOut(address,uint256,uint256)\":{\"details\":\"emits a LogJoin event\",\"params\":{\"maxAmountIn\":\"- Maximum asset tokens that can be pulled to pay for the pool tokens\",\"poolAmountOut\":\"- amount of pool tokens to be received\",\"tokenIn\":\"- which token we're transferring in (system calculates amount required)\"},\"returns\":{\"tokenAmountIn\":\"- amount of asset tokens transferred in to purchase the pool tokens\"}},\"name()\":{\"details\":\"Returns the name of the token.      We allow the user to set this name (as well as the symbol).      Alternatives are 1) A fixed string (original design)                       2) A fixed string plus the user-defined symbol                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\"},\"pokeWeights()\":{\"details\":\"Still works if we poke after the end of the period; also works if the weights don't change      Resets if we are poking beyond the end, so that we can do it again\"},\"removeToken(address)\":{\"details\":\"bPool is a contract interface; function calls on it are external\",\"params\":{\"token\":\"- token to remove\"}},\"removeWhitelistedLiquidityProvider(address)\":{\"params\":{\"provider\":\"- address of the liquidity provider\"}},\"setCap(uint256)\":{\"details\":\"_bspCap defaults in the constructor to unlimited      Can set to 0 (or anywhere below the current supply), to halt new investment      Prevent setting it before creating a pool, since createPool sets to intialSupply      (it does this to avoid an unlimited cap window between construction and createPool)      Therefore setting it before then has no effect, so should not be allowed\",\"params\":{\"newCap\":\"- new value of the cap\"}},\"setController(address)\":{\"details\":\"external for gas optimization\",\"params\":{\"newOwner\":\"- address of new owner\"}},\"setPublicSwap(bool)\":{\"details\":\"If this smart pool has canPauseSwapping enabled, we can turn publicSwap off if it's already on      Note that if they turn swapping off - but then finalize the pool - finalizing will turn the      swapping back on. They're not supposed to finalize the underlying pool... would defeat the      smart pool functions. (Only the owner can finalize the pool - which is this contract -      so there is no risk from outside.)      bPool is a contract interface; function calls on it are external\",\"params\":{\"publicSwap\":\"new value of the swap\"}},\"setSwapFee(uint256)\":{\"details\":\"Keep the local version and core in sync (see below)      bPool is a contract interface; function calls on it are external\",\"params\":{\"swapFee\":\"in Wei\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"declared external for gas optimization\",\"returns\":{\"_0\":\"uint - total number of tokens in existence\"}},\"transfer(address,uint256)\":{\"details\":\"_move emits a Transfer event if successful\",\"params\":{\"amount\":\"- number of tokens being transferred\",\"recipient\":\"- entity receiving the tokens\"},\"returns\":{\"_0\":\"bool - result of the transfer (will always be true if it doesn't revert)\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"_move emits a Transfer event if successful; may also emit an Approval event\",\"params\":{\"amount\":\"- number of tokens being transferred\",\"recipient\":\"- recipient of the tokens\",\"sender\":\"- entity sending the tokens (must be caller or allowed to spend on behalf of caller)\"},\"returns\":{\"_0\":\"bool - result of the transfer (will always be true if it doesn't revert)\"}},\"updateWeight(address,uint256)\":{\"details\":\"Notice Balance is not an input (like with rebind on BPool) since we will require prices not to change      This is achieved by forcing balances to change proportionally to weights, so that prices don't change      If prices could be changed, this would allow the controller to drain the pool by arbing price changes\",\"params\":{\"newWeight\":\"- new weight of the token\",\"token\":\"- token to be reweighted\"}},\"updateWeightsGradually(uint256[],uint256,uint256)\":{\"details\":\"Must call pokeWeights at least once past the end for it to do the final update      and enable calling this again.      It is possible to call updateWeightsGradually during an update in some use cases      For instance, setting newWeights to currentWeights to stop the update where it is\",\"params\":{\"endBlock\":\"- when weights will be at their final values\",\"newWeights\":\"- final weights we want to get to. Note that the ORDER (and number) of                     tokens can change if you have added or removed tokens from the pool                     It ensures the counts are correct, but can't help you with the order!                     You can get the underlying BPool (it's public), and call                      getCurrentTokens() to see the current ordering, if you're not sure\",\"startBlock\":\"- when weights should start to change\"}},\"whitelistLiquidityProvider(address)\":{\"params\":{\"provider\":\"- address of the liquidity provider\"}}},\"title\":\"Ampl Elastic Configurable Rights Pool.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Getter for allowance: amount spender will be allowed to spend on behalf of owner\"},\"applyAddToken()\":{\"notice\":\"Add the token previously committed (in commitAddToken) to the pool\"},\"approve(address,uint256)\":{\"notice\":\"Approve owner (sender) to spend a certain amount\"},\"balanceOf(address)\":{\"notice\":\"Getter for current account balance\"},\"canProvideLiquidity(address)\":{\"notice\":\"Check if an address is a liquidity provider\"},\"commitAddToken(address,uint256,uint256)\":{\"notice\":\"Schedule (commit) a token to be added; must call applyAddToken after a fixed         number of blocks to actually add the token\"},\"createPool(uint256,uint256,uint256)\":{\"notice\":\"Create a new Smart Pool - and set the block period time parameters\"},\"decreaseApproval(address,uint256)\":{\"notice\":\"Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\"},\"exitPool(uint256,uint256[])\":{\"notice\":\"Exit a pool - redeem pool tokens for underlying assets\"},\"exitswapExternAmountOut(address,uint256,uint256)\":{\"notice\":\"Exit a pool - redeem pool tokens for a specific amount of underlying assets         Asset must be present in the pool\"},\"exitswapPoolAmountIn(address,uint256,uint256)\":{\"notice\":\"Exit a pool - redeem a specific number of pool tokens for an underlying asset         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\"},\"getBalancerSafeMathVersion()\":{\"notice\":\"Getter for the BalancerSafeMath contract\"},\"getController()\":{\"notice\":\"Returns the address of the current owner\"},\"getDenormalizedWeight(address)\":{\"notice\":\"Get the denormalized weight of a token\"},\"getRightsManagerVersion()\":{\"notice\":\"Getter for the RightsManager contract\"},\"getSmartPoolManagerVersion()\":{\"notice\":\"Getter for the SmartPoolManager contract\"},\"hasPermission(uint8)\":{\"notice\":\"Getter for specific permissions\"},\"increaseApproval(address,uint256)\":{\"notice\":\"Increase the amount the spender is allowed to spend on behalf of the owner (sender)\"},\"isPublicSwap()\":{\"notice\":\"Getter for the publicSwap field on the underlying pool\"},\"joinPool(uint256,uint256[])\":{\"notice\":\"Join a pool\"},\"joinswapExternAmountIn(address,uint256,uint256)\":{\"notice\":\"Join by swapping a fixed amount of an external token in (must be present in the pool)         System calculates the pool token amount\"},\"joinswapPoolAmountOut(address,uint256,uint256)\":{\"notice\":\"Join by swapping an external token in (must be present in the pool)         To receive an exact amount of pool tokens out. System calculates the deposit amount\"},\"pokeWeights()\":{\"notice\":\"External function called to make the contract update weights according to plan\"},\"removeToken(address)\":{\"notice\":\"Remove a token from the pool\"},\"removeWhitelistedLiquidityProvider(address)\":{\"notice\":\"Remove from the whitelist of liquidity providers (if enabled)\"},\"setCap(uint256)\":{\"notice\":\"Set the cap (max # of pool tokens)\"},\"setController(address)\":{\"notice\":\"Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner\"},\"setPublicSwap(bool)\":{\"notice\":\"Set the public swap flag on the underlying pool\"},\"setSwapFee(uint256)\":{\"notice\":\"Set the swap fee on the underlying pool\"},\"totalSupply()\":{\"notice\":\"Getter for the total supply\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer the given amount from sender (caller) to recipient\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer the given amount from sender to recipient\"},\"updateWeight(address,uint256)\":{\"notice\":\"Update the weight of an existing token\"},\"updateWeightsGradually(uint256[],uint256,uint256)\":{\"notice\":\"Update weights in a predetermined way, between startBlock and endBlock,         through external calls to pokeWeights\"},\"whitelistLiquidityProvider(address)\":{\"notice\":\"Add to the whitelist of liquidity providers (if enabled)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity/ElasticSupplyPool.sol\":\"ElasticSupplyPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"configurable-rights-pool/contracts/ConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"./IBFactory.sol\\\";\\nimport \\\"./PCToken.sol\\\";\\nimport \\\"./utils/BalancerReentrancyGuard.sol\\\";\\nimport \\\"./utils/BalancerOwnable.sol\\\";\\n\\n// Interfaces\\n\\n// Libraries\\nimport { RightsManager } from \\\"../libraries/RightsManager.sol\\\";\\nimport \\\"../libraries/SmartPoolManager.sol\\\";\\nimport \\\"../libraries/SafeApprove.sol\\\";\\n\\n// Contracts\\n\\n/**\\n * @author Balancer Labs\\n * @title Smart Pool with customizable features\\n * @notice PCToken is the \\\"Balancer Smart Pool\\\" token (transferred upon finalization)\\n * @dev Rights are defined as follows (index values into the array)\\n *      0: canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                            by default, it is off on initialization and can only be turned on\\n *      1: canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      2: canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      3: canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      4: canWhitelistLPs - can restrict LPs to a whitelist\\n *      5: canChangeCap - can change the BSP cap (max # of pool tokens)\\n *\\n * Note that functions called on bPool and bFactory may look like internal calls,\\n *   but since they are contracts accessed through an interface, they are really external.\\n * To make this explicit, we could write \\\"IBPool(address(bPool)).function()\\\" everywhere,\\n *   instead of \\\"bPool.function()\\\".\\n */\\ncontract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyGuard {\\n    using BalancerSafeMath for uint;\\n    using SafeApprove for IERC20;\\n\\n    // Type declarations\\n\\n    struct PoolParams {\\n        // Balancer Pool Token (representing shares of the pool)\\n        string poolTokenSymbol;\\n        string poolTokenName;\\n        // Tokens inside the Pool\\n        address[] constituentTokens;\\n        uint[] tokenBalances;\\n        uint[] tokenWeights;\\n        uint swapFee;\\n    }\\n\\n    // State variables\\n\\n    IBFactory public bFactory;\\n    IBPool public bPool;\\n\\n    // Struct holding the rights configuration\\n    RightsManager.Rights public rights;\\n\\n    // Hold the parameters used in updateWeightsGradually\\n    SmartPoolManager.GradualUpdateParams public gradualUpdate;\\n\\n    // This is for adding a new (currently unbound) token to the pool\\n    // It's a two-step process: commitAddToken(), then applyAddToken()\\n    SmartPoolManager.NewTokenParams public newToken;\\n\\n    // Fee is initialized on creation, and can be changed if permission is set\\n    // Only needed for temporary storage between construction and createPool\\n    // Thereafter, the swap fee should always be read from the underlying pool\\n    uint private _initialSwapFee;\\n\\n    // Store the list of tokens in the pool, and balances\\n    // NOTE that the token list is *only* used to store the pool tokens between\\n    //   construction and createPool - thereafter, use the underlying BPool's list\\n    //   (avoids synchronization issues)\\n    address[] private _initialTokens;\\n    uint[] private _initialBalances;\\n\\n    // Enforce a minimum time between the start and end blocks\\n    uint public minimumWeightChangeBlockPeriod;\\n    // Enforce a mandatory wait time between updates\\n    // This is also the wait time between committing and applying a new token\\n    uint public addTokenTimeLockInBlocks;\\n\\n    // Whitelist of LPs (if configured)\\n    mapping(address => bool) private _liquidityProviderWhitelist;\\n\\n    // Cap on the pool size (i.e., # of tokens minted when joining)\\n    // Limits the risk of experimental pools; failsafe/backup for fixed-size pools\\n    uint public bspCap;\\n\\n    // Event declarations\\n\\n    // Anonymous logger event - can only be filtered by contract address\\n\\n    event LogCall(\\n        bytes4  indexed sig,\\n        address indexed caller,\\n        bytes data\\n    ) anonymous;\\n\\n    event LogJoin(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        uint tokenAmountIn\\n    );\\n\\n    event LogExit(\\n        address indexed caller,\\n        address indexed tokenOut,\\n        uint tokenAmountOut\\n    );\\n\\n    event CapChanged(\\n        address indexed caller,\\n        uint oldCap,\\n        uint newCap\\n    );\\n    \\n    event NewTokenCommitted(\\n        address indexed token,\\n        address indexed pool,\\n        address indexed caller\\n    );\\n\\n    // Modifiers\\n\\n    modifier logs() {\\n        emit LogCall(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    // Mark functions that require delegation to the underlying Pool\\n    modifier needsBPool() {\\n        require(address(bPool) != address(0), \\\"ERR_NOT_CREATED\\\");\\n        _;\\n    }\\n\\n    modifier lockUnderlyingPool() {\\n        // Turn off swapping on the underlying pool during joins\\n        // Otherwise tokens with callbacks would enable attacks involving simultaneous swaps and joins\\n        bool origSwapState = bPool.isPublicSwap();\\n        bPool.setPublicSwap(false);\\n        _;\\n        bPool.setPublicSwap(origSwapState);\\n    }\\n\\n    // Default values for these variables (used only in updateWeightsGradually), set in the constructor\\n    // Pools without permission to update weights cannot use them anyway, and should call\\n    //   the default createPool() function.\\n    // To override these defaults, pass them into the overloaded createPool()\\n    // Period is in blocks; 500 blocks ~ 2 hours; 90,000 blocks ~ 2 weeks\\n    uint public constant DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD = 90000;\\n    uint public constant DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS = 500;\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Construct a new Configurable Rights Pool (wrapper around BPool)\\n     * @dev _initialTokens and _swapFee are only used for temporary storage between construction\\n     *      and create pool, and should not be used thereafter! _initialTokens is destroyed in\\n     *      createPool to prevent this, and _swapFee is kept in sync (defensively), but\\n     *      should never be used except in this constructor and createPool()\\n     * @param factoryAddress - the BPoolFactory used to create the underlying pool\\n     * @param poolParams - struct containing pool parameters\\n     * @param rightsStruct - Set of permissions we are assigning to this smart pool\\n     */\\n    constructor(\\n        address factoryAddress,\\n        PoolParams memory poolParams,\\n        RightsManager.Rights memory rightsStruct\\n    )\\n        public\\n        PCToken(poolParams.poolTokenSymbol, poolParams.poolTokenName)\\n    {\\n        // We don't have a pool yet; check now or it will fail later (in order of likelihood to fail)\\n        // (and be unrecoverable if they don't have permission set to change it)\\n        // Most likely to fail, so check first\\n        require(poolParams.swapFee >= BalancerConstants.MIN_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n        require(poolParams.swapFee <= BalancerConstants.MAX_FEE, \\\"ERR_INVALID_SWAP_FEE\\\");\\n\\n        // Arrays must be parallel\\n        require(poolParams.tokenBalances.length == poolParams.constituentTokens.length, \\\"ERR_START_BALANCES_MISMATCH\\\");\\n        require(poolParams.tokenWeights.length == poolParams.constituentTokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n        // Cannot have too many or too few - technically redundant, since BPool.bind() would fail later\\n        // But if we don't check now, we could have a useless contract with no way to create a pool\\n\\n        require(poolParams.constituentTokens.length >= BalancerConstants.MIN_ASSET_LIMIT, \\\"ERR_TOO_FEW_TOKENS\\\");\\n        require(poolParams.constituentTokens.length <= BalancerConstants.MAX_ASSET_LIMIT, \\\"ERR_TOO_MANY_TOKENS\\\");\\n        // There are further possible checks (e.g., if they use the same token twice), but\\n        // we can let bind() catch things like that (i.e., not things that might reasonably work)\\n\\n        SmartPoolManager.verifyTokenCompliance(poolParams.constituentTokens);\\n\\n        bFactory = IBFactory(factoryAddress);\\n        rights = rightsStruct;\\n        _initialTokens = poolParams.constituentTokens;\\n        _initialBalances = poolParams.tokenBalances;\\n        _initialSwapFee = poolParams.swapFee;\\n\\n        // These default block time parameters can be overridden in createPool\\n        minimumWeightChangeBlockPeriod = DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD;\\n        addTokenTimeLockInBlocks = DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS;\\n        \\n        gradualUpdate.startWeights = poolParams.tokenWeights;\\n        // Initializing (unnecessarily) for documentation - 0 means no gradual weight change has been initiated\\n        gradualUpdate.startBlock = 0;\\n        // By default, there is no cap (unlimited pool token minting)\\n        bspCap = BalancerConstants.MAX_UINT;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Set the swap fee on the underlying pool\\n     * @dev Keep the local version and core in sync (see below)\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param swapFee in Wei\\n     */\\n    function setSwapFee(uint swapFee)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeSwapFee, \\\"ERR_NOT_CONFIGURABLE_SWAP_FEE\\\");\\n\\n        // Underlying pool will check against min/max fee\\n        bPool.setSwapFee(swapFee);\\n    }\\n\\n    /**\\n     * @notice Getter for the publicSwap field on the underlying pool\\n     * @dev viewLock, because setPublicSwap is lock\\n     *      bPool is a contract interface; function calls on it are external\\n     * @return Current value of isPublicSwap\\n     */\\n    function isPublicSwap()\\n        external\\n        view\\n        viewlock\\n        needsBPool\\n        virtual\\n        returns (bool)\\n    {\\n        return bPool.isPublicSwap();\\n    }\\n\\n    /**\\n     * @notice Set the cap (max # of pool tokens)\\n     * @dev _bspCap defaults in the constructor to unlimited\\n     *      Can set to 0 (or anywhere below the current supply), to halt new investment\\n     *      Prevent setting it before creating a pool, since createPool sets to intialSupply\\n     *      (it does this to avoid an unlimited cap window between construction and createPool)\\n     *      Therefore setting it before then has no effect, so should not be allowed\\n     * @param newCap - new value of the cap\\n     */\\n    function setCap(uint newCap)\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        onlyOwner\\n    {\\n        require(rights.canChangeCap, \\\"ERR_CANNOT_CHANGE_CAP\\\");\\n\\n        emit CapChanged(msg.sender, bspCap, newCap);\\n\\n        bspCap = newCap;\\n    }\\n\\n    /**\\n     * @notice Set the public swap flag on the underlying pool\\n     * @dev If this smart pool has canPauseSwapping enabled, we can turn publicSwap off if it's already on\\n     *      Note that if they turn swapping off - but then finalize the pool - finalizing will turn the\\n     *      swapping back on. They're not supposed to finalize the underlying pool... would defeat the\\n     *      smart pool functions. (Only the owner can finalize the pool - which is this contract -\\n     *      so there is no risk from outside.)\\n     *\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param publicSwap new value of the swap\\n     */\\n    function setPublicSwap(bool publicSwap)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canPauseSwapping, \\\"ERR_NOT_PAUSABLE_SWAP\\\");\\n\\n        bPool.setPublicSwap(publicSwap);\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool - and set the block period time parameters\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     *      Time parameters will be fixed at these values\\n     *\\n     *      If this contract doesn't have canChangeWeights permission - or you want to use the default\\n     *      values, the block time arguments are not needed, and you can just call the single-argument\\n     *      createPool()\\n     * @param initialSupply - Starting token balance\\n     * @param minimumWeightChangeBlockPeriodParam - Enforce a minimum time between the start and end blocks\\n     * @param addTokenTimeLockInBlocksParam - Enforce a mandatory wait time between updates\\n     *                                   This is also the wait time between committing and applying a new token\\n     */\\n    function createPool(\\n        uint initialSupply,\\n        uint minimumWeightChangeBlockPeriodParam,\\n        uint addTokenTimeLockInBlocksParam\\n    )\\n        external\\n        onlyOwner\\n        logs\\n        lock\\n        virtual\\n    {\\n        require (minimumWeightChangeBlockPeriodParam >= addTokenTimeLockInBlocksParam,\\n                \\\"ERR_INCONSISTENT_TOKEN_TIME_LOCK\\\");\\n \\n        minimumWeightChangeBlockPeriod = minimumWeightChangeBlockPeriodParam;\\n        addTokenTimeLockInBlocks = addTokenTimeLockInBlocksParam;\\n\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Notice Balance is not an input (like with rebind on BPool) since we will require prices not to change\\n     *      This is achieved by forcing balances to change proportionally to weights, so that prices don't change\\n     *      If prices could be changed, this would allow the controller to drain the pool by arbing price changes\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(address token, uint newWeight)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n\\n        // We don't want people to set weights manually if there's a block-based update in progress\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.updateWeight(IConfigurableRightsPool(address(this)), bPool, token, newWeight);\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external calls to pokeWeights\\n     * @dev Must call pokeWeights at least once past the end for it to do the final update\\n     *      and enable calling this again.\\n     *      It is possible to call updateWeightsGradually during an update in some use cases\\n     *      For instance, setting newWeights to currentWeights to stop the update where it is\\n     * @param newWeights - final weights we want to get to. Note that the ORDER (and number) of\\n     *                     tokens can change if you have added or removed tokens from the pool\\n     *                     It ensures the counts are correct, but can't help you with the order!\\n     *                     You can get the underlying BPool (it's public), and call \\n     *                     getCurrentTokens() to see the current ordering, if you're not sure\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n    */\\n    function updateWeightsGradually(\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock\\n    )\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n         // Don't start this when we're in the middle of adding a new token\\n        require(!newToken.isCommitted, \\\"ERR_PENDING_TOKEN_ADD\\\");\\n        \\n        // Library computes the startBlock, computes startWeights as the current\\n        // denormalized weights of the core pool tokens.\\n        SmartPoolManager.updateWeightsGradually(\\n            bPool,\\n            gradualUpdate,\\n            newWeights,\\n            startBlock,\\n            endBlock,\\n            minimumWeightChangeBlockPeriod\\n        );\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @dev Still works if we poke after the end of the period; also works if the weights don't change\\n     *      Resets if we are poking beyond the end, so that we can do it again\\n    */\\n    function pokeWeights()\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.pokeWeights(bPool, gradualUpdate);\\n    }\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     *\\n     * @dev The purpose of this two-stage commit is to give warning of a potentially dangerous\\n     *      operation. A malicious pool operator could add a large amount of a low-value token,\\n     *      then drain the pool through price manipulation. Of course, there are many\\n     *      legitimate purposes, such as adding additional collateral tokens.\\n     *\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     */\\n    function commitAddToken(\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight\\n    )\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canAddRemoveTokens, \\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n\\n        // Can't do this while a progressive update is happening\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        SmartPoolManager.verifyTokenCompliance(token);\\n\\n        emit NewTokenCommitted(token, address(this), msg.sender);\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.commitAddToken(\\n            bPool,\\n            token,\\n            balance,\\n            denormalizedWeight,\\n            newToken\\n        );\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     */\\n    function applyAddToken()\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n        virtual\\n    {\\n        require(rights.canAddRemoveTokens, \\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.applyAddToken(\\n            IConfigurableRightsPool(address(this)),\\n            bPool,\\n            addTokenTimeLockInBlocks,\\n            newToken\\n        );\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev bPool is a contract interface; function calls on it are external\\n     * @param token - token to remove\\n     */\\n    function removeToken(address token)\\n        external\\n        logs\\n        lock\\n        onlyOwner\\n        needsBPool\\n    {\\n        // It's possible to have remove rights without having add rights\\n        require(rights.canAddRemoveTokens,\\\"ERR_CANNOT_ADD_REMOVE_TOKENS\\\");\\n        // After createPool, token list is maintained in the underlying BPool\\n        require(!newToken.isCommitted, \\\"ERR_REMOVE_WITH_ADD_PENDING\\\");\\n        // Prevent removing during an update (or token lists can get out of sync)\\n        require(gradualUpdate.startBlock == 0, \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        // Delegate to library to save space\\n        SmartPoolManager.removeToken(IConfigurableRightsPool(address(this)), bPool, token);\\n    } \\n\\n    /**\\n     * @notice Join a pool\\n     * @dev Emits a LogJoin event (for each token)\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     */\\n    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn)\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        lockUnderlyingPool\\n    {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender],\\n                \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n\\n        // Library computes actualAmountsIn, and does many validations\\n        // Cannot call the push/pull/min from an external library for\\n        // any of these pool functions. Since msg.sender can be anybody,\\n        // they must be internal\\n        uint[] memory actualAmountsIn = SmartPoolManager.joinPool(\\n                                            IConfigurableRightsPool(address(this)),\\n                                            bPool,\\n                                            poolAmountOut,\\n                                            maxAmountsIn\\n                                        );\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenAmountIn = actualAmountsIn[i];\\n\\n            emit LogJoin(msg.sender, t, tokenAmountIn);\\n\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @dev Emits a LogExit event for each token\\n     *      bPool is a contract interface; function calls on it are external\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     */\\n    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut)\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        lockUnderlyingPool\\n    {\\n        // Delegate to library to save space\\n\\n        // Library computes actualAmountsOut, and does many validations\\n        // Also computes the exitFee and pAiAfterExitFee\\n        (uint exitFee,\\n         uint pAiAfterExitFee,\\n         uint[] memory actualAmountsOut) = SmartPoolManager.exitPool(\\n                                               IConfigurableRightsPool(address(this)),\\n                                               bPool,\\n                                               poolAmountIn,\\n                                               minAmountsOut\\n                                           );\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        // After createPool, token list is maintained in the underlying BPool\\n        address[] memory poolTokens = bPool.getCurrentTokens();\\n\\n        for (uint i = 0; i < poolTokens.length; i++) {\\n            address t = poolTokens[i];\\n            uint tokenAmountOut = actualAmountsOut[i];\\n\\n            emit LogExit(msg.sender, t, tokenAmountOut);\\n\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @dev emits a LogJoin event\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint poolAmountOut)\\n    {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender],\\n                \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n        poolAmountOut = SmartPoolManager.joinswapExternAmountIn(\\n                            IConfigurableRightsPool(address(this)),\\n                            bPool,\\n                            tokenIn,\\n                            tokenAmountIn,\\n                            minPoolAmountOut\\n                        );\\n\\n        emit LogJoin(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @dev emits a LogJoin event\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint tokenAmountIn)\\n    {\\n        require(!rights.canWhitelistLPs || _liquidityProviderWhitelist[msg.sender],\\n                \\\"ERR_NOT_ON_WHITELIST\\\");\\n\\n        // Delegate to library to save space\\n        tokenAmountIn = SmartPoolManager.joinswapPoolAmountOut(\\n                            IConfigurableRightsPool(address(this)),\\n                            bPool,\\n                            tokenIn,\\n                            poolAmountOut,\\n                            maxAmountIn\\n                        );\\n\\n        emit LogJoin(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @dev Emits a LogExit event for the token\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint tokenAmountOut)\\n    {\\n        // Delegate to library to save space\\n\\n        // Calculates final amountOut, and the fee and final amount in\\n        (uint exitFee,\\n         uint amountOut) = SmartPoolManager.exitswapPoolAmountIn(\\n                               IConfigurableRightsPool(address(this)),\\n                               bPool,\\n                               tokenOut,\\n                               poolAmountIn,\\n                               minAmountOut\\n                           );\\n\\n        tokenAmountOut = amountOut;\\n        uint pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        emit LogExit(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(pAiAfterExitFee);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @dev Emits a LogExit event for the token\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        logs\\n        lock\\n        needsBPool\\n        returns (uint poolAmountIn)\\n    {\\n        // Delegate to library to save space\\n\\n        // Calculates final amounts in, accounting for the exit fee\\n        (uint exitFee,\\n         uint amountIn) = SmartPoolManager.exitswapExternAmountOut(\\n                              IConfigurableRightsPool(address(this)),\\n                              bPool,\\n                              tokenOut,\\n                              tokenAmountOut,\\n                              maxPoolAmountIn\\n                          );\\n\\n        poolAmountIn = amountIn;\\n        uint pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        emit LogExit(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(pAiAfterExitFee);\\n        _pushPoolShare(address(bFactory), exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n        \\n        return poolAmountIn;\\n    }\\n\\n    /**\\n     * @notice Add to the whitelist of liquidity providers (if enabled)\\n     * @param provider - address of the liquidity provider\\n     */\\n    function whitelistLiquidityProvider(address provider)\\n        external\\n        onlyOwner\\n        lock\\n        logs\\n    {\\n        require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n        _liquidityProviderWhitelist[provider] = true;\\n    }\\n\\n    /**\\n     * @notice Remove from the whitelist of liquidity providers (if enabled)\\n     * @param provider - address of the liquidity provider\\n     */\\n    function removeWhitelistedLiquidityProvider(address provider)\\n        external\\n        onlyOwner\\n        lock\\n        logs\\n    {\\n        require(rights.canWhitelistLPs, \\\"ERR_CANNOT_WHITELIST_LPS\\\");\\n        require(_liquidityProviderWhitelist[provider], \\\"ERR_LP_NOT_WHITELISTED\\\");\\n        require(provider != address(0), \\\"ERR_INVALID_ADDRESS\\\");\\n\\n        _liquidityProviderWhitelist[provider] = false;\\n    }\\n\\n    /**\\n     * @notice Check if an address is a liquidity provider\\n     * @dev If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)\\n     * @return boolean value indicating whether the address can join a pool\\n     */\\n    function canProvideLiquidity(address provider)\\n        external\\n        view\\n        returns(bool)\\n    {\\n        if (rights.canWhitelistLPs) {\\n            return _liquidityProviderWhitelist[provider];\\n        }\\n        else {\\n            // Probably don't strictly need this (could just return true)\\n            // But the null address can't provide funds\\n            return provider != address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter for specific permissions\\n     * @dev value of the enum is just the 0-based index in the enumeration\\n     *      For instance canPauseSwapping is 0; canChangeWeights is 2\\n     * @return token boolean true if we have the given permission\\n    */\\n    function hasPermission(RightsManager.Permissions permission)\\n        external\\n        view\\n        virtual\\n        returns(bool)\\n    {\\n        return RightsManager.hasPermission(rights, permission);\\n    }\\n\\n    /**\\n     * @notice Get the denormalized weight of a token\\n     * @dev viewlock to prevent calling if it's being updated\\n     * @return token weight\\n     */\\n    function getDenormalizedWeight(address token)\\n        external\\n        view\\n        viewlock\\n        needsBPool\\n        returns (uint)\\n    {\\n        return bPool.getDenormalizedWeight(token);\\n    }\\n\\n    /**\\n     * @notice Getter for the RightsManager contract\\n     * @dev Convenience function to get the address of the RightsManager library (so clients can check version)\\n     * @return address of the RightsManager library\\n    */\\n    function getRightsManagerVersion() external pure returns (address) {\\n        return address(RightsManager);\\n    }\\n\\n    /**\\n     * @notice Getter for the BalancerSafeMath contract\\n     * @dev Convenience function to get the address of the BalancerSafeMath library (so clients can check version)\\n     * @return address of the BalancerSafeMath library\\n    */\\n    function getBalancerSafeMathVersion() external pure returns (address) {\\n        return address(BalancerSafeMath);\\n    }\\n\\n    /**\\n     * @notice Getter for the SmartPoolManager contract\\n     * @dev Convenience function to get the address of the SmartPoolManager library (so clients can check version)\\n     * @return address of the SmartPoolManager library\\n    */\\n    function getSmartPoolManagerVersion() external pure returns (address) {\\n        return address(SmartPoolManager);\\n    }\\n\\n    // Public functions\\n\\n    // \\\"Public\\\" versions that can safely be called from SmartPoolManager\\n    // Allows only the contract itself to call them (not the controller or any external account)\\n\\n    function mintPoolShareFromLib(uint amount) public {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _mint(amount);\\n    }\\n\\n    function pushPoolShareFromLib(address to, uint amount) public {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _push(to, amount);\\n    }\\n\\n    function pullPoolShareFromLib(address from, uint amount) public  {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _pull(from, amount);\\n    }\\n\\n    function burnPoolShareFromLib(uint amount) public  {\\n        require (msg.sender == address(this), \\\"ERR_NOT_CONTROLLER\\\");\\n\\n        _burn(amount);\\n    }\\n\\n    // Internal functions\\n\\n    // Lint wants the function to have a leading underscore too\\n    /* solhint-disable private-vars-leading-underscore */\\n\\n    /**\\n     * @notice Create a new Smart Pool\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     * @param initialSupply starting token balance\\n     */\\n    function createPoolInternal(uint initialSupply) internal {\\n        require(address(bPool) == address(0), \\\"ERR_IS_CREATED\\\");\\n        require(initialSupply >= BalancerConstants.MIN_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MIN\\\");\\n        require(initialSupply <= BalancerConstants.MAX_POOL_SUPPLY, \\\"ERR_INIT_SUPPLY_MAX\\\");\\n\\n        // If the controller can change the cap, initialize it to the initial supply\\n        // Defensive programming, so that there is no gap between creating the pool\\n        // (initialized to unlimited in the constructor), and setting the cap,\\n        // which they will presumably do if they have this right.\\n        if (rights.canChangeCap) {\\n            bspCap = initialSupply;\\n        }\\n\\n        // There is technically reentrancy here, since we're making external calls and\\n        // then transferring tokens. However, the external calls are all to the underlying BPool\\n\\n        // To the extent possible, modify state variables before calling functions\\n        _mintPoolShare(initialSupply);\\n        _pushPoolShare(msg.sender, initialSupply);\\n\\n        // Deploy new BPool (bFactory and bPool are interfaces; all calls are external)\\n        bPool = bFactory.newBPool();\\n\\n        // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n        require(bPool.EXIT_FEE() == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n        require(BalancerConstants.EXIT_FEE == 0, \\\"ERR_NONZERO_EXIT_FEE\\\");\\n\\n        for (uint i = 0; i < _initialTokens.length; i++) {\\n            address t = _initialTokens[i];\\n            uint bal = _initialBalances[i];\\n            uint denorm = gradualUpdate.startWeights[i];\\n\\n            bool returnValue = IERC20(t).transferFrom(msg.sender, address(this), bal);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            returnValue = IERC20(t).safeApprove(address(bPool), BalancerConstants.MAX_UINT);\\n            require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n            bPool.bind(t, bal, denorm);\\n        }\\n\\n        while (_initialTokens.length > 0) {\\n            // Modifying state variable after external calls here,\\n            // but not essential, so not dangerous\\n            _initialTokens.pop();\\n        }\\n\\n        // Set fee to the initial value set in the constructor\\n        // Hereafter, read the swapFee from the underlying pool, not the local state variable\\n        bPool.setSwapFee(_initialSwapFee);\\n        bPool.setPublicSwap(true);\\n\\n        // \\\"destroy\\\" the temporary swap fee (like _initialTokens above) in case a subclass tries to use it\\n        _initialSwapFee = 0;\\n    }\\n\\n    /* solhint-enable private-vars-leading-underscore */\\n\\n    // Rebind BPool and pull tokens from address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pullUnderlying(address erc20, address from, uint amount) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n\\n        bool xfer = IERC20(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n        bPool.rebind(erc20, BalancerSafeMath.badd(tokenBalance, amount), tokenWeight);\\n    }\\n\\n    // Rebind BPool and push tokens to address\\n    // bPool is a contract interface; function calls on it are external\\n    function _pushUnderlying(address erc20, address to, uint amount) internal needsBPool {\\n        // Gets current Balance of token i, Bi, and weight of token i, Wi, from BPool.\\n        uint tokenBalance = bPool.getBalance(erc20);\\n        uint tokenWeight = bPool.getDenormalizedWeight(erc20);\\n        bPool.rebind(erc20, BalancerSafeMath.bsub(tokenBalance, amount), tokenWeight);\\n\\n        bool xfer = IERC20(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    // Wrappers around corresponding core functions\\n\\n    // \\n    function _mint(uint amount) internal override {\\n        super._mint(amount);\\n        require(varTotalSupply <= bspCap, \\\"ERR_CAP_LIMIT_REACHED\\\");\\n    }\\n\\n    function _mintPoolShare(uint amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _pullPoolShare(address from, uint amount) internal  {\\n        _pull(from, amount);\\n    }\\n\\n    function _burnPoolShare(uint amount) internal  {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0144d3a55dc923d660c918bfc0d29d359beb4e15c86640a03d76e6542d6bff6f\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/contracts/IBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\ninterface IBPool {\\n    function rebind(address token, uint balance, uint denorm) external;\\n    function setSwapFee(uint swapFee) external;\\n    function setPublicSwap(bool publicSwap) external;\\n    function bind(address token, uint balance, uint denorm) external;\\n    function unbind(address token) external;\\n    function gulp(address token) external;\\n    function isBound(address token) external view returns(bool);\\n    function getBalance(address token) external view returns (uint);\\n    function totalSupply() external view returns (uint);\\n    function getSwapFee() external view returns (uint);\\n    function isPublicSwap() external view returns (bool);\\n    function getDenormalizedWeight(address token) external view returns (uint);\\n    function getTotalDenormalizedWeight() external view returns (uint);\\n    // solhint-disable-next-line func-name-mixedcase\\n    function EXIT_FEE() external view returns (uint);\\n \\n    function calcPoolOutGivenSingleIn(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountOut);\\n\\n    function calcSingleInGivenPoolOut(\\n        uint tokenBalanceIn,\\n        uint tokenWeightIn,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountIn);\\n\\n    function calcSingleOutGivenPoolIn(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint poolAmountIn,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint tokenAmountOut);\\n\\n    function calcPoolInGivenSingleOut(\\n        uint tokenBalanceOut,\\n        uint tokenWeightOut,\\n        uint poolSupply,\\n        uint totalWeight,\\n        uint tokenAmountOut,\\n        uint swapFee\\n    )\\n        external pure\\n        returns (uint poolAmountIn);\\n\\n    function getCurrentTokens()\\n        external view\\n        returns (address[] memory tokens);\\n}\\n\\ninterface IBFactory {\\n    function newBPool() external returns (IBPool);\\n    function setBLabs(address b) external;\\n    function collect(IBPool pool) external;\\n    function isBPool(address b) external view returns (bool);\\n    function getBLabs() external view returns (address);\\n}\\n\",\"keccak256\":\"0x41c11cc5f13ea2e6b916a59e8e150a6629e66f0d5d80dcab3a5cf0d73e69da00\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/contracts/PCToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../libraries/BalancerSafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Contracts\\n\\n/* solhint-disable func-order */\\n\\n/**\\n * @author Balancer Labs\\n * @title Highly opinionated token implementation\\n*/\\ncontract PCToken is IERC20 {\\n    using BalancerSafeMath for uint;\\n\\n    // State variables\\n    string public constant NAME = \\\"Balancer Smart Pool\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    // No leading underscore per naming convention (non-private)\\n    // Cannot call totalSupply (name conflict)\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    uint internal varTotalSupply;\\n\\n    mapping(address => uint) private _balance;\\n    mapping(address => mapping(address => uint)) private _allowance;\\n\\n    string private _symbol;\\n    string private _name;\\n\\n    // Event declarations\\n\\n    // See definitions above; must be redeclared to be emitted from this contract\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Function declarations\\n\\n    /**\\n     * @notice Base token constructor\\n     * @param tokenSymbol - the token symbol\\n     */\\n    constructor (string memory tokenSymbol, string memory tokenName) public {\\n        _symbol = tokenSymbol;\\n        _name = tokenName;\\n    }\\n\\n    // External functions\\n\\n    /**\\n     * @notice Getter for allowance: amount spender will be allowed to spend on behalf of owner\\n     * @param owner - owner of the tokens\\n     * @param spender - entity allowed to spend the tokens\\n     * @return uint - remaining amount spender is allowed to transfer\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Getter for current account balance\\n     * @param account - address we're checking the balance of\\n     * @return uint - token balance in the account\\n     */\\n    function balanceOf(address account) external view override returns (uint) {\\n        return _balance[account];\\n    }\\n\\n    /**\\n     * @notice Approve owner (sender) to spend a certain amount\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function approve(address spender, uint amount) external override returns (bool) {\\n        /* In addition to the increase/decreaseApproval functions, could\\n           avoid the \\\"approval race condition\\\" by only allowing calls to approve\\n           when the current approval amount is 0\\n        \\n           require(_allowance[msg.sender][spender] == 0, \\\"ERR_RACE_CONDITION\\\");\\n\\n           Some token contracts (e.g., KNC), already revert if you call approve \\n           on a non-zero allocation. To deal with these, we use the SafeApprove library\\n           and safeApprove function when adding tokens to the pool.\\n        */\\n\\n        _allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increase the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function increaseApproval(address spender, uint amount) external returns (bool) {\\n        _allowance[msg.sender][spender] = BalancerSafeMath.badd(_allowance[msg.sender][spender], amount);\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the amount the spender is allowed to spend on behalf of the owner (sender)\\n     * @dev emits an Approval event\\n     * @dev If you try to decrease it below the current limit, it's just set to zero (not an error)\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     * @return bool - result of the approval (will always be true if it doesn't revert)\\n     */\\n    function decreaseApproval(address spender, uint amount) external returns (bool) {\\n        uint oldValue = _allowance[msg.sender][spender];\\n        // Gas optimization - if amount == oldValue (or is larger), set to zero immediately\\n        if (amount >= oldValue) {\\n            _allowance[msg.sender][spender] = 0;\\n        } else {\\n            _allowance[msg.sender][spender] = BalancerSafeMath.bsub(oldValue, amount);\\n        }\\n\\n        emit Approval(msg.sender, spender, _allowance[msg.sender][spender]);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender (caller) to recipient\\n     * @dev _move emits a Transfer event if successful\\n     * @param recipient - entity receiving the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transfer(address recipient, uint amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        _move(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer the given amount from sender to recipient\\n     * @dev _move emits a Transfer event if successful; may also emit an Approval event\\n     * @param sender - entity sending the tokens (must be caller or allowed to spend on behalf of caller)\\n     * @param recipient - recipient of the tokens\\n     * @param amount - number of tokens being transferred\\n     * @return bool - result of the transfer (will always be true if it doesn't revert)\\n     */\\n    function transferFrom(address sender, address recipient, uint amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n        require(msg.sender == sender || amount <= _allowance[sender][msg.sender], \\\"ERR_PCTOKEN_BAD_CALLER\\\");\\n\\n        _move(sender, recipient, amount);\\n\\n        // memoize for gas optimization\\n        uint oldAllowance = _allowance[sender][msg.sender];\\n\\n        // If the sender is not the caller, adjust the allowance by the amount transferred\\n        if (msg.sender != sender && oldAllowance != uint(-1)) {\\n            _allowance[sender][msg.sender] = BalancerSafeMath.bsub(oldAllowance, amount);\\n\\n            emit Approval(msg.sender, recipient, _allowance[sender][msg.sender]);\\n        }\\n\\n        return true;\\n    }\\n\\n    // public functions\\n\\n    /**\\n     * @notice Getter for the total supply\\n     * @dev declared external for gas optimization\\n     * @return uint - total number of tokens in existence\\n     */\\n    function totalSupply() external view override returns (uint) {\\n        return varTotalSupply;\\n    }\\n\\n    // Public functions\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     *      We allow the user to set this name (as well as the symbol).\\n     *      Alternatives are 1) A fixed string (original design)\\n     *                       2) A fixed string plus the user-defined symbol\\n     *                          return string(abi.encodePacked(NAME, \\\"-\\\", _symbol));\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external pure returns (uint8) {\\n        return DECIMALS;\\n    }\\n\\n    // internal functions\\n\\n    // Mint an amount of new tokens, and add them to the balance (and total supply)\\n    // Emit a transfer amount from the null address to this contract\\n    function _mint(uint amount) internal virtual {\\n        _balance[address(this)] = BalancerSafeMath.badd(_balance[address(this)], amount);\\n        varTotalSupply = BalancerSafeMath.badd(varTotalSupply, amount);\\n\\n        emit Transfer(address(0), address(this), amount);\\n    }\\n\\n    // Burn an amount of new tokens, and subtract them from the balance (and total supply)\\n    // Emit a transfer amount from this contract to the null address\\n    function _burn(uint amount) internal virtual {\\n        // Can't burn more than we have\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[address(this)] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[address(this)] = BalancerSafeMath.bsub(_balance[address(this)], amount);\\n        varTotalSupply = BalancerSafeMath.bsub(varTotalSupply, amount);\\n\\n        emit Transfer(address(this), address(0), amount);\\n    }\\n\\n    // Transfer tokens from sender to recipient\\n    // Adjust balances, and emit a Transfer event\\n    function _move(address sender, address recipient, uint amount) internal virtual {\\n        // Can't send more than sender has\\n        // Remove require for gas optimization - bsub will revert on underflow\\n        // require(_balance[sender] >= amount, \\\"ERR_INSUFFICIENT_BAL\\\");\\n\\n        _balance[sender] = BalancerSafeMath.bsub(_balance[sender], amount);\\n        _balance[recipient] = BalancerSafeMath.badd(_balance[recipient], amount);\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // Transfer from this contract to recipient\\n    // Emits a transfer event if successful\\n    function _push(address recipient, uint amount) internal {\\n        _move(address(this), recipient, amount);\\n    }\\n\\n    // Transfer from recipient to this contract\\n    // Emits a transfer event if successful\\n    function _pull(address sender, uint amount) internal {\\n        _move(sender, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5828b7ccef90218e91b8262764f5db012eac600a4fa5779ddddfc8b7a8f32004\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/contracts/utils/BalancerOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract BalancerOwnable {\\n    // State variables\\n\\n    address private _owner;\\n\\n    // Event declarations\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    // Modifiers\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"ERR_NOT_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    // Function declarations\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\\n     *         Can only be called by the current owner\\n     * @dev external for gas optimization\\n     * @param newOwner - address of new owner\\n     */\\n    function setController(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"ERR_ZERO_ADDRESS\\\");\\n\\n        emit OwnershipTransferred(_owner, newOwner);\\n\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the current owner\\n     * @dev external for gas optimization\\n     * @return address - of the owner (AKA controller)\\n     */\\n    function getController() external view returns (address) {\\n        return _owner;\\n    }\\n}\\n\",\"keccak256\":\"0x8d1dda132b2441a730d5b658a63828da4ddad37e99a64bb8c72e8b24627dba5d\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/contracts/utils/BalancerReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Balancer Labs (and OpenZeppelin)\\n * @title Protect against reentrant calls (and also selectively protect view functions)\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {_lock_} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `_lock_` guard, functions marked as\\n * `_lock_` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `_lock_` entry\\n * points to them.\\n *\\n * Also adds a _lockview_ modifier, which doesn't create a lock, but fails\\n *   if another _lock_ call is in progress\\n */\\ncontract BalancerReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint private constant _NOT_ENTERED = 1;\\n    uint private constant _ENTERED = 2;\\n\\n    uint private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `_lock_` function from another `_lock_`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `_lock_` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier lock() {\\n        // On the first call to _lock_, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ERR_REENTRY\\\");\\n\\n        // Any calls to _lock_ after this point will fail\\n        _status = _ENTERED;\\n        _;\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Also add a modifier that doesn't create a lock, but protects functions that\\n     *      should not be called while a _lock_ function is running\\n     */\\n     modifier viewlock() {\\n        require(_status != _ENTERED, \\\"ERR_REENTRY_VIEW\\\");\\n        _;\\n     }\\n}\\n\",\"keccak256\":\"0x9a44250bbe62d1dd3ba2d1a2953bf20515272e81987ce803fb305b2a9f603eb9\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/interfaces/IConfigurableRightsPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n// Introduce to avoid circularity (otherwise, the CRP and SmartPoolManager include each other)\\n// Removing circularity allows flattener tools to work, which enables Etherscan verification\\ninterface IConfigurableRightsPool {\\n    function mintPoolShareFromLib(uint amount) external;\\n    function pushPoolShareFromLib(address to, uint amount) external;\\n    function pullPoolShareFromLib(address from, uint amount) external;\\n    function burnPoolShareFromLib(uint amount) external;\\n    function totalSupply() external view returns (uint);\\n    function getController() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa1a798c05839da9029729e92454c5da729cec5bbbbf13f3950e3aab59d678c16\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Interface declarations\\n\\n/* solhint-disable func-order */\\n\\ninterface IERC20 {\\n    // Emitted when the allowance of a spender for an owner is set by a call to approve.\\n    // Value is the new allowance\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n\\n    // Emitted when value tokens are moved from one account (from) to another (to).\\n    // Note that value may be zero\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // Returns the amount of tokens in existence\\n    function totalSupply() external view returns (uint);\\n\\n    // Returns the amount of tokens owned by account\\n    function balanceOf(address account) external view returns (uint);\\n\\n    // Returns the remaining number of tokens that spender will be allowed to spend on behalf of owner\\n    // through transferFrom. This is zero by default\\n    // This value changes when approve or transferFrom are called\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // Sets amount as the allowance of spender over the caller\\u2019s tokens\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits an Approval event.\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from the caller\\u2019s account to recipient\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event.\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    // Moves amount tokens from sender to recipient using the allowance mechanism\\n    // Amount is then deducted from the caller\\u2019s allowance\\n    // Returns a boolean value indicating whether the operation succeeded\\n    // Emits a Transfer event\\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x37d7904de6fabb6ab50b063cc6623997d5f7ff8e0322d0b4ba651c1c00fceed9\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/libraries/BalancerConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n/**\\n * @author Balancer Labs\\n * @title Put all the constants in one place\\n */\\n\\nlibrary BalancerConstants {\\n    // State variables (must be constant in a library)\\n\\n    // B \\\"ONE\\\" - all math is in the \\\"realm\\\" of 10 ** 18;\\n    // where numeric 1 = 10 ** 18\\n    uint public constant BONE = 10**18;\\n    uint public constant MIN_WEIGHT = BONE;\\n    uint public constant MAX_WEIGHT = BONE * 50;\\n    uint public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint public constant MIN_BALANCE = BONE / 10**6;\\n    uint public constant MAX_BALANCE = BONE * 10**12;\\n    uint public constant MIN_POOL_SUPPLY = BONE * 100;\\n    uint public constant MAX_POOL_SUPPLY = BONE * 10**9;\\n    uint public constant MIN_FEE = BONE / 10**6;\\n    uint public constant MAX_FEE = BONE / 10;\\n    // EXIT_FEE must always be zero, or ConfigurableRightsPool._pushUnderlying will fail\\n    uint public constant EXIT_FEE = 0;\\n    uint public constant MAX_IN_RATIO = BONE / 2;\\n    uint public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n    // Must match BConst.MIN_BOUND_TOKENS and BConst.MAX_BOUND_TOKENS\\n    uint public constant MIN_ASSET_LIMIT = 2;\\n    uint public constant MAX_ASSET_LIMIT = 8;\\n    uint public constant MAX_UINT = uint(-1);\\n}\\n\",\"keccak256\":\"0x31640e493c106fe6fb2e210544b9b40fe3b42158eacfda038f6fa662d92ad472\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/libraries/BalancerSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n\\n// Imports\\n\\nimport \\\"./BalancerConstants.sol\\\";\\n\\n/**\\n * @author Balancer Labs\\n * @title SafeMath - wrap Solidity operators to prevent underflow/overflow\\n * @dev badd and bsub are basically identical to OpenZeppelin SafeMath; mul/div have extra checks\\n */\\nlibrary BalancerSafeMath {\\n    /**\\n     * @notice Safe addition\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev if we are adding b to a, the resulting sum must be greater than a\\n     * @return - sum of operands; throws if overflow\\n     */\\n    function badd(uint a, uint b) internal pure returns (uint) {\\n        uint c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction, and check that it produces a positive value\\n     *      (i.e., a - b is valid if b <= a)\\n     * @return - a - b; throws if underflow\\n     */\\n    function bsub(uint a, uint b) internal pure returns (uint) {\\n        (uint c, bool negativeResult) = bsubSign(a, b);\\n        require(!negativeResult, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @notice Safe signed subtraction\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Do a signed subtraction\\n     * @return - difference between a and b, and a flag indicating a negative result\\n     *           (i.e., a - b if a is greater than or equal to b; otherwise b - a)\\n     */\\n    function bsubSign(uint a, uint b) internal pure returns (uint, bool) {\\n        if (b <= a) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    /**\\n     * @notice Safe multiplication\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @dev Multiply safely (and efficiently), rounding down\\n     * @return - product of operands; throws if overflow or rounding error\\n     */\\n    function bmul(uint a, uint b) internal pure returns (uint) {\\n        // Gas optimization (see github.com/OpenZeppelin/openzeppelin-contracts/pull/522)\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // Standard overflow check: a/a*b=b\\n        uint c0 = a * b;\\n        require(c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n\\n        // Round to 0 if x*y < BONE/2?\\n        uint c1 = c0 + (BalancerConstants.BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint c2 = c1 / BalancerConstants.BONE;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe division\\n     * @param dividend - first operand\\n     * @param divisor - second operand\\n     * @dev Divide safely (and efficiently), rounding down\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bdiv(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_DIV_ZERO\\\");\\n\\n        // Gas optimization\\n        if (dividend == 0){\\n            return 0;\\n        }\\n\\n        uint c0 = dividend * BalancerConstants.BONE;\\n        require(c0 / dividend == BalancerConstants.BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n\\n        uint c1 = c0 + (divisor / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n\\n        uint c2 = c1 / divisor;\\n        return c2;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer modulo\\n     * @dev Returns the remainder of dividing two unsigned integers.\\n     *      Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * @param dividend - first operand\\n     * @param divisor - second operand -- cannot be zero\\n     * @return - quotient; throws if overflow or rounding error\\n     */\\n    function bmod(uint dividend, uint divisor) internal pure returns (uint) {\\n        require(divisor != 0, \\\"ERR_MODULO_BY_ZERO\\\");\\n\\n        return dividend % divisor;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer max\\n     * @dev Returns the greater of the two input values\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the maximum of a and b\\n     */\\n    function bmax(uint a, uint b) internal pure returns (uint) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer min\\n     * @dev returns b, if b < a; otherwise returns a\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the lesser of the two input values\\n     */\\n    function bmin(uint a, uint b) internal pure returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Safe unsigned integer average\\n     * @dev Guard against (a+b) overflow by dividing each operand separately\\n     *\\n     * @param a - first operand\\n     * @param b - second operand\\n     * @return - the average of the two values\\n     */\\n    function baverage(uint a, uint b) internal pure returns (uint) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n\\n    /**\\n     * @notice Babylonian square root implementation\\n     * @dev (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n     * @param y - operand\\n     * @return z - the square root result\\n     */\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        }\\n        else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8525e4ade460fb2f220853beedb56580f2ba0525f92313c079a72cf3b70fd03\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/libraries/RightsManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @author Balancer Labs\\n * @title Manage Configurable Rights for the smart pool\\n *      canPauseSwapping - can setPublicSwap back to false after turning it on\\n *                         by default, it is off on initialization and can only be turned on\\n *      canChangeSwapFee - can setSwapFee after initialization (by default, it is fixed at create time)\\n *      canChangeWeights - can bind new token weights (allowed by default in base pool)\\n *      canAddRemoveTokens - can bind/unbind tokens (allowed by default in base pool)\\n *      canWhitelistLPs - can limit liquidity providers to a given set of addresses\\n *      canChangeCap - can change the BSP cap (max # of pool tokens)\\n */\\nlibrary RightsManager {\\n\\n    // Type declarations\\n\\n    enum Permissions { PAUSE_SWAPPING,\\n                       CHANGE_SWAP_FEE,\\n                       CHANGE_WEIGHTS,\\n                       ADD_REMOVE_TOKENS,\\n                       WHITELIST_LPS,\\n                       CHANGE_CAP }\\n\\n    struct Rights {\\n        bool canPauseSwapping;\\n        bool canChangeSwapFee;\\n        bool canChangeWeights;\\n        bool canAddRemoveTokens;\\n        bool canWhitelistLPs;\\n        bool canChangeCap;\\n    }\\n\\n    // State variables (can only be constants in a library)\\n    bool public constant DEFAULT_CAN_PAUSE_SWAPPING = false;\\n    bool public constant DEFAULT_CAN_CHANGE_SWAP_FEE = true;\\n    bool public constant DEFAULT_CAN_CHANGE_WEIGHTS = true;\\n    bool public constant DEFAULT_CAN_ADD_REMOVE_TOKENS = false;\\n    bool public constant DEFAULT_CAN_WHITELIST_LPS = false;\\n    bool public constant DEFAULT_CAN_CHANGE_CAP = false;\\n\\n    // Functions\\n\\n    /**\\n     * @notice create a struct from an array (or return defaults)\\n     * @dev If you pass an empty array, it will construct it using the defaults\\n     * @param a - array input\\n     * @return Rights struct\\n     */ \\n    function constructRights(bool[] calldata a) external pure returns (Rights memory) {\\n        if (a.length == 0) {\\n            return Rights(DEFAULT_CAN_PAUSE_SWAPPING,\\n                          DEFAULT_CAN_CHANGE_SWAP_FEE,\\n                          DEFAULT_CAN_CHANGE_WEIGHTS,\\n                          DEFAULT_CAN_ADD_REMOVE_TOKENS,\\n                          DEFAULT_CAN_WHITELIST_LPS,\\n                          DEFAULT_CAN_CHANGE_CAP);\\n        }\\n        else {\\n            return Rights(a[0], a[1], a[2], a[3], a[4], a[5]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Convert rights struct to an array (e.g., for events, GUI)\\n     * @dev avoids multiple calls to hasPermission\\n     * @param rights - the rights struct to convert\\n     * @return boolean array containing the rights settings\\n     */\\n    function convertRights(Rights calldata rights) external pure returns (bool[] memory) {\\n        bool[] memory result = new bool[](6);\\n\\n        result[0] = rights.canPauseSwapping;\\n        result[1] = rights.canChangeSwapFee;\\n        result[2] = rights.canChangeWeights;\\n        result[3] = rights.canAddRemoveTokens;\\n        result[4] = rights.canWhitelistLPs;\\n        result[5] = rights.canChangeCap;\\n\\n        return result;\\n    }\\n\\n    // Though it is actually simple, the number of branches triggers code-complexity\\n    /* solhint-disable code-complexity */\\n\\n    /**\\n     * @notice Externally check permissions using the Enum\\n     * @param self - Rights struct containing the permissions\\n     * @param permission - The permission to check\\n     * @return Boolean true if it has the permission\\n     */\\n    function hasPermission(Rights calldata self, Permissions permission) external pure returns (bool) {\\n        if (Permissions.PAUSE_SWAPPING == permission) {\\n            return self.canPauseSwapping;\\n        }\\n        else if (Permissions.CHANGE_SWAP_FEE == permission) {\\n            return self.canChangeSwapFee;\\n        }\\n        else if (Permissions.CHANGE_WEIGHTS == permission) {\\n            return self.canChangeWeights;\\n        }\\n        else if (Permissions.ADD_REMOVE_TOKENS == permission) {\\n            return self.canAddRemoveTokens;\\n        }\\n        else if (Permissions.WHITELIST_LPS == permission) {\\n            return self.canWhitelistLPs;\\n        }\\n        else if (Permissions.CHANGE_CAP == permission) {\\n            return self.canChangeCap;\\n        }\\n    }\\n\\n    /* solhint-enable code-complexity */\\n}\\n\",\"keccak256\":\"0xfde5e523cad34e49de6d1a61697ee56671273b95d765f1ead68276f1ceb7a610\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/libraries/SafeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// Libraries\\n\\n/**\\n * @author PieDAO (ported to Balancer Labs)\\n * @title SafeApprove - set approval for tokens that require 0 prior approval\\n * @dev Perhaps to address the known ERC20 race condition issue\\n *      See https://github.com/crytic/not-so-smart-contracts/tree/master/race_condition\\n *      Some tokens - notably KNC - only allow approvals to be increased from 0\\n */\\nlibrary SafeApprove {\\n    /**\\n     * @notice handle approvals of tokens that require approving from a base of 0\\n     * @param token - the token we're approving\\n     * @param spender - entity the owner (sender) is approving to spend his tokens\\n     * @param amount - number of tokens being approved\\n     */\\n    function safeApprove(IERC20 token, address spender, uint amount) internal returns (bool) {\\n        uint currentAllowance = token.allowance(address(this), spender);\\n\\n        // Do nothing if allowance is already set to this value\\n        if(currentAllowance == amount) {\\n            return true;\\n        }\\n\\n        // If approval is not zero reset it to zero first\\n        if(currentAllowance != 0) {\\n            return token.approve(spender, 0);\\n        }\\n\\n        // do the actual approval\\n        return token.approve(spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0b8e31e0b319e9780f64f3d382fac15c3556d9e82ae74e236eebdb4fdd3ff1ee\",\"license\":\"GPL-3.0-or-later\"},\"configurable-rights-pool/libraries/SmartPoolManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.6.12;\\n\\n// Needed to pass in structs\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IConfigurableRightsPool.sol\\\";\\nimport \\\"../contracts/IBFactory.sol\\\";\\nimport \\\"./BalancerSafeMath.sol\\\";\\nimport \\\"./SafeApprove.sol\\\";\\n\\n\\n/**\\n * @author Balancer Labs\\n * @title Factor out the weight updates\\n */\\nlibrary SmartPoolManager {\\n    // Type declarations\\n\\n    struct NewTokenParams {\\n        address addr;\\n        bool isCommitted;\\n        uint commitBlock;\\n        uint denorm;\\n        uint balance;\\n    }\\n\\n    // For blockwise, automated weight updates\\n    // Move weights linearly from startWeights to endWeights,\\n    // between startBlock and endBlock\\n    struct GradualUpdateParams {\\n        uint startBlock;\\n        uint endBlock;\\n        uint[] startWeights;\\n        uint[] endWeights;\\n    }\\n\\n    // updateWeight and pokeWeights are unavoidably long\\n    /* solhint-disable function-max-lines */\\n\\n    /**\\n     * @notice Update the weight of an existing token\\n     * @dev Refactored to library to make CRPFactory deployable\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to be reweighted\\n     * @param newWeight - new weight of the token\\n    */\\n    function updateWeight(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token,\\n        uint newWeight\\n    )\\n        external\\n    {\\n        require(newWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(newWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n\\n        uint currentWeight = bPool.getDenormalizedWeight(token);\\n        // Save gas; return immediately on NOOP\\n        if (currentWeight == newWeight) {\\n             return;\\n        }\\n\\n        uint currentBalance = bPool.getBalance(token);\\n        uint totalSupply = self.totalSupply();\\n        uint totalWeight = bPool.getTotalDenormalizedWeight();\\n        uint poolShares;\\n        uint deltaBalance;\\n        uint deltaWeight;\\n        uint newBalance;\\n\\n        if (newWeight < currentWeight) {\\n            // This means the controller will withdraw tokens to keep price\\n            // So they need to redeem PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(currentWeight, newWeight);\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // New balance cannot be lower than MIN_BALANCE\\n            newBalance = BalancerSafeMath.bsub(currentBalance, deltaBalance);\\n\\n            require(newBalance >= BalancerConstants.MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n            // First get the tokens from this contract (Pool Controller) to msg.sender\\n            bPool.rebind(token, newBalance, newWeight);\\n\\n            // Now with the tokens this contract can send them to msg.sender\\n            bool xfer = IERC20(token).transfer(msg.sender, deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            self.pullPoolShareFromLib(msg.sender, poolShares);\\n            self.burnPoolShareFromLib(poolShares);\\n        }\\n        else {\\n            // This means the controller will deposit tokens to keep the price.\\n            // They will be minted and given PCTokens\\n            deltaWeight = BalancerSafeMath.bsub(newWeight, currentWeight);\\n\\n            require(BalancerSafeMath.badd(totalWeight, deltaWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                    \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n            // poolShares = totalSupply * (deltaWeight / totalWeight)\\n            poolShares = BalancerSafeMath.bmul(totalSupply,\\n                                               BalancerSafeMath.bdiv(deltaWeight, totalWeight));\\n            // deltaBalance = currentBalance * (deltaWeight / currentWeight)\\n            deltaBalance = BalancerSafeMath.bmul(currentBalance,\\n                                                 BalancerSafeMath.bdiv(deltaWeight, currentWeight));\\n\\n            // First gets the tokens from msg.sender to this contract (Pool Controller)\\n            bool xfer = IERC20(token).transferFrom(msg.sender, address(this), deltaBalance);\\n            require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n            // Now with the tokens this contract can bind them to the pool it controls\\n            bPool.rebind(token, BalancerSafeMath.badd(currentBalance, deltaBalance), newWeight);\\n\\n            self.mintPoolShareFromLib(poolShares);\\n            self.pushPoolShareFromLib(msg.sender, poolShares);\\n        }\\n    }\\n\\n    /**\\n     * @notice External function called to make the contract update weights according to plan\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param gradualUpdate - gradual update parameters from the CRP\\n    */\\n    function pokeWeights(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate\\n    )\\n        external\\n    {\\n        // Do nothing if we call this when there is no update plan\\n        if (gradualUpdate.startBlock == 0) {\\n            return;\\n        }\\n\\n        // Error to call it before the start of the plan\\n        require(block.number >= gradualUpdate.startBlock, \\\"ERR_CANT_POKE_YET\\\");\\n        // Proposed error message improvement\\n        // require(block.number >= startBlock, \\\"ERR_NO_HOKEY_POKEY\\\");\\n\\n        // This allows for pokes after endBlock that get weights to endWeights\\n        // Get the current block (or the endBlock, if we're already past the end)\\n        uint currentBlock;\\n        if (block.number > gradualUpdate.endBlock) {\\n            currentBlock = gradualUpdate.endBlock;\\n        }\\n        else {\\n            currentBlock = block.number;\\n        }\\n\\n        uint blockPeriod = BalancerSafeMath.bsub(gradualUpdate.endBlock, gradualUpdate.startBlock);\\n        uint blocksElapsed = BalancerSafeMath.bsub(currentBlock, gradualUpdate.startBlock);\\n        uint weightDelta;\\n        uint deltaPerBlock;\\n        uint newWeight;\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            // Make sure it does nothing if the new and old weights are the same (saves gas)\\n            // It's a degenerate case if they're *all* the same, but you certainly could have\\n            // a plan where you only change some of the weights in the set\\n            if (gradualUpdate.startWeights[i] != gradualUpdate.endWeights[i]) {\\n                if (gradualUpdate.endWeights[i] < gradualUpdate.startWeights[i]) {\\n                    // We are decreasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                        gradualUpdate.endWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight - (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.bsub(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n                else {\\n                    // We are increasing the weight\\n\\n                    // First get the total weight delta\\n                    weightDelta = BalancerSafeMath.bsub(gradualUpdate.endWeights[i],\\n                                                        gradualUpdate.startWeights[i]);\\n                    // And the amount it should change per block = total change/number of blocks in the period\\n                    deltaPerBlock = BalancerSafeMath.bdiv(weightDelta, blockPeriod);\\n                    //deltaPerBlock = bdivx(weightDelta, blockPeriod);\\n\\n                     // newWeight = startWeight + (blocksElapsed * deltaPerBlock)\\n                    newWeight = BalancerSafeMath.badd(gradualUpdate.startWeights[i],\\n                                                      BalancerSafeMath.bmul(blocksElapsed, deltaPerBlock));\\n                }\\n\\n                uint bal = bPool.getBalance(tokens[i]);\\n\\n                bPool.rebind(tokens[i], bal, newWeight);\\n            }\\n        }\\n\\n        // Reset to allow add/remove tokens, or manual weight updates\\n        if (block.number >= gradualUpdate.endBlock) {\\n            gradualUpdate.startBlock = 0;\\n        }\\n    }\\n\\n    /* solhint-enable function-max-lines */\\n\\n    /**\\n     * @notice Schedule (commit) a token to be added; must call applyAddToken after a fixed\\n     *         number of blocks to actually add the token\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - the token to be added\\n     * @param balance - how much to be added\\n     * @param denormalizedWeight - the desired token weight\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function commitAddToken(\\n        IBPool bPool,\\n        address token,\\n        uint balance,\\n        uint denormalizedWeight,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(!bPool.isBound(token), \\\"ERR_IS_BOUND\\\");\\n\\n        require(denormalizedWeight <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n        require(denormalizedWeight >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n        require(BalancerSafeMath.badd(bPool.getTotalDenormalizedWeight(),\\n                                      denormalizedWeight) <= BalancerConstants.MAX_TOTAL_WEIGHT,\\n                \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        require(balance >= BalancerConstants.MIN_BALANCE, \\\"ERR_BALANCE_BELOW_MIN\\\");\\n\\n        newToken.addr = token;\\n        newToken.balance = balance;\\n        newToken.denorm = denormalizedWeight;\\n        newToken.commitBlock = block.number;\\n        newToken.isCommitted = true;\\n    }\\n\\n    /**\\n     * @notice Add the token previously committed (in commitAddToken) to the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param addTokenTimeLockInBlocks -  Wait time between committing and applying a new token\\n     * @param newToken - NewTokenParams struct used to hold the token data (in CRP storage)\\n     */\\n    function applyAddToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint addTokenTimeLockInBlocks,\\n        NewTokenParams storage newToken\\n    )\\n        external\\n    {\\n        require(newToken.isCommitted, \\\"ERR_NO_TOKEN_COMMIT\\\");\\n        require(BalancerSafeMath.bsub(block.number, newToken.commitBlock) >= addTokenTimeLockInBlocks,\\n                                      \\\"ERR_TIMELOCK_STILL_COUNTING\\\");\\n\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * newTokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply, newToken.denorm),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // Clear this to allow adding more tokens\\n        newToken.isCommitted = false;\\n\\n        // First gets the tokens from msg.sender to this contract (Pool Controller)\\n        bool returnValue = IERC20(newToken.addr).transferFrom(self.getController(), address(self), newToken.balance);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        // Now with the tokens this contract can bind them to the pool it controls\\n        // Approves bPool to pull from this controller\\n        // Approve unlimited, same as when creating the pool, so they can join pools later\\n        returnValue = SafeApprove.safeApprove(IERC20(newToken.addr), address(bPool), BalancerConstants.MAX_UINT);\\n        require(returnValue, \\\"ERR_ERC20_FALSE\\\");\\n\\n        bPool.bind(newToken.addr, newToken.balance, newToken.denorm);\\n\\n        self.mintPoolShareFromLib(poolShares);\\n        self.pushPoolShareFromLib(msg.sender, poolShares);\\n    }\\n\\n     /**\\n     * @notice Remove a token from the pool\\n     * @dev Logic in the CRP controls when ths can be called. There are two related permissions:\\n     *      AddRemoveTokens - which allows removing down to the underlying BPool limit of two\\n     *      RemoveAllTokens - which allows completely draining the pool by removing all tokens\\n     *                        This can result in a non-viable pool with 0 or 1 tokens (by design),\\n     *                        meaning all swapping or binding operations would fail in this state\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param token - token to remove\\n     */\\n    function removeToken(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address token\\n    )\\n        external\\n    {\\n        uint totalSupply = self.totalSupply();\\n\\n        // poolShares = totalSupply * tokenWeight / totalWeight\\n        uint poolShares = BalancerSafeMath.bdiv(BalancerSafeMath.bmul(totalSupply,\\n                                                                      bPool.getDenormalizedWeight(token)),\\n                                                bPool.getTotalDenormalizedWeight());\\n\\n        // this is what will be unbound from the pool\\n        // Have to get it before unbinding\\n        uint balance = bPool.getBalance(token);\\n\\n        // Unbind and get the tokens out of balancer pool\\n        bPool.unbind(token);\\n\\n        // Now with the tokens this contract can send them to msg.sender\\n        bool xfer = IERC20(token).transfer(self.getController(), balance);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n\\n        self.pullPoolShareFromLib(self.getController(), poolShares);\\n        self.burnPoolShareFromLib(poolShares);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid\\n     * @param token - The prospective token to verify\\n     */\\n    function verifyTokenCompliance(address token) external {\\n        verifyTokenComplianceInternal(token);\\n    }\\n\\n    /**\\n     * @notice Non ERC20-conforming tokens are problematic; don't allow them in pools\\n     * @dev Will revert if invalid - overloaded to save space in the main contract\\n     * @param tokens - The prospective tokens to verify\\n     */\\n    function verifyTokenCompliance(address[] calldata tokens) external {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            verifyTokenComplianceInternal(tokens[i]);\\n         }\\n    }\\n\\n    /**\\n     * @notice Update weights in a predetermined way, between startBlock and endBlock,\\n     *         through external cals to pokeWeights\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param newWeights - final weights we want to get to\\n     * @param startBlock - when weights should start to change\\n     * @param endBlock - when weights will be at their final values\\n     * @param minimumWeightChangeBlockPeriod - needed to validate the block period\\n    */\\n    function updateWeightsGradually(\\n        IBPool bPool,\\n        GradualUpdateParams storage gradualUpdate,\\n        uint[] calldata newWeights,\\n        uint startBlock,\\n        uint endBlock,\\n        uint minimumWeightChangeBlockPeriod\\n    )\\n        external\\n    {\\n        require(block.number < endBlock, \\\"ERR_GRADUAL_UPDATE_TIME_TRAVEL\\\");\\n        \\n        if (block.number > startBlock) {\\n            // This means the weight update should start ASAP\\n            // Moving the start block up prevents a big jump/discontinuity in the weights\\n            gradualUpdate.startBlock = block.number;\\n        }\\n        else{\\n            gradualUpdate.startBlock = startBlock;\\n        }\\n\\n        // Enforce a minimum time over which to make the changes\\n        // The also prevents endBlock <= startBlock\\n        require(BalancerSafeMath.bsub(endBlock, gradualUpdate.startBlock) >= minimumWeightChangeBlockPeriod,\\n                \\\"ERR_WEIGHT_CHANGE_TIME_BELOW_MIN\\\");\\n\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        // Must specify weights for all tokens\\n        require(newWeights.length == tokens.length, \\\"ERR_START_WEIGHTS_MISMATCH\\\");\\n\\n        uint weightsSum = 0;\\n        gradualUpdate.startWeights = new uint[](tokens.length);\\n\\n        // Check that endWeights are valid now to avoid reverting in a future pokeWeights call\\n        //\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            require(newWeights[i] <= BalancerConstants.MAX_WEIGHT, \\\"ERR_WEIGHT_ABOVE_MAX\\\");\\n            require(newWeights[i] >= BalancerConstants.MIN_WEIGHT, \\\"ERR_WEIGHT_BELOW_MIN\\\");\\n\\n            weightsSum = BalancerSafeMath.badd(weightsSum, newWeights[i]);\\n            gradualUpdate.startWeights[i] = bPool.getDenormalizedWeight(tokens[i]);\\n        }\\n        require(weightsSum <= BalancerConstants.MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n\\n        gradualUpdate.endBlock = endBlock;\\n        gradualUpdate.endWeights = newWeights;\\n    }\\n\\n    /**\\n     * @notice Join a pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountOut - number of pool tokens to receive\\n     * @param maxAmountsIn - Max amount of asset tokens to spend\\n     * @return actualAmountsIn - calculated values of the tokens to pull in\\n     */\\n    function joinPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountOut,\\n        uint[] calldata maxAmountsIn\\n    )\\n         external\\n         view\\n         returns (uint[] memory actualAmountsIn)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(maxAmountsIn.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n        // Subtract  1 to ensure any rounding errors favor the pool\\n        uint ratio = BalancerSafeMath.bdiv(poolAmountOut,\\n                                           BalancerSafeMath.bsub(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        // We know the length of the array; initialize it, and fill it below\\n        // Cannot do \\\"push\\\" in memory\\n        actualAmountsIn = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Add 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountIn = BalancerSafeMath.bmul(ratio,\\n                                                       BalancerSafeMath.badd(bal, 1));\\n\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n\\n            actualAmountsIn[i] = tokenAmountIn;\\n        }\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for underlying assets\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountsOut - minimum amount of asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return pAiAfterExitFee - final amount in (after accounting for exit fee)\\n     * @return actualAmountsOut - calculated amounts of each token to pull\\n     */\\n    function exitPool(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        uint poolAmountIn,\\n        uint[] calldata minAmountsOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint pAiAfterExitFee, uint[] memory actualAmountsOut)\\n    {\\n        address[] memory tokens = bPool.getCurrentTokens();\\n\\n        require(minAmountsOut.length == tokens.length, \\\"ERR_AMOUNTS_MISMATCH\\\");\\n\\n        uint poolTotal = self.totalSupply();\\n\\n        // Calculate exit fee and the final amount in\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n        pAiAfterExitFee = BalancerSafeMath.bsub(poolAmountIn, exitFee);\\n\\n        uint ratio = BalancerSafeMath.bdiv(pAiAfterExitFee,\\n                                           BalancerSafeMath.badd(poolTotal, 1));\\n\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        actualAmountsOut = new uint[](tokens.length);\\n\\n        // This loop contains external calls\\n        // External calls are to math libraries or the underlying pool, so low risk\\n        for (uint i = 0; i < tokens.length; i++) {\\n            address t = tokens[i];\\n            uint bal = bPool.getBalance(t);\\n            // Subtract 1 to ensure any rounding errors favor the pool\\n            uint tokenAmountOut = BalancerSafeMath.bmul(ratio,\\n                                                        BalancerSafeMath.bsub(bal, 1));\\n\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n\\n            actualAmountsOut[i] = tokenAmountOut;\\n        }\\n    }\\n\\n    /**\\n     * @notice Join by swapping a fixed amount of an external token in (must be present in the pool)\\n     *         System calculates the pool token amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in\\n     * @param tokenAmountIn - amount of deposit\\n     * @param minPoolAmountOut - minimum of pool tokens to receive\\n     * @return poolAmountOut - amount of pool tokens minted and transferred\\n     */\\n    function joinswapExternAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint tokenAmountIn,\\n        uint minPoolAmountOut\\n    )\\n        external\\n        view\\n        returns (uint poolAmountOut)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        poolAmountOut = bPool.calcPoolOutGivenSingleIn(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n    }\\n\\n    /**\\n     * @notice Join by swapping an external token in (must be present in the pool)\\n     *         To receive an exact amount of pool tokens out. System calculates the deposit amount\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenIn - which token we're transferring in (system calculates amount required)\\n     * @param poolAmountOut - amount of pool tokens to be received\\n     * @param maxAmountIn - Maximum asset tokens that can be pulled to pay for the pool tokens\\n     * @return tokenAmountIn - amount of asset tokens transferred in to purchase the pool tokens\\n     */\\n    function joinswapPoolAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenIn,\\n        uint poolAmountOut,\\n        uint maxAmountIn\\n    )\\n        external\\n        view\\n        returns (uint tokenAmountIn)\\n    {\\n        require(bPool.isBound(tokenIn), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountIn = bPool.calcSingleInGivenPoolOut(\\n                            bPool.getBalance(tokenIn),\\n                            bPool.getDenormalizedWeight(tokenIn),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= BalancerSafeMath.bmul(bPool.getBalance(tokenIn),\\n                                                       BalancerConstants.MAX_IN_RATIO),\\n                                                       \\\"ERR_MAX_IN_RATIO\\\");\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem a specific number of pool tokens for an underlying asset\\n     *         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param poolAmountIn - amount of pool tokens to redeem\\n     * @param minAmountOut - minimum asset tokens to receive\\n     * @return exitFee - calculated exit fee\\n     * @return tokenAmountOut - amount of asset tokens returned\\n     */\\n    function exitswapPoolAmountIn(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint poolAmountIn,\\n        uint minAmountOut\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint tokenAmountOut)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n\\n        tokenAmountOut = bPool.calcSingleOutGivenPoolIn(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            poolAmountIn,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    /**\\n     * @notice Exit a pool - redeem pool tokens for a specific amount of underlying assets\\n     *         Asset must be present in the pool\\n     * @param self - ConfigurableRightsPool instance calling the library\\n     * @param bPool - Core BPool the CRP is wrapping\\n     * @param tokenOut - which token the caller wants to receive\\n     * @param tokenAmountOut - amount of underlying asset tokens to receive\\n     * @param maxPoolAmountIn - maximum pool tokens to be redeemed\\n     * @return exitFee - calculated exit fee\\n     * @return poolAmountIn - amount of pool tokens redeemed\\n     */\\n    function exitswapExternAmountOut(\\n        IConfigurableRightsPool self,\\n        IBPool bPool,\\n        address tokenOut,\\n        uint tokenAmountOut,\\n        uint maxPoolAmountIn\\n    )\\n        external\\n        view\\n        returns (uint exitFee, uint poolAmountIn)\\n    {\\n        require(bPool.isBound(tokenOut), \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= BalancerSafeMath.bmul(bPool.getBalance(tokenOut),\\n                                                        BalancerConstants.MAX_OUT_RATIO),\\n                                                        \\\"ERR_MAX_OUT_RATIO\\\");\\n        poolAmountIn = bPool.calcPoolInGivenSingleOut(\\n                            bPool.getBalance(tokenOut),\\n                            bPool.getDenormalizedWeight(tokenOut),\\n                            self.totalSupply(),\\n                            bPool.getTotalDenormalizedWeight(),\\n                            tokenAmountOut,\\n                            bPool.getSwapFee()\\n                        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        exitFee = BalancerSafeMath.bmul(poolAmountIn, BalancerConstants.EXIT_FEE);\\n    }\\n\\n    // Internal functions\\n\\n    // Check for zero transfer, and make sure it returns true to returnValue\\n    function verifyTokenComplianceInternal(address token) internal {\\n        bool returnValue = IERC20(token).transfer(msg.sender, 0);\\n        require(returnValue, \\\"ERR_NONCONFORMING_TOKEN\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd085e09cdfffae7f0c9b3e444cfefe1c860d25a498c3eface37db40374ae8d15\",\"license\":\"GPL-3.0-or-later\"},\"contracts/liquidity/ElasticSupplyPool.sol\":{\"content\":\"// SPDX-License-Identifier: GNUV3\\n\\npragma solidity 0.6.12;\\n\\n// Needed to handle structures externally\\npragma experimental ABIEncoderV2;\\n\\n// Imports\\nimport \\\"configurable-rights-pool/contracts/ConfigurableRightsPool.sol\\\";\\n\\n/**\\n * @author Ampleforth engineering team & Balancer Labs\\n *\\n * Reference:\\n * https://github.com/balancer-labs/configurable-rights-pool/blob/master/contracts/templates/ElasticSupplyPool.sol\\n *\\n * @title Ampl Elastic Configurable Rights Pool.\\n *\\n * @dev   Extension of Balancer labs' configurable rights pool (smart-pool).\\n *        Amples are a dynamic supply tokens, supply and individual balances change daily by a Rebase operation.\\n *        In constant-function markets, Ampleforth's supply adjustments result in Impermanent Loss (IL)\\n *        to liquidity providers. The AmplElasticCRP is an extension of Balancer Lab's\\n *        ConfigurableRightsPool which mitigates IL induced by supply adjustments.\\n *\\n *        It accomplishes this by doing the following mechanism:\\n *        The `resyncWeight` method will be invoked atomically after rebase through Ampleforth's orchestrator.\\n *\\n *        When rebase changes supply, ampl weight is updated to the geometric mean of\\n *        the current ampl weight and the target. Every other token's weight is updated\\n *        proportionally such that relative ratios are same.\\n *\\n *        Weights: {w_ampl, w_t1 ... w_tn}\\n *\\n *        Rebase_change: x% (Ample's supply changes by x%, can be positive or negative)\\n *\\n *        Ample target weight: w_ampl_target = (100+x)/100 * w_ampl\\n *\\n *        w_ampl_new = sqrt(w_ampl * w_ampl_target)  // geometric mean\\n *        for i in tn:\\n *           w_ti_new = (w_ampl_new * w_ti) / w_ampl_target\\n *\\n */\\ncontract ElasticSupplyPool is ConfigurableRightsPool {\\n    constructor(\\n        address factoryAddress,\\n        PoolParams memory poolParams,\\n        RightsManager.Rights memory rightsStruct\\n    ) public ConfigurableRightsPool(factoryAddress, poolParams, rightsStruct) {\\n        require(rights.canChangeWeights, \\\"ERR_NOT_CONFIGURABLE_WEIGHTS\\\");\\n    }\\n\\n    /**\\n     * @notice Create a new Smart Pool - and set the block period time parameters\\n     * @dev Initialize the swap fee to the value provided in the CRP constructor\\n     *      Can be changed if the canChangeSwapFee permission is enabled\\n     *      Time parameters will be fixed at these values\\n     *\\n     *      If this contract doesn't have canChangeWeights permission - or you want to use the default\\n     *      values, the block time arguments are not needed, and you can just call the single-argument\\n     *      createPool()\\n     * @param initialSupply - Starting token balance\\n     * @param minimumWeightChangeBlockPeriodParam - Enforce a minimum time between the start and end blocks\\n     * @param addTokenTimeLockInBlocksParam - Enforce a mandatory wait time between updates\\n     *                                   This is also the wait time between committing and applying a new token\\n     */\\n    function createPool(\\n        uint256 initialSupply,\\n        uint256 minimumWeightChangeBlockPeriodParam,\\n        uint256 addTokenTimeLockInBlocksParam\\n    ) external override onlyOwner logs lock {\\n        require(\\n            minimumWeightChangeBlockPeriodParam >= addTokenTimeLockInBlocksParam,\\n            \\\"ERR_INCONSISTENT_TOKEN_TIME_LOCK\\\"\\n        );\\n\\n        minimumWeightChangeBlockPeriod = minimumWeightChangeBlockPeriodParam;\\n        addTokenTimeLockInBlocks = addTokenTimeLockInBlocksParam;\\n\\n        createPoolInternal(initialSupply);\\n    }\\n\\n    function updateWeight(address token, uint256 newWeight) external override logs onlyOwner needsBPool {\\n        revert(\\\"ERR_UNSUPPORTED_OPERATION\\\");\\n    }\\n\\n    function updateWeightsGradually(\\n        uint256[] calldata newWeights,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    ) external override logs onlyOwner needsBPool {\\n        revert(\\\"ERR_UNSUPPORTED_OPERATION\\\");\\n    }\\n\\n    function pokeWeights() external override logs needsBPool {\\n        revert(\\\"ERR_UNSUPPORTED_OPERATION\\\");\\n    }\\n\\n    /*\\n     * @param token The address of the token in the underlying BPool to be weight adjusted.\\n     * @dev Checks if the token's current pool balance has deviated from cached balance,\\n     *      if so it adjusts the token's weights proportional to the deviation.\\n     *      The underlying BPool enforces bounds on MIN_WEIGHTS=1e18, MAX_WEIGHT=50e18 and TOTAL_WEIGHT=50e18.\\n     *      NOTE: The BPool.rebind function CAN REVERT if the updated weights go beyond the enforced bounds.\\n     */\\n    function resyncWeight(address token) external logs lock needsBPool {\\n        // NOTE: Skipping gradual update check\\n        // Pool will never go into gradual update state as `updateWeightsGradually` is disabled\\n        // require(\\n        //     ConfigurableRightsPool.gradualUpdate.startBlock == 0,\\n        //     \\\"ERR_NO_UPDATE_DURING_GRADUAL\\\");\\n\\n        require(IBPool(address(bPool)).isBound(token), \\\"ERR_NOT_BOUND\\\");\\n\\n        // get cached balance\\n        uint256 tokenBalanceBefore = IBPool(address(bPool)).getBalance(token);\\n\\n        // sync balance\\n        IBPool(address(bPool)).gulp(token);\\n\\n        // get new balance\\n        uint256 tokenBalanceAfter = IBPool(address(bPool)).getBalance(token);\\n\\n        // No-Op\\n        if (tokenBalanceBefore == tokenBalanceAfter) {\\n            return;\\n        }\\n\\n        // current token weight\\n        uint256 tokenWeightBefore = IBPool(address(bPool)).getDenormalizedWeight(token);\\n\\n        // target token weight = RebaseRatio * previous token weight\\n        uint256 tokenWeightTarget = BalancerSafeMath.bdiv(\\n            BalancerSafeMath.bmul(tokenWeightBefore, tokenBalanceAfter),\\n            tokenBalanceBefore\\n        );\\n\\n        // new token weight = sqrt(current token weight * target token weight)\\n        uint256 tokenWeightAfter = BalancerSafeMath.sqrt(\\n            BalancerSafeMath.bdiv(BalancerSafeMath.bmul(tokenWeightBefore, tokenWeightTarget), 1)\\n        );\\n\\n        address[] memory tokens = IBPool(address(bPool)).getCurrentTokens();\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == token) {\\n                // adjust weight\\n                IBPool(address(bPool)).rebind(token, tokenBalanceAfter, tokenWeightAfter);\\n            } else {\\n                uint256 otherWeightBefore = IBPool(address(bPool)).getDenormalizedWeight(tokens[i]);\\n                uint256 otherBalance = bPool.getBalance(tokens[i]);\\n\\n                // other token weight = (new token weight * other token weight before) / target token weight\\n                uint256 otherWeightAfter = BalancerSafeMath.bdiv(\\n                    BalancerSafeMath.bmul(tokenWeightAfter, otherWeightBefore),\\n                    tokenWeightTarget\\n                );\\n\\n                // adjust weight\\n                IBPool(address(bPool)).rebind(tokens[i], otherBalance, otherWeightAfter);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9f17b6b64df05d1777e58cb0608f6522a1ca5b86318aa7b5d195fafbcced58e2\",\"license\":\"GNUV3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061035d5760003560e01c80636d06dfa0116101d3578063b02f0b7311610104578063dd62ed3e116100a2578063e7f1a5541161007c578063e7f1a554146106d2578063e854f53d146106da578063f226b528146106e2578063fde924f7146106ea5761035d565b8063dd62ed3e146106a4578063e211b875146106b7578063e2762d4b146106bf5761035d565b8063c3391d27116100de578063c3391d2714610652578063c42bd05a14610665578063c83a1c2d1461067e578063d73dd623146106915761035d565b8063b02f0b731461062f578063b64ef17b14610642578063c275d81b1461064a5761035d565b80639776e94b116101715780639d829c2b1161014b5780639d829c2b14610604578063a3f4df7e1461060c578063a835a0de14610614578063a9059cbb1461061c5761035d565b80639776e94b146105d4578063980e8db6146105e25780639a82417e146105fc5761035d565b8063806c6f87116101ad578063806c6f871461059357806392eefe9b146105a6578063948d8ce6146105b957806395d89b41146105cc5761035d565b80636d06dfa01461056557806370a082311461057857806374983a0d1461058b5761035d565b8063313ce567116102ad5780634c20d2091161024b5780635a8342d8116102255780635a8342d8146105165780635db342771461052c5780635fa7b5841461053f57806366188463146105525761035d565b80634c20d209146104dd5780634f69c0d4146104f057806355c32a23146105035761035d565b806346ab38f11161028757806346ab38f11461049157806347786d37146104a457806349b59552146104b75780634ba57882146104ca5761035d565b8063313ce5671461046357806334e199071461046b57806337c6f4d91461047e5761035d565b80630f93ab471161031a57806323b872dd116102f457806323b872dd14610420578063246bc19b146104335780632e0f2625146104465780633018205f1461045b5761035d565b80630f93ab47146103f257806318160ddd14610405578063220eb7601461040d5761035d565b806302c967481461036257806306fdde031461038b578063095dcccc146103a0578063095ea7b3146103b55780630a165940146103d55780630ce27925146103ea575b600080fd5b6103756103703660046141f1565b6106f2565b6040516103829190614d34565b60405180910390f35b6103936108b9565b6040516103829190614708565b6103b36103ae3660046141c6565b61094f565b005b6103c86103c33660046141c6565b61097c565b6040516103829190614591565b6103dd6109d5565b60405161038291906144d7565b6103756109e4565b6103b3610400366004614132565b6109ea565b61037561105a565b6103b361041b3660046143bb565b611060565b6103c861042e366004614186565b61108b565b6103b36104413660046142be565b6111b9565b61044e61125d565b6040516103829190614d4b565b6103dd611262565b61044e611271565b6103b36104793660046143bb565b611276565b6103c861048c36600461439c565b6113bb565b61037561049f3660046141f1565b611450565b6103b36104b23660046143bb565b6115fe565b6103b36104c5366004614348565b61172c565b6103b36104d83660046143bb565b611832565b6103b36104eb3660046141f1565b61185a565b6103b36104fe3660046143eb565b611a7b565b6103b36105113660046141c6565b611e7c565b61051e611ea5565b604051610382929190614d3d565b61037561053a3660046141f1565b611eae565b6103b361054d366004614132565b612073565b6103c86105603660046141c6565b61220e565b6103756105733660046141f1565b6122e8565b610375610586366004614132565b6124ad565b6103dd6124c8565b6103c86105a1366004614132565b6124e0565b6103b36105b4366004614132565b612529565b6103756105c7366004614132565b6125d5565b6103936126a2565b6103b36104413660046141c6565b6105ea612703565b6040516103829695949392919061459c565b6103dd61273e565b6103dd612756565b61039361276e565b61037561279d565b6103c861062a3660046141c6565b6127a3565b6103b361063d3660046143eb565b6127df565b6103dd612b73565b6103b3612b82565b6103b36106603660046144a6565b612ce1565b61066d612daa565b604051610382959493929190614529565b6103b361068c366004614132565b612dd1565b6103c861069f3660046141c6565b612ec4565b6103756106b236600461414e565b612f38565b6103b3612f63565b6103b36106cd366004614132565b612fc5565b6103756130ec565b6103756130f2565b6103756130f8565b6103c86130ff565b60405160009033906001600160e01b03198335169061071490849036906145cc565b60405180910390a2600260065414156107485760405162461bcd60e51b815260040161073f906149be565b60405180910390fd5b60026006556008546001600160a01b03166107755760405162461bcd60e51b815260040161073f90614916565b60085460405163724a2d5360e01b8152600091829173__$fefb028005f68e7633c8c9bb2db5a02da7$__9163724a2d53916107c69130916001600160a01b03909116908b908b908b9060040161464f565b604080518083038186803b1580156107dd57600080fd5b505af41580156107f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108159190614435565b91509150809250600061082884846131d7565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e98860405161086d9190614d34565b60405180910390a361087f3385611e9b565b6108888161107f565b60075461089e906001600160a01b03168461096e565b6108a9873388613210565b5050505b60016006559392505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109455780601f1061091a57610100808354040283529160200191610945565b820191906000526020600020905b81548152906001019060200180831161092857829003601f168201915b5050505050905090565b33301461096e5760405162461bcd60e51b815260040161073f9061475b565b6109788282613459565b5050565b3360008181526002602090815260408083206001600160a01b03871680855292528083208590555191929091600080516020614dcf833981519152906109c3908690614d34565b60405180910390a35060015b92915050565b6007546001600160a01b031681565b60185481565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051610a1c9291906145cc565b60405180910390a260026006541415610a475760405162461bcd60e51b815260040161073f906149be565b60026006556008546001600160a01b0316610a745760405162461bcd60e51b815260040161073f90614916565b600854604051630bcded8960e21b81526001600160a01b0390911690632f37b62490610aa49084906004016144d7565b60206040518083038186803b158015610abc57600080fd5b505afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af49190614364565b610b105760405162461bcd60e51b815260040161073f906149e3565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f90610b419085906004016144d7565b60206040518083038186803b158015610b5957600080fd5b505afa158015610b6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9191906143d3565b600854604051631185197d60e31b81529192506001600160a01b031690638c28cbe890610bc29085906004016144d7565b600060405180830381600087803b158015610bdc57600080fd5b505af1158015610bf0573d6000803e3d6000fd5b505060085460405163f8b2cb4f60e01b8152600093506001600160a01b03909116915063f8b2cb4f90610c279086906004016144d7565b60206040518083038186803b158015610c3f57600080fd5b505afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7791906143d3565b905080821415610c88575050611052565b600854604051634a46c67360e11b81526000916001600160a01b03169063948d8ce690610cb99087906004016144d7565b60206040518083038186803b158015610cd157600080fd5b505afa158015610ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0991906143d3565b90506000610d20610d1a8385613464565b856134e1565b90506000610d40610d3b610d348585613464565b60016134e1565b613572565b90506060600860009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610d9257600080fd5b505afa158015610da6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dce9190810190614225565b905060005b815181101561104a57876001600160a01b0316828281518110610df257fe5b60200260200101516001600160a01b03161415610e7457600854604051631feeed5160e11b81526001600160a01b0390911690633fdddaa290610e3d908b908a908890600401614570565b600060405180830381600087803b158015610e5757600080fd5b505af1158015610e6b573d6000803e3d6000fd5b50505050611042565b60085482516000916001600160a01b03169063948d8ce690859085908110610e9857fe5b60200260200101516040518263ffffffff1660e01b8152600401610ebc91906144d7565b60206040518083038186803b158015610ed457600080fd5b505afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c91906143d3565b60085484519192506000916001600160a01b039091169063f8b2cb4f90869086908110610f3557fe5b60200260200101516040518263ffffffff1660e01b8152600401610f5991906144d7565b60206040518083038186803b158015610f7157600080fd5b505afa158015610f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa991906143d3565b90506000610fc0610fba8785613464565b886134e1565b60085486519192506001600160a01b031690633fdddaa290879087908110610fe457fe5b602002602001015184846040518463ffffffff1660e01b815260040161100c93929190614570565b600060405180830381600087803b15801561102657600080fd5b505af115801561103a573d6000803e3d6000fd5b505050505050505b600101610dd3565b505050505050505b506001600655565b60005490565b33301461107f5760405162461bcd60e51b815260040161073f9061475b565b611088816135c3565b50565b60006001600160a01b0383166110b35760405162461bcd60e51b815260040161073f90614885565b336001600160a01b03851614806110ed57506001600160a01b03841660009081526002602090815260408083203384529091529020548211155b6111095760405162461bcd60e51b815260040161073f90614b3d565b61111484848461363d565b6001600160a01b038416600081815260026020908152604080832033808552925290912054911480159061114a57506000198114155b156111ac5761115981846131d7565b6001600160a01b038681166000908152600260209081526040808320338085529252918290208490559051918716929091600080516020614dcf833981519152916111a391614d34565b60405180910390a35b60019150505b9392505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516111eb9291906145cc565b60405180910390a26005546001600160a01b0316331461121d5760405162461bcd60e51b815260040161073f9061475b565b6008546001600160a01b03166112455760405162461bcd60e51b815260040161073f90614916565b60405162461bcd60e51b815260040161073f906147f3565b601281565b6005546001600160a01b031690565b601290565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516112a89291906145cc565b60405180910390a2600260065414156112d35760405162461bcd60e51b815260040161073f906149be565b60026006556005546001600160a01b031633146113025760405162461bcd60e51b815260040161073f9061475b565b6008546001600160a01b031661132a5760405162461bcd60e51b815260040161073f90614916565b600954610100900460ff166113515760405162461bcd60e51b815260040161073f90614c51565b6008546040516334e1990760e01b81526001600160a01b03909116906334e1990790611381908490600401614d34565b600060405180830381600087803b15801561139b57600080fd5b505af11580156113af573d6000803e3d6000fd5b50506001600655505050565b6040516322c1aa2560e11b815260009073__$4c39dc22c986e51e284e93a9c02f15a804$__90634583544a906113f8906009908690600401614cbf565b60206040518083038186803b15801561141057600080fd5b505af4158015611424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114489190614364565b90505b919050565b60405160009033906001600160e01b03198335169061147290849036906145cc565b60405180910390a26002600654141561149d5760405162461bcd60e51b815260040161073f906149be565b60026006556008546001600160a01b03166114ca5760405162461bcd60e51b815260040161073f90614916565b600854604051636a82d4a760e11b8152600091829173__$fefb028005f68e7633c8c9bb2db5a02da7$__9163d505a94e9161151b9130916001600160a01b03909116908b908b908b9060040161464f565b604080518083038186803b15801561153257600080fd5b505af4158015611546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156a9190614435565b91509150809250600061157d86846131d7565b9050866001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e9866040516115c29190614d34565b60405180910390a36115d43387611e9b565b6115dd8161107f565b6007546115f3906001600160a01b03168461096e565b6108a9873386613210565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516116309291906145cc565b60405180910390a26002600654141561165b5760405162461bcd60e51b815260040161073f906149be565b60026006556008546001600160a01b03166116885760405162461bcd60e51b815260040161073f90614916565b6005546001600160a01b031633146116b25760405162461bcd60e51b815260040161073f9061475b565b60095465010000000000900460ff166116dd5760405162461bcd60e51b815260040161073f90614a8b565b336001600160a01b03167f6bc200110c7794738d401810b22ef824a2044a8ccb022d4ad8769840370331f56018548360405161171a929190614d3d565b60405180910390a26018556001600655565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161175e9291906145cc565b60405180910390a2600260065414156117895760405162461bcd60e51b815260040161073f906149be565b60026006556005546001600160a01b031633146117b85760405162461bcd60e51b815260040161073f9061475b565b6008546001600160a01b03166117e05760405162461bcd60e51b815260040161073f90614916565b60095460ff166118025760405162461bcd60e51b815260040161073f90614bcd565b6008546040516324dacaa960e11b81526001600160a01b03909116906349b5955290611381908490600401614591565b3330146118515760405162461bcd60e51b815260040161073f9061475b565b611088816136ee565b336001600160a01b03166000356001600160e01b0319166001600160e01b03191660003660405161188c9291906145cc565b60405180910390a2600260065414156118b75760405162461bcd60e51b815260040161073f906149be565b60026006556005546001600160a01b031633146118e65760405162461bcd60e51b815260040161073f9061475b565b6008546001600160a01b031661190e5760405162461bcd60e51b815260040161073f90614916565b6009546301000000900460ff166119375760405162461bcd60e51b815260040161073f90614787565b600a54156119575760405162461bcd60e51b815260040161073f90614c88565b604051630e0d789b60e11b815273__$fefb028005f68e7633c8c9bb2db5a02da7$__90631c1af1369061198e9086906004016144d7565b60006040518083038186803b1580156119a657600080fd5b505af41580156119ba573d6000803e3d6000fd5b50506040513392503091506001600160a01b038616907f33b043686b9408a355896fe90b2f8ecc86a41d87d1554ef65a739948b4f23e2790600090a460085460405163b489ec1960e01b815273__$fefb028005f68e7633c8c9bb2db5a02da7$__9163b489ec1991611a41916001600160a01b031690879087908790600e906004016145fb565b60006040518083038186803b158015611a5957600080fd5b505af4158015611a6d573d6000803e3d6000fd5b505060016006555050505050565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051611aad9291906145cc565b60405180910390a260026006541415611ad85760405162461bcd60e51b815260040161073f906149be565b60026006556008546001600160a01b0316611b055760405162461bcd60e51b815260040161073f90614916565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b158015611b4a57600080fd5b505afa158015611b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b829190614364565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b5955290611bb490600090600401614591565b600060405180830381600087803b158015611bce57600080fd5b505af1158015611be2573d6000803e3d6000fd5b5050600954600160201b900460ff16159150819050611c1057503360009081526017602052604090205460ff165b611c2c5760405162461bcd60e51b815260040161073f9061482a565b60085460405163a1925f1d60e01b815260609173__$fefb028005f68e7633c8c9bb2db5a02da7$__9163a1925f1d91611c799130916001600160a01b0316908a908a908a90600401614683565b60006040518083038186803b158015611c9157600080fd5b505af4158015611ca5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ccd919081019061430d565b90506060600860009054906101000a90046001600160a01b03166001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611d1f57600080fd5b505afa158015611d33573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d5b9190810190614225565b905060005b8151811015611df9576000828281518110611d7757fe5b602002602001015190506000848381518110611d8f57fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa7283604051611ddc9190614d34565b60405180910390a3611def82338361371b565b5050600101611d60565b50611e0386611851565b611e0d338761096e565b50506008546040516324dacaa960e11b81526001600160a01b03909116906349b5955290611e3f908490600401614591565b600060405180830381600087803b158015611e5957600080fd5b505af1158015611e6d573d6000803e3d6000fd5b50506001600655505050505050565b333014611e9b5760405162461bcd60e51b815260040161073f9061475b565b6109788282613964565b600a54600b5482565b60405160009033906001600160e01b031983351690611ed090849036906145cc565b60405180910390a260026006541415611efb5760405162461bcd60e51b815260040161073f906149be565b60026006556008546001600160a01b0316611f285760405162461bcd60e51b815260040161073f90614916565b600954600160201b900460ff161580611f5057503360009081526017602052604090205460ff165b611f6c5760405162461bcd60e51b815260040161073f9061482a565b60085460405163df90de0b60e01b815273__$fefb028005f68e7633c8c9bb2db5a02da7$__9163df90de0b91611fb89130916001600160a01b039091169089908990899060040161464f565b60206040518083038186803b158015611fd057600080fd5b505af4158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200891906143d3565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa728560405161204d9190614d34565b60405180910390a361205e81611851565b612068338261096e565b6108ad84338561371b565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516120a59291906145cc565b60405180910390a2600260065414156120d05760405162461bcd60e51b815260040161073f906149be565b60026006556005546001600160a01b031633146120ff5760405162461bcd60e51b815260040161073f9061475b565b6008546001600160a01b03166121275760405162461bcd60e51b815260040161073f90614916565b6009546301000000900460ff166121505760405162461bcd60e51b815260040161073f90614787565b600e54600160a01b900460ff161561217a5760405162461bcd60e51b815260040161073f90614b6d565b600a541561219a5760405162461bcd60e51b815260040161073f90614c88565b600854604051630970e47f60e01b815273__$fefb028005f68e7633c8c9bb2db5a02da7$__91630970e47f916121e29130916001600160a01b0390911690869060040161462c565b60006040518083038186803b1580156121fa57600080fd5b505af41580156113af573d6000803e3d6000fd5b3360009081526002602090815260408083206001600160a01b0386168452909152812054808310612262573360009081526002602090815260408083206001600160a01b0388168452909152812055612291565b61226c81846131d7565b3360009081526002602090815260408083206001600160a01b03891684529091529020555b3360008181526002602090815260408083206001600160a01b038916808552925291829020549151909291600080516020614dcf833981519152916122d69190614d34565b60405180910390a35060019392505050565b60405160009033906001600160e01b03198335169061230a90849036906145cc565b60405180910390a2600260065414156123355760405162461bcd60e51b815260040161073f906149be565b60026006556008546001600160a01b03166123625760405162461bcd60e51b815260040161073f90614916565b600954600160201b900460ff16158061238a57503360009081526017602052604090205460ff165b6123a65760405162461bcd60e51b815260040161073f9061482a565b600854604051636a6dc6e760e01b815273__$fefb028005f68e7633c8c9bb2db5a02da7$__91636a6dc6e7916123f29130916001600160a01b039091169089908990899060040161464f565b60206040518083038186803b15801561240a57600080fd5b505af415801561241e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244291906143d3565b9050836001600160a01b0316336001600160a01b03167fea39e3b35c5cd8937999ed5f7fbab30acd562a931fc4a887fed2a47c3074aa72836040516124879190614d34565b60405180910390a361249883611851565b6124a2338461096e565b6108ad84338361371b565b6001600160a01b031660009081526001602052604090205490565b73__$4c39dc22c986e51e284e93a9c02f15a804$__90565b600954600090600160201b900460ff161561251757506001600160a01b03811660009081526017602052604090205460ff1661144b565b506001600160a01b038116151561144b565b6005546001600160a01b031633146125535760405162461bcd60e51b815260040161073f9061475b565b6001600160a01b0381166125795760405162461bcd60e51b815260040161073f90614885565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000600260065414156125fa5760405162461bcd60e51b815260040161073f90614a0a565b6008546001600160a01b03166126225760405162461bcd60e51b815260040161073f90614916565b600854604051634a46c67360e11b81526001600160a01b039091169063948d8ce6906126529085906004016144d7565b60206040518083038186803b15801561266a57600080fd5b505afa15801561267e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144891906143d3565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156109455780601f1061091a57610100808354040283529160200191610945565b60095460ff80821691610100810482169162010000820481169163010000008104821691600160201b82048116916501000000000090041686565b73__$9cae36e6b1b60ebd723e3da15a5c2e74b0$__90565b73__$fefb028005f68e7633c8c9bb2db5a02da7$__90565b6040518060400160405280601381526020017210985b185b98d95c8814db585c9d08141bdbdb606a1b81525081565b6101f481565b60006001600160a01b0383166127cb5760405162461bcd60e51b815260040161073f90614885565b6127d633848461363d565b50600192915050565b336001600160a01b03166000356001600160e01b0319166001600160e01b0319166000366040516128119291906145cc565b60405180910390a26002600654141561283c5760405162461bcd60e51b815260040161073f906149be565b60026006556008546001600160a01b03166128695760405162461bcd60e51b815260040161073f90614916565b6008546040805163fde924f760e01b815290516000926001600160a01b03169163fde924f7916004808301926020929190829003018186803b1580156128ae57600080fd5b505afa1580156128c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e69190614364565b6008546040516324dacaa960e11b81529192506001600160a01b0316906349b595529061291890600090600401614591565b600060405180830381600087803b15801561293257600080fd5b505af1158015612946573d6000803e3d6000fd5b505060085460405163151c70f960e21b81526000935083925060609173__$fefb028005f68e7633c8c9bb2db5a02da7$__91635471c3e49161299c9130916001600160a01b0316908c908c908c90600401614683565b60006040518083038186803b1580156129b457600080fd5b505af41580156129c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f09190810190614458565b925092509250612a003388611e9b565b600754612a16906001600160a01b03168461096e565b612a1f8261107f565b6008546040805163cc77828d60e01b815290516060926001600160a01b03169163cc77828d916004808301926000929190829003018186803b158015612a6457600080fd5b505afa158015612a78573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612aa09190810190614225565b905060005b8151811015612b3e576000828281518110612abc57fe5b602002602001015190506000848381518110612ad457fe5b60200260200101519050816001600160a01b0316336001600160a01b03167fc62fc35ac75e3bff532648e2859a3e1694002cfa357614ae8e034df7f83db5e983604051612b219190614d34565b60405180910390a3612b34823383613210565b5050600101612aa5565b50506008546040516324dacaa960e11b81526001600160a01b0390911693506349b595529250611e3f91508490600401614591565b6008546001600160a01b031681565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612bb49291906145cc565b60405180910390a260026006541415612bdf5760405162461bcd60e51b815260040161073f906149be565b60026006556005546001600160a01b03163314612c0e5760405162461bcd60e51b815260040161073f9061475b565b6008546001600160a01b0316612c365760405162461bcd60e51b815260040161073f90614916565b6009546301000000900460ff16612c5f5760405162461bcd60e51b815260040161073f90614787565b600854601654604051633be961dd60e21b815273__$fefb028005f68e7633c8c9bb2db5a02da7$__9263efa5877492612caa9230926001600160a01b03169190600e906004016146df565b60006040518083038186803b158015612cc257600080fd5b505af4158015612cd6573d6000803e3d6000fd5b505060016006555050565b6005546001600160a01b03163314612d0b5760405162461bcd60e51b815260040161073f9061475b565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612d3d9291906145cc565b60405180910390a260026006541415612d685760405162461bcd60e51b815260040161073f906149be565b600260065580821015612d8d5760405162461bcd60e51b815260040161073f906147be565b60158290556016819055612da08361396f565b5050600160065550565b600e54600f546010546011546001600160a01b03841693600160a01b900460ff1692919085565b6005546001600160a01b03163314612dfb5760405162461bcd60e51b815260040161073f9061475b565b60026006541415612e1e5760405162461bcd60e51b815260040161073f906149be565b60026006556040513390600080356001600160e01b03191691612e43919036906145cc565b60405180910390a2600954600160201b900460ff16612e745760405162461bcd60e51b815260040161073f906148af565b6001600160a01b038116612e9a5760405162461bcd60e51b815260040161073f90614a34565b6001600160a01b03166000908152601760205260409020805460ff19166001908117909155600655565b3360009081526002602090815260408083206001600160a01b0386168452909152812054612ef29083613e1b565b3360008181526002602090815260408083206001600160a01b03891680855292529182902084905590519092600080516020614dcf833981519152916109c39190614d34565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b336001600160a01b03166000356001600160e01b0319166001600160e01b031916600036604051612f959291906145cc565b60405180910390a26008546001600160a01b03166112455760405162461bcd60e51b815260040161073f90614916565b6005546001600160a01b03163314612fef5760405162461bcd60e51b815260040161073f9061475b565b600260065414156130125760405162461bcd60e51b815260040161073f906149be565b60026006556040513390600080356001600160e01b03191691613037919036906145cc565b60405180910390a2600954600160201b900460ff166130685760405162461bcd60e51b815260040161073f906148af565b6001600160a01b03811660009081526017602052604090205460ff166130a05760405162461bcd60e51b815260040161073f906148e6565b6001600160a01b0381166130c65760405162461bcd60e51b815260040161073f90614a34565b6001600160a01b03166000908152601760205260409020805460ff191690556001600655565b60165481565b60155481565b62015f9081565b6000600260065414156131245760405162461bcd60e51b815260040161073f90614a0a565b6008546001600160a01b031661314c5760405162461bcd60e51b815260040161073f90614916565b600860009054906101000a90046001600160a01b03166001600160a01b031663fde924f76040518163ffffffff1660e01b815260040160206040518083038186803b15801561319a57600080fd5b505afa1580156131ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d29190614364565b905090565b60008060006131e68585613e40565b9150915080156132085760405162461bcd60e51b815260040161073f90614bfc565b509392505050565b6008546001600160a01b03166132385760405162461bcd60e51b815260040161073f90614916565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f906132699087906004016144d7565b60206040518083038186803b15801561328157600080fd5b505afa158015613295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b991906143d3565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906132ef9088906004016144d7565b60206040518083038186803b15801561330757600080fd5b505afa15801561331b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333f91906143d3565b6008549091506001600160a01b0316633fdddaa28661335e85876131d7565b846040518463ffffffff1660e01b815260040161337d93929190614570565b600060405180830381600087803b15801561339757600080fd5b505af11580156133ab573d6000803e3d6000fd5b505060405163a9059cbb60e01b8152600092506001600160a01b038816915063a9059cbb906133e09088908890600401614557565b602060405180830381600087803b1580156133fa57600080fd5b505af115801561340e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134329190614364565b9050806134515760405162461bcd60e51b815260040161073f90614ba4565b505050505050565b61097830838361363d565b600082613473575060006109cf565b8282028284828161348057fe5b041461349e5760405162461bcd60e51b815260040161073f90614a61565b6706f05b59d3b200008101818110156134c95760405162461bcd60e51b815260040161073f90614a61565b6000670de0b6b3a7640000825b049695505050505050565b6000816135005760405162461bcd60e51b815260040161073f90614aba565b8261350d575060006109cf565b670de0b6b3a76400008381029084828161352357fe5b04146135415760405162461bcd60e51b815260040161073f90614994565b600283048101818110156135675760405162461bcd60e51b815260040161073f90614994565b60008482816134d657fe5b600060038211156135b5575080600160028204015b818110156135af5780915060028182858161359e57fe5b0401816135a757fe5b049050613587565b5061144b565b811561144b57506001919050565b306000908152600160205260409020546135dd90826131d7565b30600090815260016020526040812091909155546135fb90826131d7565b600090815560405130907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613632908590614d34565b60405180910390a350565b6001600160a01b03831660009081526001602052604090205461366090826131d7565b6001600160a01b03808516600090815260016020526040808220939093559084168152205461368f9082613e1b565b6001600160a01b0380841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906136e1908590614d34565b60405180910390a3505050565b6136f781613e65565b60185460005411156110885760405162461bcd60e51b815260040161073f90614b0e565b6008546001600160a01b03166137435760405162461bcd60e51b815260040161073f90614916565b60085460405163f8b2cb4f60e01b81526000916001600160a01b03169063f8b2cb4f906137749087906004016144d7565b60206040518083038186803b15801561378c57600080fd5b505afa1580156137a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c491906143d3565b600854604051634a46c67360e11b81529192506000916001600160a01b039091169063948d8ce6906137fa9088906004016144d7565b60206040518083038186803b15801561381257600080fd5b505afa158015613826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061384a91906143d3565b90506000856001600160a01b03166323b872dd8630876040518463ffffffff1660e01b815260040161387e939291906144eb565b602060405180830381600087803b15801561389857600080fd5b505af11580156138ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d09190614364565b9050806138ef5760405162461bcd60e51b815260040161073f90614ba4565b6008546001600160a01b0316633fdddaa28761390b8688613e1b565b856040518463ffffffff1660e01b815260040161392a93929190614570565b600060405180830381600087803b15801561394457600080fd5b505af1158015613958573d6000803e3d6000fd5b50505050505050505050565b61097882308361363d565b6008546001600160a01b0316156139985760405162461bcd60e51b815260040161073f9061493f565b68056bc75e2d631000008110156139c15760405162461bcd60e51b815260040161073f90614967565b6b033b2e3c9fd0803ce80000008111156139ed5760405162461bcd60e51b815260040161073f90614858565b60095465010000000000900460ff1615613a075760188190555b613a1081611851565b613a1a338261096e565b600760009054906101000a90046001600160a01b03166001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015613a6a57600080fd5b505af1158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa29190614380565b600880546001600160a01b0319166001600160a01b0392831617908190556040805163632c068960e11b81529051919092169163c6580d12916004808301926020929190829003018186803b158015613afa57600080fd5b505afa158015613b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3291906143d3565b15613b4f5760405162461bcd60e51b815260040161073f90614ae0565b60005b601354811015613d1157600060138281548110613b6b57fe5b6000918252602082200154601480546001600160a01b0390921693509084908110613b9257fe5b906000526020600020015490506000600a6002018481548110613bb157fe5b60009182526020822001546040516323b872dd60e01b81529092506001600160a01b038516906323b872dd90613bef903390309088906004016144eb565b602060405180830381600087803b158015613c0957600080fd5b505af1158015613c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c419190614364565b905080613c605760405162461bcd60e51b815260040161073f90614ba4565b600854613c7c906001600160a01b038681169116600019613ed5565b905080613c9b5760405162461bcd60e51b815260040161073f90614ba4565b600854604051631c9c3ca760e31b81526001600160a01b039091169063e4e1e53890613ccf90879087908790600401614570565b600060405180830381600087803b158015613ce957600080fd5b505af1158015613cfd573d6000803e3d6000fd5b505060019096019550613b52945050505050565b505b60135415613d4d576013805480613d2657fe5b600082815260209020810160001990810180546001600160a01b0319169055019055613d13565b6008546012546040516334e1990760e01b81526001600160a01b03909216916334e1990791613d7e91600401614d34565b600060405180830381600087803b158015613d9857600080fd5b505af1158015613dac573d6000803e3d6000fd5b50506008546040516324dacaa960e11b81526001600160a01b0390911692506349b595529150613de190600190600401614591565b600060405180830381600087803b158015613dfb57600080fd5b505af1158015613e0f573d6000803e3d6000fd5b50506000601255505050565b6000828201838110156111b25760405162461bcd60e51b815260040161073f90614c27565b600080838311613e565750508082036000613e5e565b505081810360015b9250929050565b30600090815260016020526040902054613e7f9082613e1b565b3060009081526001602052604081209190915554613e9d9082613e1b565b60009081556040513091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90613632908590614d34565b600080846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613f0692919061450f565b60206040518083038186803b158015613f1e57600080fd5b505afa158015613f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5691906143d3565b905082811415613f6a5760019150506111b2565b8015613ff95760405163095ea7b360e01b81526001600160a01b0386169063095ea7b390613f9f908790600090600401614557565b602060405180830381600087803b158015613fb957600080fd5b505af1158015613fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff19190614364565b9150506111b2565b60405163095ea7b360e01b81526001600160a01b0386169063095ea7b3906140279087908790600401614557565b602060405180830381600087803b15801561404157600080fd5b505af1158015614055573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140799190614364565b95945050505050565b60008083601f840112614093578081fd5b50813567ffffffffffffffff8111156140aa578182fd5b6020830191508360208083028501011115613e5e57600080fd5b600082601f8301126140d4578081fd5b81516140e76140e282614d80565b614d59565b81815291506020808301908481018184028601820187101561410857600080fd5b60005b848110156141275781518452928201929082019060010161410b565b505050505092915050565b600060208284031215614143578081fd5b81356111b281614dab565b60008060408385031215614160578081fd5b823561416b81614dab565b9150602083013561417b81614dab565b809150509250929050565b60008060006060848603121561419a578081fd5b83356141a581614dab565b925060208401356141b581614dab565b929592945050506040919091013590565b600080604083850312156141d8578182fd5b82356141e381614dab565b946020939093013593505050565b600080600060608486031215614205578283fd5b833561421081614dab565b95602085013595506040909401359392505050565b60006020808385031215614237578182fd5b825167ffffffffffffffff81111561424d578283fd5b8301601f8101851361425d578283fd5b805161426b6140e282614d80565b8181528381019083850185840285018601891015614287578687fd5b8694505b838510156142b257805161429e81614dab565b83526001949094019391850191850161428b565b50979650505050505050565b600080600080606085870312156142d3578081fd5b843567ffffffffffffffff8111156142e9578182fd5b6142f587828801614082565b90989097506020870135966040013595509350505050565b60006020828403121561431e578081fd5b815167ffffffffffffffff811115614334578182fd5b614340848285016140c4565b949350505050565b600060208284031215614359578081fd5b81356111b281614dc0565b600060208284031215614375578081fd5b81516111b281614dc0565b600060208284031215614391578081fd5b81516111b281614dab565b6000602082840312156143ad578081fd5b8135600681106111b2578182fd5b6000602082840312156143cc578081fd5b5035919050565b6000602082840312156143e4578081fd5b5051919050565b6000806000604084860312156143ff578081fd5b83359250602084013567ffffffffffffffff81111561441c578182fd5b61442886828701614082565b9497909650939450505050565b60008060408385031215614447578182fd5b505080516020909101519092909150565b60008060006060848603121561446c578081fd5b8351925060208401519150604084015167ffffffffffffffff811115614490578182fd5b61449c868287016140c4565b9150509250925092565b6000806000606084860312156144ba578081fd5b505081359360208301359350604090920135919050565b15159052565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03959095168552921515602085015260408401919091526060830152608082015260a00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b9515158652931515602086015291151560408501521515606084015215156080830152151560a082015260c00190565b60006020825282602083015282846040840137818301604090810191909152601f909201601f19160101919050565b6001600160a01b03958616815293909416602084015260408301919091526060820152608081019190915260a00190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b03958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b6001600160a01b0386811682528516602082015260408101849052608060608201819052810182905260006001600160fb1b038311156146c1578081fd5b60208302808560a08501379190910160a00190815295945050505050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260800190565b6000602080835283518082850152825b8181101561473457858101830151858201604001528201614718565b818111156147455783604083870101525b50601f01601f1916929092016040019392505050565b60208082526012908201527122a9292fa727aa2fa1a7a72a2927a62622a960711b604082015260600190565b6020808252601c908201527f4552525f43414e4e4f545f4144445f52454d4f56455f544f4b454e5300000000604082015260600190565b6020808252818101527f4552525f494e434f4e53495354454e545f544f4b454e5f54494d455f4c4f434b604082015260600190565b60208082526019908201527f4552525f554e535550504f525445445f4f5045524154494f4e00000000000000604082015260600190565b60208082526014908201527311549497d393d517d3d397d5d2125511531254d560621b604082015260600190565b60208082526013908201527208aa4a4be929c92a8bea6aaa0a098b2be9a82b606b1b604082015260600190565b60208082526010908201526f4552525f5a45524f5f4144445245535360801b604082015260600190565b60208082526018908201527f4552525f43414e4e4f545f57484954454c4953545f4c50530000000000000000604082015260600190565b60208082526016908201527511549497d31417d393d517d5d2125511531254d5115160521b604082015260600190565b6020808252600f908201526e11549497d393d517d0d49150551151608a1b604082015260600190565b6020808252600e908201526d11549497d254d7d0d4915055115160921b604082015260600190565b60208082526013908201527222a9292fa4a724aa2fa9aaa828262cafa6a4a760691b604082015260600190565b60208082526010908201526f11549497d1125597d25395115493905360821b604082015260600190565b6020808252600b908201526a4552525f5245454e54525960a81b604082015260600190565b6020808252600d908201526c11549497d393d517d093d55391609a1b604082015260600190565b60208082526010908201526f4552525f5245454e5452595f5649455760801b604082015260600190565b6020808252601390820152724552525f494e56414c49445f4144445245535360681b604082015260600190565b60208082526010908201526f4552525f4d554c5f4f564552464c4f5760801b604082015260600190565b60208082526015908201527404552525f43414e4e4f545f4348414e47455f43415605c1b604082015260600190565b6020808252600c908201526b4552525f4449565f5a45524f60a01b604082015260600190565b6020808252601490820152734552525f4e4f4e5a45524f5f455849545f46454560601b604082015260600190565b60208082526015908201527411549497d0d05417d31253525517d4915050d21151605a1b604082015260600190565b60208082526016908201527522a9292fa821aa27a5a2a72fa120a22fa1a0a62622a960511b604082015260600190565b6020808252601b908201527f4552525f52454d4f56455f574954485f4144445f50454e44494e470000000000604082015260600190565b6020808252600f908201526e4552525f45524332305f46414c534560881b604082015260600190565b60208082526015908201527404552525f4e4f545f5041555341424c455f5357415605c1b604082015260600190565b6020808252601190820152704552525f5355425f554e444552464c4f5760781b604082015260600190565b60208082526010908201526f4552525f4144445f4f564552464c4f5760801b604082015260600190565b6020808252601d908201527f4552525f4e4f545f434f4e464947555241424c455f535741505f464545000000604082015260600190565b6020808252601c908201527f4552525f4e4f5f5550444154455f445552494e475f4752414455414c00000000604082015260600190565b600060e082019050835460ff80821615158452808260081c1615156020850152808260101c1615156040850152808260181c1615156060850152614d0b60808501828460201c166144d1565b614d1d60a08501828460281c166144d1565b5050614d2883614da0565b60c08301529392505050565b90815260200190565b918252602082015260400190565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715614d7857600080fd5b604052919050565b600067ffffffffffffffff821115614d96578081fd5b5060209081020190565b806006811061144b57fe5b6001600160a01b038116811461108857600080fd5b801515811461108857600080fdfe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a264697066735822122057ac1384ce722915e5e03bbc934b778b255e039b3840823327b308d856ef601f64736f6c634300060c0033",
  "libraries": {
    "BalancerSafeMath": "0x52F433faD5E4E7F9a7d51743974262EaDa27d6F4",
    "RightsManager": "0xcc24Ff776A41bf462909c4c4Af3E51c1ED7E5176",
    "SmartPoolManager": "0x446007a78FD82Ad71e55cCB5b02E0DE1C40Dfbf0"
  },
  "devdoc": {
    "author": "Ampleforth engineering team & Balancer Labs Reference: https://github.com/balancer-labs/configurable-rights-pool/blob/master/contracts/templates/ElasticSupplyPool.sol",
    "details": "Extension of Balancer labs' configurable rights pool (smart-pool).        Amples are a dynamic supply tokens, supply and individual balances change daily by a Rebase operation.        In constant-function markets, Ampleforth's supply adjustments result in Impermanent Loss (IL)        to liquidity providers. The AmplElasticCRP is an extension of Balancer Lab's        ConfigurableRightsPool which mitigates IL induced by supply adjustments.        It accomplishes this by doing the following mechanism:        The `resyncWeight` method will be invoked atomically after rebase through Ampleforth's orchestrator.        When rebase changes supply, ampl weight is updated to the geometric mean of        the current ampl weight and the target. Every other token's weight is updated        proportionally such that relative ratios are same.        Weights: {w_ampl, w_t1 ... w_tn}        Rebase_change: x% (Ample's supply changes by x%, can be positive or negative)        Ample target weight: w_ampl_target = (100+x)/100 * w_ampl        w_ampl_new = sqrt(w_ampl * w_ampl_target)  // geometric mean        for i in tn:           w_ti_new = (w_ampl_new * w_ti) / w_ampl_target",
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "owner": "- owner of the tokens",
          "spender": "- entity allowed to spend the tokens"
        },
        "returns": {
          "_0": "uint - remaining amount spender is allowed to transfer"
        }
      },
      "approve(address,uint256)": {
        "details": "emits an Approval event",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "- address we're checking the balance of"
        },
        "returns": {
          "_0": "uint - token balance in the account"
        }
      },
      "canProvideLiquidity(address)": {
        "details": "If the whitelist feature is not enabled, anyone can provide liquidity (assuming finalized)",
        "returns": {
          "_0": "boolean value indicating whether the address can join a pool"
        }
      },
      "commitAddToken(address,uint256,uint256)": {
        "details": "The purpose of this two-stage commit is to give warning of a potentially dangerous      operation. A malicious pool operator could add a large amount of a low-value token,      then drain the pool through price manipulation. Of course, there are many      legitimate purposes, such as adding additional collateral tokens.",
        "params": {
          "balance": "- how much to be added",
          "denormalizedWeight": "- the desired token weight",
          "token": "- the token to be added"
        }
      },
      "createPool(uint256,uint256,uint256)": {
        "details": "Initialize the swap fee to the value provided in the CRP constructor      Can be changed if the canChangeSwapFee permission is enabled      Time parameters will be fixed at these values      If this contract doesn't have canChangeWeights permission - or you want to use the default      values, the block time arguments are not needed, and you can just call the single-argument      createPool()",
        "params": {
          "addTokenTimeLockInBlocksParam": "- Enforce a mandatory wait time between updates                                   This is also the wait time between committing and applying a new token",
          "initialSupply": "- Starting token balance",
          "minimumWeightChangeBlockPeriodParam": "- Enforce a minimum time between the start and end blocks"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseApproval(address,uint256)": {
        "details": "emits an Approval eventIf you try to decrease it below the current limit, it's just set to zero (not an error)",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "exitPool(uint256,uint256[])": {
        "details": "Emits a LogExit event for each token      bPool is a contract interface; function calls on it are external",
        "params": {
          "minAmountsOut": "- minimum amount of asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem"
        }
      },
      "exitswapExternAmountOut(address,uint256,uint256)": {
        "details": "Emits a LogExit event for the token",
        "params": {
          "maxPoolAmountIn": "- maximum pool tokens to be redeemed",
          "tokenAmountOut": "- amount of underlying asset tokens to receive",
          "tokenOut": "- which token the caller wants to receive"
        },
        "returns": {
          "poolAmountIn": "- amount of pool tokens redeemed"
        }
      },
      "exitswapPoolAmountIn(address,uint256,uint256)": {
        "details": "Emits a LogExit event for the token",
        "params": {
          "minAmountOut": "- minimum asset tokens to receive",
          "poolAmountIn": "- amount of pool tokens to redeem",
          "tokenOut": "- which token the caller wants to receive"
        },
        "returns": {
          "tokenAmountOut": "- amount of asset tokens returned"
        }
      },
      "getBalancerSafeMathVersion()": {
        "details": "Convenience function to get the address of the BalancerSafeMath library (so clients can check version)",
        "returns": {
          "_0": "address of the BalancerSafeMath library"
        }
      },
      "getController()": {
        "details": "external for gas optimization",
        "returns": {
          "_0": "address - of the owner (AKA controller)"
        }
      },
      "getDenormalizedWeight(address)": {
        "details": "viewlock to prevent calling if it's being updated",
        "returns": {
          "_0": "token weight"
        }
      },
      "getRightsManagerVersion()": {
        "details": "Convenience function to get the address of the RightsManager library (so clients can check version)",
        "returns": {
          "_0": "address of the RightsManager library"
        }
      },
      "getSmartPoolManagerVersion()": {
        "details": "Convenience function to get the address of the SmartPoolManager library (so clients can check version)",
        "returns": {
          "_0": "address of the SmartPoolManager library"
        }
      },
      "hasPermission(uint8)": {
        "details": "value of the enum is just the 0-based index in the enumeration      For instance canPauseSwapping is 0; canChangeWeights is 2",
        "returns": {
          "_0": "token boolean true if we have the given permission"
        }
      },
      "increaseApproval(address,uint256)": {
        "details": "emits an Approval event",
        "params": {
          "amount": "- number of tokens being approved",
          "spender": "- entity the owner (sender) is approving to spend his tokens"
        },
        "returns": {
          "_0": "bool - result of the approval (will always be true if it doesn't revert)"
        }
      },
      "isPublicSwap()": {
        "details": "viewLock, because setPublicSwap is lock      bPool is a contract interface; function calls on it are external",
        "returns": {
          "_0": "Current value of isPublicSwap"
        }
      },
      "joinPool(uint256,uint256[])": {
        "details": "Emits a LogJoin event (for each token)      bPool is a contract interface; function calls on it are external",
        "params": {
          "maxAmountsIn": "- Max amount of asset tokens to spend",
          "poolAmountOut": "- number of pool tokens to receive"
        }
      },
      "joinswapExternAmountIn(address,uint256,uint256)": {
        "details": "emits a LogJoin event",
        "params": {
          "minPoolAmountOut": "- minimum of pool tokens to receive",
          "tokenAmountIn": "- amount of deposit",
          "tokenIn": "- which token we're transferring in"
        },
        "returns": {
          "poolAmountOut": "- amount of pool tokens minted and transferred"
        }
      },
      "joinswapPoolAmountOut(address,uint256,uint256)": {
        "details": "emits a LogJoin event",
        "params": {
          "maxAmountIn": "- Maximum asset tokens that can be pulled to pay for the pool tokens",
          "poolAmountOut": "- amount of pool tokens to be received",
          "tokenIn": "- which token we're transferring in (system calculates amount required)"
        },
        "returns": {
          "tokenAmountIn": "- amount of asset tokens transferred in to purchase the pool tokens"
        }
      },
      "name()": {
        "details": "Returns the name of the token.      We allow the user to set this name (as well as the symbol).      Alternatives are 1) A fixed string (original design)                       2) A fixed string plus the user-defined symbol                          return string(abi.encodePacked(NAME, \"-\", _symbol));"
      },
      "pokeWeights()": {
        "details": "Still works if we poke after the end of the period; also works if the weights don't change      Resets if we are poking beyond the end, so that we can do it again"
      },
      "removeToken(address)": {
        "details": "bPool is a contract interface; function calls on it are external",
        "params": {
          "token": "- token to remove"
        }
      },
      "removeWhitelistedLiquidityProvider(address)": {
        "params": {
          "provider": "- address of the liquidity provider"
        }
      },
      "setCap(uint256)": {
        "details": "_bspCap defaults in the constructor to unlimited      Can set to 0 (or anywhere below the current supply), to halt new investment      Prevent setting it before creating a pool, since createPool sets to intialSupply      (it does this to avoid an unlimited cap window between construction and createPool)      Therefore setting it before then has no effect, so should not be allowed",
        "params": {
          "newCap": "- new value of the cap"
        }
      },
      "setController(address)": {
        "details": "external for gas optimization",
        "params": {
          "newOwner": "- address of new owner"
        }
      },
      "setPublicSwap(bool)": {
        "details": "If this smart pool has canPauseSwapping enabled, we can turn publicSwap off if it's already on      Note that if they turn swapping off - but then finalize the pool - finalizing will turn the      swapping back on. They're not supposed to finalize the underlying pool... would defeat the      smart pool functions. (Only the owner can finalize the pool - which is this contract -      so there is no risk from outside.)      bPool is a contract interface; function calls on it are external",
        "params": {
          "publicSwap": "new value of the swap"
        }
      },
      "setSwapFee(uint256)": {
        "details": "Keep the local version and core in sync (see below)      bPool is a contract interface; function calls on it are external",
        "params": {
          "swapFee": "in Wei"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "declared external for gas optimization",
        "returns": {
          "_0": "uint - total number of tokens in existence"
        }
      },
      "transfer(address,uint256)": {
        "details": "_move emits a Transfer event if successful",
        "params": {
          "amount": "- number of tokens being transferred",
          "recipient": "- entity receiving the tokens"
        },
        "returns": {
          "_0": "bool - result of the transfer (will always be true if it doesn't revert)"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "_move emits a Transfer event if successful; may also emit an Approval event",
        "params": {
          "amount": "- number of tokens being transferred",
          "recipient": "- recipient of the tokens",
          "sender": "- entity sending the tokens (must be caller or allowed to spend on behalf of caller)"
        },
        "returns": {
          "_0": "bool - result of the transfer (will always be true if it doesn't revert)"
        }
      },
      "updateWeight(address,uint256)": {
        "details": "Notice Balance is not an input (like with rebind on BPool) since we will require prices not to change      This is achieved by forcing balances to change proportionally to weights, so that prices don't change      If prices could be changed, this would allow the controller to drain the pool by arbing price changes",
        "params": {
          "newWeight": "- new weight of the token",
          "token": "- token to be reweighted"
        }
      },
      "updateWeightsGradually(uint256[],uint256,uint256)": {
        "details": "Must call pokeWeights at least once past the end for it to do the final update      and enable calling this again.      It is possible to call updateWeightsGradually during an update in some use cases      For instance, setting newWeights to currentWeights to stop the update where it is",
        "params": {
          "endBlock": "- when weights will be at their final values",
          "newWeights": "- final weights we want to get to. Note that the ORDER (and number) of                     tokens can change if you have added or removed tokens from the pool                     It ensures the counts are correct, but can't help you with the order!                     You can get the underlying BPool (it's public), and call                      getCurrentTokens() to see the current ordering, if you're not sure",
          "startBlock": "- when weights should start to change"
        }
      },
      "whitelistLiquidityProvider(address)": {
        "params": {
          "provider": "- address of the liquidity provider"
        }
      }
    },
    "title": "Ampl Elastic Configurable Rights Pool.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowance(address,address)": {
        "notice": "Getter for allowance: amount spender will be allowed to spend on behalf of owner"
      },
      "applyAddToken()": {
        "notice": "Add the token previously committed (in commitAddToken) to the pool"
      },
      "approve(address,uint256)": {
        "notice": "Approve owner (sender) to spend a certain amount"
      },
      "balanceOf(address)": {
        "notice": "Getter for current account balance"
      },
      "canProvideLiquidity(address)": {
        "notice": "Check if an address is a liquidity provider"
      },
      "commitAddToken(address,uint256,uint256)": {
        "notice": "Schedule (commit) a token to be added; must call applyAddToken after a fixed         number of blocks to actually add the token"
      },
      "createPool(uint256,uint256,uint256)": {
        "notice": "Create a new Smart Pool - and set the block period time parameters"
      },
      "decreaseApproval(address,uint256)": {
        "notice": "Decrease the amount the spender is allowed to spend on behalf of the owner (sender)"
      },
      "exitPool(uint256,uint256[])": {
        "notice": "Exit a pool - redeem pool tokens for underlying assets"
      },
      "exitswapExternAmountOut(address,uint256,uint256)": {
        "notice": "Exit a pool - redeem pool tokens for a specific amount of underlying assets         Asset must be present in the pool"
      },
      "exitswapPoolAmountIn(address,uint256,uint256)": {
        "notice": "Exit a pool - redeem a specific number of pool tokens for an underlying asset         Asset must be present in the pool, and will incur an EXIT_FEE (if set to non-zero)"
      },
      "getBalancerSafeMathVersion()": {
        "notice": "Getter for the BalancerSafeMath contract"
      },
      "getController()": {
        "notice": "Returns the address of the current owner"
      },
      "getDenormalizedWeight(address)": {
        "notice": "Get the denormalized weight of a token"
      },
      "getRightsManagerVersion()": {
        "notice": "Getter for the RightsManager contract"
      },
      "getSmartPoolManagerVersion()": {
        "notice": "Getter for the SmartPoolManager contract"
      },
      "hasPermission(uint8)": {
        "notice": "Getter for specific permissions"
      },
      "increaseApproval(address,uint256)": {
        "notice": "Increase the amount the spender is allowed to spend on behalf of the owner (sender)"
      },
      "isPublicSwap()": {
        "notice": "Getter for the publicSwap field on the underlying pool"
      },
      "joinPool(uint256,uint256[])": {
        "notice": "Join a pool"
      },
      "joinswapExternAmountIn(address,uint256,uint256)": {
        "notice": "Join by swapping a fixed amount of an external token in (must be present in the pool)         System calculates the pool token amount"
      },
      "joinswapPoolAmountOut(address,uint256,uint256)": {
        "notice": "Join by swapping an external token in (must be present in the pool)         To receive an exact amount of pool tokens out. System calculates the deposit amount"
      },
      "pokeWeights()": {
        "notice": "External function called to make the contract update weights according to plan"
      },
      "removeToken(address)": {
        "notice": "Remove a token from the pool"
      },
      "removeWhitelistedLiquidityProvider(address)": {
        "notice": "Remove from the whitelist of liquidity providers (if enabled)"
      },
      "setCap(uint256)": {
        "notice": "Set the cap (max # of pool tokens)"
      },
      "setController(address)": {
        "notice": "Transfers ownership of the contract to a new account (`newOwner`).         Can only be called by the current owner"
      },
      "setPublicSwap(bool)": {
        "notice": "Set the public swap flag on the underlying pool"
      },
      "setSwapFee(uint256)": {
        "notice": "Set the swap fee on the underlying pool"
      },
      "totalSupply()": {
        "notice": "Getter for the total supply"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer the given amount from sender (caller) to recipient"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer the given amount from sender to recipient"
      },
      "updateWeight(address,uint256)": {
        "notice": "Update the weight of an existing token"
      },
      "updateWeightsGradually(uint256[],uint256,uint256)": {
        "notice": "Update weights in a predetermined way, between startBlock and endBlock,         through external calls to pokeWeights"
      },
      "whitelistLiquidityProvider(address)": {
        "notice": "Add to the whitelist of liquidity providers (if enabled)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2041,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "varTotalSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2045,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_balance",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2051,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_allowance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2053,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2055,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2588,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2666,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 41,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "bFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IBFactory)2023"
      },
      {
        "astId": 43,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "bPool",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IBPool)1995"
      },
      {
        "astId": 45,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "rights",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(Rights)3287_storage"
      },
      {
        "astId": 47,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "gradualUpdate",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(GradualUpdateParams)3567_storage"
      },
      {
        "astId": 49,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "newToken",
        "offset": 0,
        "slot": "14",
        "type": "t_struct(NewTokenParams)3556_storage"
      },
      {
        "astId": 51,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_initialSwapFee",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 54,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_initialTokens",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 57,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_initialBalances",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 59,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "minimumWeightChangeBlockPeriod",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 61,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "addTokenTimeLockInBlocks",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 65,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "_liquidityProviderWhitelist",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 67,
        "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
        "label": "bspCap",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBFactory)2023": {
        "encoding": "inplace",
        "label": "contract IBFactory",
        "numberOfBytes": "20"
      },
      "t_contract(IBPool)1995": {
        "encoding": "inplace",
        "label": "contract IBPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GradualUpdateParams)3567_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.GradualUpdateParams",
        "members": [
          {
            "astId": 3558,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "startBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3560,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "endBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3563,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "startWeights",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3566,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "endWeights",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(NewTokenParams)3556_storage": {
        "encoding": "inplace",
        "label": "struct SmartPoolManager.NewTokenParams",
        "members": [
          {
            "astId": 3547,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3549,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "isCommitted",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3551,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "commitBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3553,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "denorm",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3555,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "balance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Rights)3287_storage": {
        "encoding": "inplace",
        "label": "struct RightsManager.Rights",
        "members": [
          {
            "astId": 3276,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "canPauseSwapping",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3278,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "canChangeSwapFee",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3280,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "canChangeWeights",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3282,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "canAddRemoveTokens",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3284,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "canWhitelistLPs",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3286,
            "contract": "contracts/liquidity/ElasticSupplyPool.sol:ElasticSupplyPool",
            "label": "canChangeCap",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}