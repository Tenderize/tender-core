{
  "address": "0x7E5365fED4d091db2ba784179754437EfD40A4Cc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "controller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "steak",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "esp",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bpool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderFarm",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct Registry.TenderizerConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "TenderizerCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "controller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "steak",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderizer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "esp",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "bpool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tenderFarm",
              "type": "address"
            }
          ],
          "internalType": "struct Registry.TenderizerConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "addTenderizer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfef7a5f0a03c8a8fec07ff368b34afeea38cc3c711298adef3ef9230fc0aa1b5",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x7E5365fED4d091db2ba784179754437EfD40A4Cc",
    "transactionIndex": 9,
    "gasUsed": "561187",
    "logsBloom": "0x
    "blockHash": "0x86ba3db37e9717a118b8f4068f06650ea95075200aaefc24fb9a501561dd187d",
    "transactionHash": "0xfef7a5f0a03c8a8fec07ff368b34afeea38cc3c711298adef3ef9230fc0aa1b5",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 9146814,
        "transactionHash": "0xfef7a5f0a03c8a8fec07ff368b34afeea38cc3c711298adef3ef9230fc0aa1b5",
        "address": "0x7E5365fED4d091db2ba784179754437EfD40A4Cc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e426ad6ddf3905de9d798f49cb19d6e9a6a3335f"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x86ba3db37e9717a118b8f4068f06650ea95075200aaefc24fb9a501561dd187d"
      }
    ],
    "blockNumber": 9146814,
    "cumulativeGasUsed": "3549221",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b7051145c1b6661ee356a26cc998fc4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"esp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bpool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderFarm\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct Registry.TenderizerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"TenderizerCreated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"esp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bpool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tenderFarm\",\"type\":\"address\"}],\"internalType\":\"struct Registry.TenderizerConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"addTenderizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Registry is Ownable {\\n    struct TenderizerConfig {\\n        string name;\\n        address controller;\\n        address steak;\\n        address tenderizer;\\n        address tenderToken;\\n        address esp;\\n        address bpool;\\n        address tenderFarm;\\n    }\\n\\n    event TenderizerCreated(TenderizerConfig config);\\n\\n    function addTenderizer(TenderizerConfig calldata config) public onlyOwner {\\n        emit TenderizerCreated(config);\\n    }\\n}\\n\",\"keccak256\":\"0x3921345ca169d8becd7d6d3228d77bdfbf0e0a6e77146ed4370582285826ef1e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060006100216100c460201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506100cc565b600033905090565b6108bd806100db6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806340595c7514610051578063715018a61461006d5780638da5cb5b14610077578063f2fde38b14610095575b600080fd5b61006b600480360381019061006691906104d5565b6100b1565b005b610075610167565b005b61007f6102a1565b60405161008c9190610699565b60405180910390f35b6100af60048036038101906100aa91906104ac565b6102ca565b005b6100b9610473565b73ffffffffffffffffffffffffffffffffffffffff166100d76102a1565b73ffffffffffffffffffffffffffffffffffffffff161461012d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610124906106d4565b60405180910390fd5b7fcc44d2be73a68fc39a2176fc2e9920af818ce49eb0b44f1d4db2ab8e70cc33e08160405161015c91906106f4565b60405180910390a150565b61016f610473565b73ffffffffffffffffffffffffffffffffffffffff1661018d6102a1565b73ffffffffffffffffffffffffffffffffffffffff16146101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906106d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102d2610473565b73ffffffffffffffffffffffffffffffffffffffff166102f06102a1565b73ffffffffffffffffffffffffffffffffffffffff1614610346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033d906106d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ad906106b4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b60008135905061048a81610870565b92915050565b600061010082840312156104a357600080fd5b81905092915050565b6000602082840312156104be57600080fd5b60006104cc8482850161047b565b91505092915050565b6000602082840312156104e757600080fd5b600082013567ffffffffffffffff81111561050157600080fd5b61050d84828501610490565b91505092915050565b61051f816107a6565b82525050565b61052e816107a6565b82525050565b60006105408385610716565b935061054d8385846107d8565b610556836107e7565b840190509392505050565b600061056e602683610727565b9150610579826107f8565b604082019050919050565b6000610591602083610727565b915061059c82610847565b602082019050919050565b600061010083016105bb600084018461074f565b85830360008701526105ce838284610534565b925050506105df6020840184610738565b6105ec6020860182610516565b506105fa6040840184610738565b6106076040860182610516565b506106156060840184610738565b6106226060860182610516565b506106306080840184610738565b61063d6080860182610516565b5061064b60a0840184610738565b61065860a0860182610516565b5061066660c0840184610738565b61067360c0860182610516565b5061068160e0840184610738565b61068e60e0860182610516565b508091505092915050565b60006020820190506106ae6000830184610525565b92915050565b600060208201905081810360008301526106cd81610561565b9050919050565b600060208201905081810360008301526106ed81610584565b9050919050565b6000602082019050818103600083015261070e81846105a7565b905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610747602084018461047b565b905092915050565b6000808335600160200384360303811261076857600080fd5b83810192508235915060208301925067ffffffffffffffff82111561078c57600080fd5b60018202360384131561079e57600080fd5b509250929050565b60006107b1826107b8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610879816107a6565b811461088457600080fd5b5056fea2646970667358221220cc1316fdbf3648b688c1c7494cbe12776576b689c8b546009a0db62591961abc64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806340595c7514610051578063715018a61461006d5780638da5cb5b14610077578063f2fde38b14610095575b600080fd5b61006b600480360381019061006691906104d5565b6100b1565b005b610075610167565b005b61007f6102a1565b60405161008c9190610699565b60405180910390f35b6100af60048036038101906100aa91906104ac565b6102ca565b005b6100b9610473565b73ffffffffffffffffffffffffffffffffffffffff166100d76102a1565b73ffffffffffffffffffffffffffffffffffffffff161461012d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610124906106d4565b60405180910390fd5b7fcc44d2be73a68fc39a2176fc2e9920af818ce49eb0b44f1d4db2ab8e70cc33e08160405161015c91906106f4565b60405180910390a150565b61016f610473565b73ffffffffffffffffffffffffffffffffffffffff1661018d6102a1565b73ffffffffffffffffffffffffffffffffffffffff16146101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906106d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102d2610473565b73ffffffffffffffffffffffffffffffffffffffff166102f06102a1565b73ffffffffffffffffffffffffffffffffffffffff1614610346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033d906106d4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ad906106b4565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b60008135905061048a81610870565b92915050565b600061010082840312156104a357600080fd5b81905092915050565b6000602082840312156104be57600080fd5b60006104cc8482850161047b565b91505092915050565b6000602082840312156104e757600080fd5b600082013567ffffffffffffffff81111561050157600080fd5b61050d84828501610490565b91505092915050565b61051f816107a6565b82525050565b61052e816107a6565b82525050565b60006105408385610716565b935061054d8385846107d8565b610556836107e7565b840190509392505050565b600061056e602683610727565b9150610579826107f8565b604082019050919050565b6000610591602083610727565b915061059c82610847565b602082019050919050565b600061010083016105bb600084018461074f565b85830360008701526105ce838284610534565b925050506105df6020840184610738565b6105ec6020860182610516565b506105fa6040840184610738565b6106076040860182610516565b506106156060840184610738565b6106226060860182610516565b506106306080840184610738565b61063d6080860182610516565b5061064b60a0840184610738565b61065860a0860182610516565b5061066660c0840184610738565b61067360c0860182610516565b5061068160e0840184610738565b61068e60e0860182610516565b508091505092915050565b60006020820190506106ae6000830184610525565b92915050565b600060208201905081810360008301526106cd81610561565b9050919050565b600060208201905081810360008301526106ed81610584565b9050919050565b6000602082019050818103600083015261070e81846105a7565b905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610747602084018461047b565b905092915050565b6000808335600160200384360303811261076857600080fd5b83810192508235915060208301925067ffffffffffffffff82111561078c57600080fd5b60018202360384131561079e57600080fd5b509250929050565b60006107b1826107b8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610879816107a6565b811461088457600080fd5b5056fea2646970667358221220cc1316fdbf3648b688c1c7494cbe12776576b689c8b546009a0db62591961abc64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}