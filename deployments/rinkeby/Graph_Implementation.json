{
  "address": "0xEaCB5425FE49B192c4353856484fc1888dAE9cb2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "_param",
          "type": "string"
        }
      ],
      "name": "GovernanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrincipal",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectLiquidityFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "contract IGraph",
          "name": "_graph",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "node",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingLiquidityFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "setNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        }
      ],
      "name": "setSteak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "steak",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "unstakeLocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfc05226d796f164a7f5f187c4b420be3a4d2666509face6e1ca964b7dbc3e1a",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0xEaCB5425FE49B192c4353856484fc1888dAE9cb2",
    "transactionIndex": 16,
    "gasUsed": "2540302",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc2eb4d36ee0577300af3c84a5a1010fb6223372f7a2419ee71a96459705ad382",
    "transactionHash": "0xdfc05226d796f164a7f5f187c4b420be3a4d2666509face6e1ca964b7dbc3e1a",
    "logs": [],
    "blockNumber": 9146722,
    "cumulativeGasUsed": "5331269",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b7051145c1b6661ee356a26cc998fc4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_param\",\"type\":\"string\"}],\"name\":\"GovernanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrincipal\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectLiquidityFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"contract IGraph\",\"name\":\"_graph\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingLiquidityFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"setNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"}],\"name\":\"setSteak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unstakeLocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claimRewards()\":{\"details\":\"Only callable by controller\"},\"deposit(address,uint256)\":{\"details\":\"only callable by Controllerdoesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be stakedrequires '_amount' to be approved by '_from'\",\"params\":{\"_amount\":\"amount deposited\",\"_from\":\"account that deposits\"}},\"stake(address,uint256)\":{\"details\":\"If '_account' is not specified, stake towards the default addressIf '_amount' is 0, stake the entire current token balance of the TenderizerOnly callable by controller\",\"params\":{\"_account\":\"account to stake to in the underlying protocol\",\"_amount\":\"amount to stake\"}},\"unstake(address,uint256)\":{\"details\":\"If '_account' is not specified, stake towards the default addressIf '_amount' is 0, unstake the entire amount staked towards _accountOnly callable by controller\",\"params\":{\"_account\":\"account to unstake from in the underlying protocol\",\"_amount\":\"amount to unstake\"}},\"withdraw(address,uint256)\":{\"details\":\"If '_amount' isn't specified all unstake tokens by '_account' will be withdrawnRequires '_account' to have unstaked prior to calling withdrawOnly callable by controller\",\"params\":{\"_account\":\"account requesting the withdrawam\",\"_unstakeLockID\":\"ID for the lock to request the withdraw for\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claim staking rewards for the underlying protocol\"},\"deposit(address,uint256)\":{\"notice\":\"Deposit tokens in Tenderizer\"},\"stake(address,uint256)\":{\"notice\":\"Stake '_amount' of tokens to '_account'\"},\"unstake(address,uint256)\":{\"notice\":\"Unstake '_amount' of tokens from '_account'\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraw '_amount' of tokens previously unstaked by '_account'\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tenderizer/integrations/graph/Graph.sol\":\"Graph\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n}\\n\",\"keccak256\":\"0xec8cf5bb8f12b0e01864c46add9f6ca35628ab25e9ead7ec71c35f4a6dbc485e\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITenderizer {\\n    function deposit(address _from, uint256 _amount) external;\\n\\n    function stake(address _node, uint256 _amount) external;\\n\\n    function unstake(address _account, uint256 _amount) external returns (uint256 unstakeLockID);\\n\\n    function withdraw(address _account, uint256 _unstakeLockID) external;\\n\\n    function claimRewards() external;\\n\\n    function collectFees() external returns (uint256);\\n\\n    function collectLiquidityFees() external returns (uint256);\\n\\n    function totalStakedTokens() external view returns (uint256);\\n\\n    // Governance\\n\\n    function setController(address _controller) external;\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n}\\n\",\"keccak256\":\"0x3883ea903f3f23a167b5e6d4311cc05956f48450e84defc5626a76d9f187816a\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/Tenderizer.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ITenderizer.sol\\\";\\n\\nabstract contract Tenderizer is Initializable, ITenderizer {\\n\\n    struct UnstakeLock {\\n        uint256 amount;\\n        address account;\\n    }\\n\\n    address constant ZERO_ADDRESS = address(0);\\n\\n    IERC20 public steak;\\n    address public node;\\n\\n    address public controller;\\n\\n    uint256 public protocolFee;\\n    uint256 public liquidityFee;\\n    uint256 public pendingFees; // pending protocol fees since last distribution\\n    uint256 public pendingLiquidityFees;\\n    uint256 public currentPrincipal; // Principal since last claiming earnings\\n\\n    mapping (uint256 => UnstakeLock) public unstakeLocks;\\n    uint256 lastUnstakeLockID;\\n\\n    // Events\\n    event Deposit(address indexed from, uint256 amount);\\n    event Stake(address indexed node, uint256 amount);\\n    event Unstake(address indexed from, address indexed node, uint256 amount, uint256 unstakeLockID);\\n    event Withdraw(address indexed from, uint256 amount, uint256 unstakeLockID);\\n    event RewardsClaimed(uint256 rewards, uint256 currentPrincipal, uint256 oldPrincipal);\\n    event ProtocolFeeCollected(uint256 amount);\\n    event LiquidityFeeCollected(uint256 amount);\\n    event GovernanceUpdate(string _param);\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    function _initialize(\\n        IERC20 _steak,\\n        address _node,\\n        address _controller\\n    ) internal initializer {\\n        steak = _steak;\\n        node = _node;\\n        protocolFee = 25 * 1e15; // 2.5%\\n        controller = _controller;\\n    }\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer\\n     * @param _from account that deposits\\n     * @param _amount amount deposited\\n     * @dev only callable by Controller\\n     * @dev doesn't actually stakes the tokens but aggregates the balance in the tenderizer\\n        awaiting to be staked\\n     * @dev requires '_amount' to be approved by '_from'\\n     */\\n    function deposit(address _from, uint256 _amount) external override onlyController {\\n        _deposit(_from, _amount);\\n    }\\n\\n    /**\\n     * @notice Stake '_amount' of tokens to '_account'\\n     * @param _account account to stake to in the underlying protocol\\n     * @param _amount amount to stake\\n     * @dev If '_account' is not specified, stake towards the default address\\n     * @dev If '_amount' is 0, stake the entire current token balance of the Tenderizer\\n     * @dev Only callable by controller\\n     */\\n    function stake(address _account, uint256 _amount) external override onlyController {\\n        // Execute state updates\\n        // approve pendingTokens for staking\\n        // Stake tokens\\n        _stake(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Unstake '_amount' of tokens from '_account'\\n     * @param _account account to unstake from in the underlying protocol\\n     * @param _amount amount to unstake\\n     * @dev If '_account' is not specified, stake towards the default address\\n     * @dev If '_amount' is 0, unstake the entire amount staked towards _account\\n     * @dev Only callable by controller\\n     */\\n    function unstake(address _account, uint256 _amount) \\n        external\\n        override\\n        onlyController \\n        returns (uint256 unstakeLockID) {\\n        // Execute state updates to pending withdrawals\\n        // Unstake tokens\\n        return _unstake(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw '_amount' of tokens previously unstaked by '_account'\\n      * @param _unstakeLockID ID for the lock to request the withdraw for\\n     * @param _account account requesting the withdrawam\\n     * @dev If '_amount' isn't specified all unstake tokens by '_account' will be withdrawn\\n     * @dev Requires '_account' to have unstaked prior to calling withdraw\\n     * @dev Only callable by controller\\n     */\\n    function withdraw(address _account, uint256 _unstakeLockID) \\n        external\\n        override\\n        onlyController {\\n        // Execute state updates to pending withdrawals\\n        // Transfer tokens to _account\\n        _withdraw(_account, _unstakeLockID);\\n    }\\n\\n    /**\\n     * @notice Claim staking rewards for the underlying protocol\\n     * @dev Only callable by controller\\n     */\\n    function claimRewards() external override onlyController {\\n        // Claim rewards\\n        // If received staking rewards in steak don't automatically compound, add to pendingTokens\\n        // Swap tokens with address != steak to steak\\n        // Add steak from swap to pendingTokens\\n        _claimRewards();\\n    }\\n\\n    function setController(address _controller) external override onlyController {\\n        require(_controller != address(0), \\\"ZERO_ADDRESS\\\");\\n        controller = _controller;\\n        emit GovernanceUpdate(\\\"CONTROLLER\\\");\\n    }\\n\\n    function setNode(address _node) external virtual override onlyController {\\n        require(_node != address(0), \\\"ZERO_ADDRESS\\\");\\n        node = _node;\\n        emit GovernanceUpdate(\\\"NODE\\\");\\n    }\\n\\n    function setSteak(IERC20 _steak) external virtual override onlyController {\\n        require(address(_steak) != address(0), \\\"ZERO_ADDRESS\\\");\\n        steak = _steak;\\n        emit GovernanceUpdate(\\\"STEAK\\\");\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external virtual override onlyController {\\n        protocolFee = _protocolFee;\\n        emit GovernanceUpdate(\\\"PROTOCOL_FEE\\\");\\n    }\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external virtual override onlyController {\\n        liquidityFee = _liquidityFee;\\n        emit GovernanceUpdate(\\\"LIQUIDITY_FEE\\\");\\n    }\\n\\n    function setStakingContract(address _stakingContract) external override onlyController {\\n        _setStakingContract(_stakingContract);\\n    }\\n\\n    function collectFees() external override onlyController returns (uint256) {\\n        return _collectFees();\\n    }\\n\\n    function collectLiquidityFees() external override onlyController returns (uint256) {\\n        return _collectLiquidityFees();\\n    }\\n\\n    function totalStakedTokens() external view override returns (uint256) {\\n        return _totalStakedTokens();\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal virtual;\\n\\n    function _stake(address _account, uint256 _amount) internal virtual;\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal virtual returns (uint256  unstakeLockID);\\n\\n    function _withdraw(address _account, uint256 _unstakeLockID) internal virtual;\\n\\n    function _claimRewards() internal virtual;\\n\\n    function _collectFees() internal virtual returns (uint256) {\\n        // set pendingFees to 0\\n        // Controller will mint tenderToken and distribute it\\n        uint256 before = pendingFees;\\n        pendingFees = 0;\\n        emit ProtocolFeeCollected(before);\\n        return before;\\n    }\\n\\n    function _collectLiquidityFees() internal virtual returns (uint256) {\\n        // set pendingFees to 0\\n        // Controller will mint tenderToken and distribute it\\n        uint256 before = pendingLiquidityFees;\\n        pendingLiquidityFees = 0;\\n        emit LiquidityFeeCollected(before);\\n        return before;\\n    }\\n\\n    function _totalStakedTokens() internal view virtual returns (uint256);\\n\\n    // Internal governance functions\\n    function _setStakingContract(address _stakingContract) internal virtual;\\n}\\n\",\"keccak256\":\"0x50d3fd334a3d5d75e26721c6a672004fa81972eb6849e4b480638df18d05f11d\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/integrations/graph/Graph.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../../../libs/MathUtils.sol\\\";\\n\\nimport \\\"../../Tenderizer.sol\\\";\\nimport \\\"./IGraph.sol\\\";\\n\\ncontract Graph is Tenderizer {\\n    // 100% in parts per million\\n    uint32 private constant MAX_PPM = 1000000;\\n\\n    IGraph graph;\\n\\n    // unstake lock ID of governance at the time governance unstakes\\n    uint256 governancePendingUnstakeLockID;\\n    // Set to governancePendingUnstakeLockID when governance withdrawal for the pending lock happens\\n    uint256 governanceLastProcessedUnstakeLockID;\\n    // Amount to unstake next by governance to process user withdrawals\\n    uint256 pendingUnstakes;\\n\\n    function initialize(\\n        IERC20 _steak,\\n        IGraph _graph,\\n        address _node\\n    ) public {\\n        Tenderizer._initialize(_steak, _node, msg.sender);\\n        graph = _graph;\\n    }\\n\\n    function _deposit(address _from, uint256 _amount) internal override {\\n        currentPrincipal += _amount;\\n\\n        emit Deposit(_from, _amount);\\n    }\\n\\n    function _stake(address _node, uint256 _amount) internal override {\\n        // if no amount is specified, stake all available tokens\\n        uint256 amount = _amount;\\n        if (amount == 0) {\\n            amount = IERC20(steak).balanceOf(address(this));\\n        }\\n\\n        if (amount == 0) {\\n            return;\\n            // TODO: revert ?\\n        }\\n\\n        // if no _node is specified, stake towards the default node\\n        address node_ = _node;\\n        if (node_ == ZERO_ADDRESS) {\\n            node_ = node;\\n        }\\n\\n        // approve amount to Graph protocol\\n        steak.approve(address(graph), amount);\\n\\n        // stake tokens\\n        graph.delegate(node_, amount);\\n\\n        emit Stake(node_, amount);\\n    }\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal override returns (uint256 unstakeLockID) {\\n        uint256 amount = _amount;\\n        unstakeLockID = ++lastUnstakeLockID;\\n\\n        // if no _node is specified, stake towards the default node\\n        address node_ = _node;\\n        if (node_ == ZERO_ADDRESS) {\\n            node_ = node;\\n        }\\n\\n        // Unstake from governance\\n        if (_account == controller) {\\n            // Check that no governance unstake is pending\\n            require(governancePendingUnstakeLockID == governanceLastProcessedUnstakeLockID, \\\"GOV_WITHDRAW_PENDING\\\");\\n            \\n            amount = pendingUnstakes;\\n            pendingUnstakes = 0;\\n            governancePendingUnstakeLockID = unstakeLockID;\\n\\n            // Calculate the amount of shares to undelegate\\n            IGraph.Delegation memory delegation = graph.getDelegation(node, address(this));\\n            IGraph.DelegationPool memory delPool = graph.delegationPools(node);\\n\\n            uint256 delShares = delegation.shares;\\n            uint256 totalShares = delPool.shares;\\n            uint256 totalTokens = delPool.tokens;\\n\\n            uint256 stake = MathUtils.percOf(delShares, totalTokens, totalShares);\\n            uint256 shares = MathUtils.percOf(delShares, amount, stake);\\n\\n            // undelegate shares\\n            graph.undelegate(node_, shares);\\n        } else {\\n            require(amount > 0, \\\"ZERO_AMOUNT\\\");\\n\\n            currentPrincipal -= amount;\\n            pendingUnstakes += amount;\\n        }\\n\\n        unstakeLocks[unstakeLockID] = UnstakeLock({\\n            amount: amount,\\n            account: _account\\n        });\\n\\n        emit Unstake(_account, node_, amount, unstakeLockID);\\n    }\\n\\n    function _withdraw(\\n        address _account,\\n        uint256 _unstakeLockID\\n    ) internal override {\\n        UnstakeLock storage lock = unstakeLocks[_unstakeLockID];\\n        address account = lock.account;\\n        uint256 amount = lock.amount;\\n\\n        delete unstakeLocks[_unstakeLockID];\\n\\n        // Check that a withdrawal is pending and valid\\n        require(account == _account, \\\"ACCOUNT_MISTMATCH\\\");\\n        require(amount > 0, \\\"ZERO_AMOUNT\\\");\\n        \\n        if (_account == controller) {\\n            governanceLastProcessedUnstakeLockID = governancePendingUnstakeLockID;\\n            graph.withdrawDelegated(node, ZERO_ADDRESS);\\n        } else {\\n            // Check that gov withdrawal for that unstake has occured\\n            require(_unstakeLockID < governanceLastProcessedUnstakeLockID, \\\"GOV_WITHDRAW_PENDING\\\");\\n            // Transfer amount from unbondingLock to _account\\n            steak.transfer(_account, amount);\\n        } \\n\\n        emit Withdraw(account, amount, _unstakeLockID);\\n    }\\n\\n    function _claimRewards() internal override {\\n        // GRT automatically compounds\\n        // The rewards is the difference between\\n        // pending stake and the latest cached stake amount\\n\\n        // TODO: Oh god this is going to be so costly\\n        // What if we gulp before this call so we have the updated state in getDelegator ? bond might be more costly\\n        // Let's just code this with everything we need and benchmark gas\\n\\n        // Account for LPT rewards\\n        address del = address(this);\\n        uint256 currentPrincipal_ = currentPrincipal;\\n\\n        IGraph.Delegation memory delegation = graph.getDelegation(node, del);\\n        IGraph.DelegationPool memory delPool = graph.delegationPools(node);\\n\\n        uint256 delShares = delegation.shares;\\n        uint256 totalShares = delPool.shares;\\n        uint256 totalTokens = delPool.tokens;\\n\\n        uint256 stake = MathUtils.percOf(delShares, totalTokens, totalShares);\\n\\n        uint256 rewards;\\n        if (stake >= currentPrincipal_) {\\n            rewards = stake - currentPrincipal_;\\n        }\\n\\n        // Substract protocol fee amount and add it to pendingFees\\n        uint256 _pendingFees = pendingFees + MathUtils.percOf(rewards, protocolFee);\\n        pendingFees = _pendingFees;\\n        uint256 _liquidityFees = pendingLiquidityFees + MathUtils.percOf(rewards, liquidityFee);\\n        pendingLiquidityFees = _liquidityFees;\\n        // Add current pending stake minus fees and set it as current principal\\n        uint256 newPrincipal = stake - _pendingFees - _liquidityFees;\\n        currentPrincipal = newPrincipal;\\n\\n        emit RewardsClaimed(rewards, newPrincipal, currentPrincipal_);\\n    }\\n\\n    function _totalStakedTokens() internal view override returns (uint256) {\\n        return currentPrincipal;\\n    }\\n\\n    function _setStakingContract(address _stakingContract) internal override {\\n        graph = IGraph(_stakingContract);\\n\\n        emit GovernanceUpdate(\\\"STAKING_CONTRACT\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xab0101b03f655e01064e431460b9f1406b909021951e51582b88a1313498cb8d\",\"license\":\"GPL-3.0\"},\"contracts/tenderizer/integrations/graph/IGraph.sol\":{\"content\":\"// // SPDX-FileCopyrightText: 2020 Tenderize <info@tenderize.me>\\n\\n// // SPDX-License-Identifier: GPL-3.0\\n\\n// /* See contracts/COMPILERS.md */\\npragma solidity 0.8.4;\\n\\ninterface IGraph {\\n    // -- Delegation Data --\\n\\n    /**\\n     * @dev Delegation pool information. One per indexer.\\n     */\\n    struct DelegationPool {\\n        uint32 cooldownBlocks; // Blocks to wait before updating parameters\\n        uint32 indexingRewardCut; // in PPM\\n        uint32 queryFeeCut; // in PPM\\n        uint256 updatedAtBlock; // Block when the pool was last updated\\n        uint256 tokens; // Total tokens as pool reserves\\n        uint256 shares; // Total shares minted in the pool\\n        // mapping(address => Delegation) delegators; // Mapping of delegator => Delegation\\n    }\\n\\n    /**\\n     * @dev Individual delegation data of a delegator in a pool.\\n     */\\n    struct Delegation {\\n        uint256 shares; // Shares owned by a delegator in the pool\\n        uint256 tokensLocked; // Tokens locked for undelegation\\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\\n    }\\n\\n    function delegate(address _indexer, uint256 _tokens) external returns (uint256);\\n\\n    function undelegate(address _indexer, uint256 _shares) external returns (uint256);\\n\\n    function withdrawDelegated(address _indexer, address _newIndexer) external returns (uint256);\\n\\n    function getDelegation(address _indexer, address _delegator) external view returns (Delegation memory);\\n\\n    function delegationPools(address _indexer) external view returns (DelegationPool memory);\\n\\n    function getWithdraweableDelegatedTokens(Delegation memory _delegation) external view returns (uint256);\\n\\n    function thawingPeriod() external view returns (uint256);\\n\\n    function delegationTaxPercentage() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xec9b1988fb42bd3cb2edfd0a17947822a509c1a8c6e2ff72c754b6db9f6d454e\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612d22806100206000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063adc9772e116100c3578063c2a672e01161007c578063c2a672e014610353578063c879657214610383578063d70754ec146103a1578063f3fef3a3146103bf578063f5492b95146103db578063f77c47911461040c57610158565b8063adc9772e146102a7578063afef75d2146102c3578063b089af31146102df578063b0e21e8a146102fd578063c0c53b8b1461031b578063c21d5ab71461033757610158565b806351c669c01161011557806351c669c0146101f95780636f19031514610217578063787dce3d1461023557806392eefe9b1461025157806398118cb41461026d5780639dd373b91461028b57610158565b8063224438d11461015d5780632a777db21461017b578063357bf15c14610199578063372500ab146101b55780633ae73259146101bf57806347e7ef24146101dd575b600080fd5b61016561042a565b60405161017291906126d2565b60405180910390f35b610183610430565b60405161019091906126d2565b60405180910390f35b6101b360048036038101906101ae91906122ea565b610436565b005b6101bd6104cf565b005b6101c7610533565b6040516101d491906126d2565b60405180910390f35b6101f760048036038101906101f291906121bb565b610542565b005b6102016105aa565b60405161020e91906126d2565b60405180910390f35b61021f6105b0565b60405161022c9190612557565b60405180910390f35b61024f600480360381019061024a91906122ea565b6105d6565b005b61026b60048036038101906102669190612192565b61066f565b005b6102756107b2565b60405161028291906126d2565b60405180910390f35b6102a560048036038101906102a09190612192565b6107b8565b005b6102c160048036038101906102bc91906121bb565b61081e565b005b6102dd60048036038101906102d89190612220565b610886565b005b6102e76109c9565b6040516102f491906126d2565b60405180910390f35b610305610a32565b60405161031291906126d2565b60405180910390f35b61033560048036038101906103309190612249565b610a38565b005b610351600480360381019061034c9190612192565b610a89565b005b61036d600480360381019061036891906121bb565b610bcc565b60405161037a91906126d2565b60405180910390f35b61038b610c3c565b60405161039891906126d2565b60405180910390f35b6103a9610ca5565b6040516103b691906124ea565b60405180910390f35b6103d960048036038101906103d491906121bb565b610ccb565b005b6103f560048036038101906103f091906122ea565b610d33565b6040516104039291906126ed565b60405180910390f35b610414610d77565b60405161042191906124ea565b60405180910390f35b60055481565b60065481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461049057600080fd5b806004819055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516104c4906126b2565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461052957600080fd5b610531610d9d565b565b600061053d611042565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461059c57600080fd5b6105a6828261104c565b5050565b60075481565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063057600080fd5b806003819055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa60405161066490612652565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610739576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610730906125d2565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516107a7906125b2565b60405180910390a150565b60045481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461081257600080fd5b61081b816110b7565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087857600080fd5b6108828282611130565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108e057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610950576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610947906125d2565b60405180910390fd5b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa6040516109be90612612565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a2557600080fd5b610a2d611432565b905090565b60035481565b610a43838233611480565b81600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ae357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a906125d2565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa604051610bc190612632565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c2857600080fd5b610c348360008461162d565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c9857600080fd5b610ca0611b6b565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d2557600080fd5b610d2f8282611bb9565b5050565b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000309050600060075490506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166315049a5a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401610e2a929190612505565b60606040518083038186803b158015610e4257600080fd5b505afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a91906122c1565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392511c8f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610efb91906124ea565b60c06040518083038186803b158015610f1357600080fd5b505afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190612298565b905060008260000151905060008260a0015190506000836080015190506000610f75848385611f7b565b90506000878210610f8f578782610f8c919061288d565b90505b6000610f9d82600354611faf565b600554610faa91906127ac565b9050806005819055506000610fc183600454611faf565b600654610fce91906127ac565b9050806006819055506000818386610fe6919061288d565b610ff0919061288d565b9050806007819055507f74a6c69d87eba241366f58629be99186a3a0a4c378d615da3b48c616c2e4e28484828d60405161102c9392919061273f565b60405180910390a1505050505050505050505050565b6000600754905090565b806007600082825461105e91906127ac565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c826040516110ab91906126d2565b60405180910390a25050565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f6641a0d0a317e54d1b956ab0202883db13ef06b75584a6a017b1b3c796f990fa60405161112590612572565b60405180910390a150565b600081905060008114156111ec57600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161119991906124ea565b60206040518083038186803b1580156111b157600080fd5b505afa1580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e99190612313565b90505b60008114156111fb575061142e565b6000839050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561125b57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016112da92919061252e565b602060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c91906121f7565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663026e402b82846040518363ffffffff1660e01b815260040161138a92919061252e565b602060405180830381600087803b1580156113a457600080fd5b505af11580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc9190612313565b508073ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a8360405161142391906126d2565b60405180910390a250505b5050565b600080600654905060006006819055507f1d8f4bab53e84801fc35b88b53df72a998fa29c92e6fc65d412c4677d0d88c628160405161147191906126d2565b60405180910390a18091505090565b600060019054906101000a900460ff16806114a6575060008054906101000a900460ff16155b6114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc906125f2565b60405180910390fd5b60008060019054906101000a900460ff161590508015611535576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b83600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506658d15e1762800060038190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156116275760008060016101000a81548160ff0219169083151502179055505b50505050565b60008082905060096000815461164290612992565b91905081905591506000849050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116aa57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156119f357600c54600b5414611746576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173d90612692565b60405180910390fd5b600d5491506000600d8190555082600b819055506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166315049a5a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16306040518363ffffffff1660e01b81526004016117db929190612505565b60606040518083038186803b1580156117f357600080fd5b505afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b91906122c1565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392511c8f600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016118ac91906124ea565b60c06040518083038186803b1580156118c457600080fd5b505afa1580156118d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fc9190612298565b905060008260000151905060008260a0015190506000836080015190506000611926848385611f7b565b90506000611935858a84611f7b565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d99dd1689836040518363ffffffff1660e01b815260040161199492919061252e565b602060405180830381600087803b1580156119ae57600080fd5b505af11580156119c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e69190612313565b5050505050505050611a69565b60008211611a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2d90612672565b60405180910390fd5b8160076000828254611a48919061288d565b9250508190555081600d6000828254611a6191906127ac565b925050819055505b60405180604001604052808381526020018773ffffffffffffffffffffffffffffffffffffffff16815250600860008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050508073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef8486604051611b5a929190612716565b60405180910390a350509392505050565b600080600554905060006005819055507f414d7d8eae12f648156e75499fc0a5a10aa84f2745c6f791b0453cb17f1e17fa81604051611baa91906126d2565b60405180910390a18091505090565b600060086000838152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600082600001549050600860008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611cb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cac90612592565b60405180910390fd5b60008111611cf8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cef90612672565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415611e2f57600b54600c81905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351a60b02600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518363ffffffff1660e01b8152600401611dd7929190612505565b602060405180830381600087803b158015611df157600080fd5b505af1158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e299190612313565b50611f24565b600c548410611e73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e6a90612692565b60405180910390fd5b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86836040518363ffffffff1660e01b8152600401611ed092919061252e565b602060405180830381600087803b158015611eea57600080fd5b505af1158015611efe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2291906121f7565b505b8173ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688286604051611f6c929190612716565b60405180910390a25050505050565b6000683635c9adc5dea00000611f918484611fd9565b85611f9c9190612833565b611fa69190612802565b90509392505050565b6000683635c9adc5dea000008284611fc79190612833565b611fd19190612802565b905092915050565b600081683635c9adc5dea0000084611ff19190612833565b611ffb9190612802565b905092915050565b60008135905061201281612c62565b92915050565b60008151905061202781612c79565b92915050565b60008135905061203c81612c90565b92915050565b60008135905061205181612ca7565b92915050565b600060c0828403121561206957600080fd5b61207360c0612776565b905060006120838482850161217d565b60008301525060206120978482850161217d565b60208301525060406120ab8482850161217d565b60408301525060606120bf84828501612168565b60608301525060806120d384828501612168565b60808301525060a06120e784828501612168565b60a08301525092915050565b60006060828403121561210557600080fd5b61210f6060612776565b9050600061211f84828501612168565b600083015250602061213384828501612168565b602083015250604061214784828501612168565b60408301525092915050565b60008135905061216281612cbe565b92915050565b60008151905061217781612cbe565b92915050565b60008151905061218c81612cd5565b92915050565b6000602082840312156121a457600080fd5b60006121b284828501612003565b91505092915050565b600080604083850312156121ce57600080fd5b60006121dc85828601612003565b92505060206121ed85828601612153565b9150509250929050565b60006020828403121561220957600080fd5b600061221784828501612018565b91505092915050565b60006020828403121561223257600080fd5b60006122408482850161202d565b91505092915050565b60008060006060848603121561225e57600080fd5b600061226c8682870161202d565b935050602061227d86828701612042565b925050604061228e86828701612003565b9150509250925092565b600060c082840312156122aa57600080fd5b60006122b884828501612057565b91505092915050565b6000606082840312156122d357600080fd5b60006122e1848285016120f3565b91505092915050565b6000602082840312156122fc57600080fd5b600061230a84828501612153565b91505092915050565b60006020828403121561232557600080fd5b600061233384828501612168565b91505092915050565b612345816128c1565b82525050565b6123548161293d565b82525050565b600061236760108361279b565b915061237282612a79565b602082019050919050565b600061238a60118361279b565b915061239582612aa2565b602082019050919050565b60006123ad600a8361279b565b91506123b882612acb565b602082019050919050565b60006123d0600c8361279b565b91506123db82612af4565b602082019050919050565b60006123f3602e8361279b565b91506123fe82612b1d565b604082019050919050565b600061241660058361279b565b915061242182612b6c565b602082019050919050565b600061243960048361279b565b915061244482612b95565b602082019050919050565b600061245c600c8361279b565b915061246782612bbe565b602082019050919050565b600061247f600b8361279b565b915061248a82612be7565b602082019050919050565b60006124a260148361279b565b91506124ad82612c10565b602082019050919050565b60006124c5600d8361279b565b91506124d082612c39565b602082019050919050565b6124e481612923565b82525050565b60006020820190506124ff600083018461233c565b92915050565b600060408201905061251a600083018561233c565b612527602083018461233c565b9392505050565b6000604082019050612543600083018561233c565b61255060208301846124db565b9392505050565b600060208201905061256c600083018461234b565b92915050565b6000602082019050818103600083015261258b8161235a565b9050919050565b600060208201905081810360008301526125ab8161237d565b9050919050565b600060208201905081810360008301526125cb816123a0565b9050919050565b600060208201905081810360008301526125eb816123c3565b9050919050565b6000602082019050818103600083015261260b816123e6565b9050919050565b6000602082019050818103600083015261262b81612409565b9050919050565b6000602082019050818103600083015261264b8161242c565b9050919050565b6000602082019050818103600083015261266b8161244f565b9050919050565b6000602082019050818103600083015261268b81612472565b9050919050565b600060208201905081810360008301526126ab81612495565b9050919050565b600060208201905081810360008301526126cb816124b8565b9050919050565b60006020820190506126e760008301846124db565b92915050565b600060408201905061270260008301856124db565b61270f602083018461233c565b9392505050565b600060408201905061272b60008301856124db565b61273860208301846124db565b9392505050565b600060608201905061275460008301866124db565b61276160208301856124db565b61276e60408301846124db565b949350505050565b6000612780612791565b905061278c8282612961565b919050565b6000604051905090565b600082825260208201905092915050565b60006127b782612923565b91506127c283612923565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156127f7576127f66129db565b5b828201905092915050565b600061280d82612923565b915061281883612923565b92508261282857612827612a0a565b5b828204905092915050565b600061283e82612923565b915061284983612923565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612882576128816129db565b5b828202905092915050565b600061289882612923565b91506128a383612923565b9250828210156128b6576128b56129db565b5b828203905092915050565b60006128cc82612903565b9050919050565b60008115159050919050565b60006128ea826128c1565b9050919050565b60006128fc826128c1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b60006129488261294f565b9050919050565b600061295a82612903565b9050919050565b61296a82612a68565b810181811067ffffffffffffffff8211171561298957612988612a39565b5b80604052505050565b600061299d82612923565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156129d0576129cf6129db565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f5354414b494e475f434f4e545241435400000000000000000000000000000000600082015250565b7f4143434f554e545f4d4953544d41544348000000000000000000000000000000600082015250565b7f434f4e54524f4c4c455200000000000000000000000000000000000000000000600082015250565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f535445414b000000000000000000000000000000000000000000000000000000600082015250565b7f4e4f444500000000000000000000000000000000000000000000000000000000600082015250565b7f50524f544f434f4c5f4645450000000000000000000000000000000000000000600082015250565b7f5a45524f5f414d4f554e54000000000000000000000000000000000000000000600082015250565b7f474f565f57495448445241575f50454e44494e47000000000000000000000000600082015250565b7f4c49515549444954595f46454500000000000000000000000000000000000000600082015250565b612c6b816128c1565b8114612c7657600080fd5b50565b612c82816128d3565b8114612c8d57600080fd5b50565b612c99816128df565b8114612ca457600080fd5b50565b612cb0816128f1565b8114612cbb57600080fd5b50565b612cc781612923565b8114612cd257600080fd5b50565b612cde8161292d565b8114612ce957600080fd5b5056fea26469706673582212206cb4b31bcdfa0c555b465ce54406c0fbd008d02a966b6aa8ffadbfaa496411de64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claimRewards()": {
        "details": "Only callable by controller"
      },
      "deposit(address,uint256)": {
        "details": "only callable by Controllerdoesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be stakedrequires '_amount' to be approved by '_from'",
        "params": {
          "_amount": "amount deposited",
          "_from": "account that deposits"
        }
      },
      "stake(address,uint256)": {
        "details": "If '_account' is not specified, stake towards the default addressIf '_amount' is 0, stake the entire current token balance of the TenderizerOnly callable by controller",
        "params": {
          "_account": "account to stake to in the underlying protocol",
          "_amount": "amount to stake"
        }
      },
      "unstake(address,uint256)": {
        "details": "If '_account' is not specified, stake towards the default addressIf '_amount' is 0, unstake the entire amount staked towards _accountOnly callable by controller",
        "params": {
          "_account": "account to unstake from in the underlying protocol",
          "_amount": "amount to unstake"
        }
      },
      "withdraw(address,uint256)": {
        "details": "If '_amount' isn't specified all unstake tokens by '_account' will be withdrawnRequires '_account' to have unstaked prior to calling withdrawOnly callable by controller",
        "params": {
          "_account": "account requesting the withdrawam",
          "_unstakeLockID": "ID for the lock to request the withdraw for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Claim staking rewards for the underlying protocol"
      },
      "deposit(address,uint256)": {
        "notice": "Deposit tokens in Tenderizer"
      },
      "stake(address,uint256)": {
        "notice": "Stake '_amount' of tokens to '_account'"
      },
      "unstake(address,uint256)": {
        "notice": "Unstake '_amount' of tokens from '_account'"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraw '_amount' of tokens previously unstaked by '_account'"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 118,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2291,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "steak",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)780"
      },
      {
        "astId": 2293,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "node",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2295,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2297,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "protocolFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2299,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "liquidityFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2301,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "pendingFees",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2303,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "pendingLiquidityFees",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2305,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "currentPrincipal",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2310,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "unstakeLocks",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(UnstakeLock)2282_storage)"
      },
      {
        "astId": 2312,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "lastUnstakeLockID",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2755,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "graph",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IGraph)3455"
      },
      {
        "astId": 2757,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "governancePendingUnstakeLockID",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2759,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "governanceLastProcessedUnstakeLockID",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2761,
        "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
        "label": "pendingUnstakes",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)780": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGraph)3455": {
        "encoding": "inplace",
        "label": "contract IGraph",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(UnstakeLock)2282_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Tenderizer.UnstakeLock)",
        "numberOfBytes": "32",
        "value": "t_struct(UnstakeLock)2282_storage"
      },
      "t_struct(UnstakeLock)2282_storage": {
        "encoding": "inplace",
        "label": "struct Tenderizer.UnstakeLock",
        "members": [
          {
            "astId": 2279,
            "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2281,
            "contract": "contracts/tenderizer/integrations/graph/Graph.sol:Graph",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}