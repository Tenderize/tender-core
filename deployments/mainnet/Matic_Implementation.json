{
  "address": "0x762B75B8B9EE9b8599ce1C799bB442b984125f29",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "param",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "oldValue",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newValue",
          "type": "bytes"
        }
      ],
      "name": "GovernanceUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidityFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProtocolFeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "int256",
          "name": "stakeDiff",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentPrincipal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrincipal",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "Unstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "calcDepositOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentPrincipal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_matic",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_liquidityFee",
          "type": "uint256"
        },
        {
          "internalType": "contract ITenderToken",
          "name": "_tenderTokenTarget",
          "type": "address"
        },
        {
          "internalType": "contract TenderFarmFactory",
          "name": "_tenderFarmFactory",
          "type": "address"
        },
        {
          "internalType": "contract ITenderSwapFactory",
          "name": "_tenderSwapFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "node",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueUnlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "rescueWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "selfPermitIfNecessary",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_node",
          "type": "address"
        }
      ],
      "name": "setNode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        }
      ],
      "name": "setSteak",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITenderFarm",
          "name": "_tenderFarm",
          "type": "address"
        }
      ],
      "name": "setTenderFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "steak",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderFarm",
      "outputs": [
        {
          "internalType": "contract ITenderFarm",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderSwap",
      "outputs": [
        {
          "internalType": "contract ITenderSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tenderToken",
      "outputs": [
        {
          "internalType": "contract ITenderToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unstakeLockID",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x650f6c77287a5005d42d31a42ed761df9c7d38ce0f316db1b7bfaabf8bf69662",
  "receipt": {
    "to": null,
    "from": "0x7fcfC04cc6Cc89Def9a9F46Fab7784131b12699C",
    "contractAddress": "0x762B75B8B9EE9b8599ce1C799bB442b984125f29",
    "transactionIndex": 137,
    "gasUsed": "4595705",
    "logsBloom": "0x
    "blockHash": "0x137addfb259558d3a65ae301bac449fafda00a9483b5898d123be433c452b679",
    "transactionHash": "0x650f6c77287a5005d42d31a42ed761df9c7d38ce0f316db1b7bfaabf8bf69662",
    "logs": [],
    "blockNumber": 14747943,
    "cumulativeGasUsed": "14364999",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "19276debf674c1c1df901d1bc8945ee1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"param\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oldValue\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newValue\",\"type\":\"bytes\"}],\"name\":\"GovernanceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidityFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"stakeDiff\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentPrincipal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrincipal\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"calcDepositOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPrincipal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_matic\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"contract ITenderToken\",\"name\":\"_tenderTokenTarget\",\"type\":\"address\"},{\"internalType\":\"contract TenderFarmFactory\",\"name\":\"_tenderFarmFactory\",\"type\":\"address\"},{\"internalType\":\"contract ITenderSwapFactory\",\"name\":\"_tenderSwapFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"node\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"rescueWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"selfPermitIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_node\",\"type\":\"address\"}],\"name\":\"setNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"}],\"name\":\"setSteak\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITenderFarm\",\"name\":\"_tenderFarm\",\"type\":\"address\"}],\"name\":\"setTenderFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"steak\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderFarm\",\"outputs\":[{\"internalType\":\"contract ITenderFarm\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderSwap\",\"outputs\":[{\"internalType\":\"contract ITenderSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tenderToken\",\"outputs\":[{\"internalType\":\"contract ITenderToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unstakeLockID\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calcDepositOut(uint256)\":{\"details\":\"used by controller to calculate tokens to be minted before depositing.to be used when there a delegation tax is deducted, for eg. in Graph.\",\"returns\":{\"_0\":\"number of tokens staked for `amountIn`.\"}},\"deposit(uint256)\":{\"details\":\"doesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be staked.requires '_amount' to be approved by '_from'.\",\"params\":{\"_amount\":\"amount deposited\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"doesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be staked.requires '_amount' to be approved by '_from'.\",\"params\":{\"_amount\":\"amount deposited\",\"_deadline\":\"deadline for the permit\",\"_r\":\"from ECDSA signature\",\"_s\":\"from ECDSA signature\",\"_v\":\"from ECDSA signature\"}},\"rescueUnlock()\":{\"details\":\"Used to rescue all staked funds.\",\"returns\":{\"_0\":\"unstake lockID generated for unstake\"}},\"rescueWithdraw(uint256)\":{\"details\":\"To be called after rescueUnlock() with the unstakeLockID returned there.Process unlocks/withdrawals before rescueWithdraw for integrations with WithdrawPools.\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this).\",\"params\":{\"_deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_token\":\"The address of the token spent\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"_value\":\"The amount that can be spent of token\"}},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\"params\":{\"_deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"_r\":\"Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\"_s\":\"Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\"_token\":\"The address of the token spent\",\"_v\":\"Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\"_value\":\"The amount that can be spent of token\"}},\"stake(uint256)\":{\"details\":\"Only callable by Gov.\",\"params\":{\"_amount\":\"amount to stake\"}},\"totalStakedTokens()\":{\"returns\":{\"_0\":\"total amount staked by this Tenderizer\"}},\"unstake(uint256)\":{\"details\":\"unstake from the default address.If '_amount' is 0, unstake the entire amount staked towards _account.\",\"params\":{\"_amount\":\"amount to unstake\"},\"returns\":{\"_0\":\"unstake lockID generated for unstake\"}},\"withdraw(uint256)\":{\"details\":\"If '_amount' isn't specified all unstake tokens by '_account' will be withdrawn.Requires '_account' to have unstaked prior to calling withdraw.\",\"params\":{\"_unstakeLockID\":\"ID for the lock to request the withdraw for\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256)\":{\"notice\":\"Deposit gets emitted when an accounts deposits underlying tokens.\"},\"GovernanceUpdate(string,bytes,bytes)\":{\"notice\":\"GovernanceUpdate gets emitted when a parameter on the Tenderizer gets updated.\"},\"LiquidityFeeCollected(uint256)\":{\"notice\":\"LiquidityFeeCollected gets emitted when liquidity provider fees are moved to the TenderFarm.\"},\"ProtocolFeeCollected(uint256)\":{\"notice\":\"ProtocolFeeCollected gets emitted when the treasury claims its outstanding protocol fees.\"},\"RewardsClaimed(int256,uint256,uint256)\":{\"notice\":\"RewardsClaimed gets emitted when the Tenderizer processes staking rewards (or slashing) from the underlying protocol.\"},\"Stake(address,uint256)\":{\"notice\":\"Stake gets emitted when funds are staked/delegated from the Tenderizer contract into the underlying protocol.\"},\"Unstake(address,address,uint256,uint256)\":{\"notice\":\"Unstake gets emitted when an account burns TenderTokens to unlock tokens staked through the Tenderizer\"},\"Withdraw(address,uint256,uint256)\":{\"notice\":\"Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal.\"}},\"kind\":\"user\",\"methods\":{\"calcDepositOut(uint256)\":{\"notice\":\"Returns the number of tenderTokens to be minted for amountIn deposit.\"},\"claimRewards()\":{\"notice\":\"Compound all the rewards and new deposits. Claim staking rewards and earned fees for the underlying protocol and stake any leftover token balance. Process Tender protocol fees if revenue is positive.\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens in Tenderizer.\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit tokens in Tenderizer with permit.\"},\"rescueUnlock()\":{\"notice\":\"RescueUnstake unstakes all tokens from underlying protocol\"},\"rescueWithdraw(uint256)\":{\"notice\":\"RescueWithdraw withdraws all tokens into the Tenderizer from the underlying protocol  after the unlock period ends\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from `msg.sender`\"},\"stake(uint256)\":{\"notice\":\"Stake '_amount' of tokens.\"},\"totalStakedTokens()\":{\"notice\":\"Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\"},\"unstake(uint256)\":{\"notice\":\"Unstake '_amount' of tokens from '_account'.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw '_amount' of tokens previously unstaked by '_account'.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tenderizer/integrations/matic/Matic.sol\":\"Matic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 currentAllowance = allowance(account, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(account, _msgSender(), currentAllowance - amount);\\n        }\\n        _burn(account, amount);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x5321bbe08dd6e82e85222024dc300d4959ff8615742ad63135759883a19e02a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/draft-EIP712Upgradeable.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"../../../utils/CountersUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal initializer {\\n        __Context_init_unchained();\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory name) internal initializer {\\n        _PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf07c1013d0ecf7a80ff5bf8f59105fc0acc5bf83aa4196b409d9ac3666d37cc6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x4e321ee7110594e92c1c834d7de2fbdfd01fbed6c06127fe75c5836fe80a24a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x00c96e792d367a436015f12ce2665aa8e2a0d61d2c6045a82cbb37da20e5a042\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x07411372282794f7ecde69a1065e5d20441abe7c9f8861437b4d45c9a4712fa6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x30f3940c119b4d93578bac394f43ee9b0b8465ea1e60b316244183be2983a5ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xa3bbab77849522b73d8c6cd3d2ac54bef7580e4354484f35f4cabf55d3d2b3f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x3aab711a5f9a5a5a394191e928cc8258e8a243e855bb0275e7834f9686383277\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"contracts/helpers/SelfPermit.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title Self Permit\\n/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\\ninterface ISelfPermit {\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// @param _token The address of the token spent\\n    /// @param _value The amount that can be spent of token\\n    /// @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermit(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable;\\n\\n    /// @notice Permits this contract to spend a given token from `msg.sender`\\n    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\\n    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\\n    /// @param _token The address of the token spent\\n    /// @param _value The amount that can be spent of token\\n    /// @param _deadline A timestamp, the current blocktime must be less than or equal to this timestamp\\n    /// @param _v Must produce valid secp256k1 signature from the holder along with `r` and `s`\\n    /// @param _r Must produce valid secp256k1 signature from the holder along with `v` and `s`\\n    /// @param _s Must produce valid secp256k1 signature from the holder along with `r` and `v`\\n    function selfPermitIfNecessary(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable;\\n}\\n\\nabstract contract SelfPermit is ISelfPermit {\\n    /// @inheritdoc ISelfPermit\\n    function selfPermit(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) public payable override {\\n        IERC20Permit(_token).permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\\n    }\\n\\n    /// @inheritdoc ISelfPermit\\n    function selfPermitIfNecessary(\\n        address _token,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external payable override {\\n        uint256 allowance = IERC20(_token).allowance(msg.sender, address(this));\\n        if (allowance < _value) selfPermit(_token, _value - allowance, _deadline, _v, _r, _s);\\n    }\\n}\\n\",\"keccak256\":\"0x1247853b1c8a9faf19744ffd3667dd08834e88acd3389e6574da813bbd365607\",\"license\":\"MIT\"},\"contracts/libs/MathUtils.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary MathUtils {\\n    // Divisor used for representing percentages\\n    uint256 public constant PERC_DIVISOR = 10**21;\\n\\n    /**\\n     * @dev Returns whether an amount is a valid percentage out of PERC_DIVISOR\\n     * @param _amount Amount that is supposed to be a percentage\\n     */\\n    function validPerc(uint256 _amount) internal pure returns (bool) {\\n        return _amount <= PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage\\n     * @param _fracDenom Denominator of fraction representing the percentage\\n     */\\n    function percOf(\\n        uint256 _amount,\\n        uint256 _fracNum,\\n        uint256 _fracDenom\\n    ) internal pure returns (uint256) {\\n        return (_amount * percPoints(_fracNum, _fracDenom)) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage of a value with the percentage represented by a fraction over PERC_DIVISOR\\n     * @param _amount Amount to take the percentage of\\n     * @param _fracNum Numerator of fraction representing the percentage with PERC_DIVISOR as the denominator\\n     */\\n    function percOf(uint256 _amount, uint256 _fracNum) internal pure returns (uint256) {\\n        return (_amount * _fracNum) / PERC_DIVISOR;\\n    }\\n\\n    /**\\n     * @dev Compute percentage representation of a fraction\\n     * @param _fracNum Numerator of fraction represeting the percentage\\n     * @param _fracDenom Denominator of fraction represeting the percentage\\n     */\\n    function percPoints(uint256 _fracNum, uint256 _fracDenom) internal pure returns (uint256) {\\n        return (_fracNum * PERC_DIVISOR) / _fracDenom;\\n    }\\n\\n    /**\\n     * @notice Compares a and b and returns true if the difference between a and b\\n     *         is less than 1 or equal to each other.\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return True if the difference between a and b is less than 1 or equal,\\n     *         otherwise return false\\n     */\\n    function within1(uint256 a, uint256 b) internal pure returns (bool) {\\n        return (difference(a, b) <= 1);\\n    }\\n\\n    /**\\n     * @notice Calculates absolute difference between a and b\\n     * @param a uint256 to compare with\\n     * @param b uint256 to compare with\\n     * @return Difference between a and b\\n     */\\n    function difference(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a - b;\\n        }\\n        return b - a;\\n    }\\n}\\n\",\"keccak256\":\"0x4788b5ca1f6a1c34febfd25857b95e4c6c5494e2e062c820552ebaed21ae856b\",\"license\":\"MIT\"},\"contracts/tenderfarm/ITenderFarm.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ITenderToken.sol\\\";\\nimport \\\"../tenderizer/ITenderizer.sol\\\";\\n\\n/**\\n * @title TenderFarm\\n * @notice TenderFarm is responsible for incetivizing liquidity providers, by accepting LP Tokens\\n * and a proportionaly rewarding them with TenderTokens over time.\\n */\\ninterface ITenderFarm {\\n    /**\\n     * @notice Farm gets emitted when an account stakes LP tokens.\\n     * @param account the account for which LP tokens were staked\\n     * @param amount the amount of LP tokens staked\\n     */\\n    event Farm(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice Unfarm gets emitted when an account unstakes LP tokens.\\n     * @param account the account for which LP tokens were unstaked\\n     * @param amount the amount of LP tokens unstaked\\n     */\\n    event Unfarm(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice Harvest gets emitted when an accounts harvests outstanding\\n     * rewards.\\n     * @param account the account which harvested rewards\\n     * @param amount the amount of rewards harvested\\n     */\\n    event Harvest(address indexed account, uint256 amount);\\n\\n    /**\\n     * @notice RewardsAdded gets emitted when new rewards are added\\n     * and a new epoch begins\\n     * @param amount amount of rewards that were addedd\\n     */\\n    event RewardsAdded(uint256 amount);\\n\\n    function initialize(\\n        IERC20 _stakeToken,\\n        ITenderToken _rewardToken,\\n        ITenderizer _tenderizer\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice stake liquidity pool tokens to receive rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @param _amount amount of liquidity pool tokens to stake\\n     */\\n    function farm(uint256 _amount) external;\\n\\n    /**\\n     * @notice allow spending token and stake liquidity pool tokens to receive rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @dev calls permit on LP Token.\\n     * @param _amount amount of liquidity pool tokens to stake\\n     * @param _deadline deadline of the permit\\n     * @param _v v of signed Permit message\\n     * @param _r r of signed Permit message\\n     * @param _s s of signed Permit message\\n     */\\n    function farmWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /**\\n     * @notice stake liquidity pool tokens for a specific account so that it receives rewards\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev staked tokens will belong to the account they are staked for.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @param _for account to stake for\\n     * @param _amount amount of liquidity pool tokens to stake\\n     */\\n    function farmFor(address _for, uint256 _amount) external;\\n\\n    /**\\n     * @notice unstake liquidity pool tokens\\n     * @dev '_amount' needs to be approved for the 'TenderFarm' to transfer.\\n     * @dev harvests current rewards before accounting updates are made.\\n     * @param amount amount of liquidity pool tokens to stake\\n     */\\n    function unfarm(uint256 amount) external;\\n\\n    /**\\n     * @notice harvest outstanding rewards\\n     * @dev reverts when trying to harvest multiple times if no new rewards have been added.\\n     * @dev emits an event with how many reward tokens have been harvested.\\n     */\\n    function harvest() external;\\n\\n    /**\\n     * @notice add new rewards\\n     * @dev will 'start' a new 'epoch'.\\n     * @dev only callable by owner.\\n     * @param _amount amount of reward tokens to add\\n     */\\n    function addRewards(uint256 _amount) external;\\n\\n    /**\\n     * @notice Check available rewards for an account.\\n     * @param _for address address of the account to check rewards for.\\n     * @return amount rewards for the provided account address.\\n     */\\n    function availableRewards(address _for) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Check stake for an account.\\n     * @param _of address address of the account to check stake for.\\n     * @return amount LP tokens deposited for address\\n     */\\n    function stakeOf(address _of) external view returns (uint256 amount);\\n\\n    /**\\n     * @notice Return the total amount of LP tokens staked in this farm.\\n     * @return stake total amount of LP tokens staked\\n     */\\n    function totalStake() external view returns (uint256 stake);\\n\\n    /**\\n     * @notice Return the total amount of LP tokens staked\\n     * for the next reward epoch.\\n     * @return nextStake LP Tokens staked for next round\\n     */\\n    function nextTotalStake() external view returns (uint256 nextStake);\\n\\n    /**\\n     * @notice Changes the tenderizer of the contract\\n     * @param _tenderizer address of the new tenderizer\\n     */\\n    function setTenderizer(ITenderizer _tenderizer) external;\\n}\\n\",\"keccak256\":\"0xa555bf328cd25dbb4923a69fc9bba78fec03e1e5d83b526883fd6e4e66847369\",\"license\":\"MIT\"},\"contracts/tenderfarm/TenderFarmFactory.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITenderFarm.sol\\\";\\nimport \\\"../token/ITenderToken.sol\\\";\\nimport \\\"../tenderizer/ITenderizer.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract TenderFarmFactory {\\n    ITenderFarm immutable farmTarget;\\n\\n    constructor(ITenderFarm _farm) {\\n        farmTarget = _farm;\\n    }\\n\\n    event NewTenderFarm(ITenderFarm farm, IERC20 stakeToken, ITenderToken rewardToken, ITenderizer tenderizer);\\n\\n    function deploy(\\n        IERC20 _stakeToken,\\n        ITenderToken _rewardToken,\\n        ITenderizer _tenderizer\\n    ) external returns (ITenderFarm farm) {\\n        farm = ITenderFarm(Clones.clone(address(farmTarget)));\\n\\n        require(farm.initialize(_stakeToken, _rewardToken, _tenderizer), \\\"FAIL_INIT_TENDERFARM\\\");\\n\\n        emit NewTenderFarm(farm, _stakeToken, _rewardToken, _tenderizer);\\n    }\\n}\\n\",\"keccak256\":\"0xb13e9d8dac64abf01f159f45cbf645aad013b1fe10dd0e17432b83d7bf729fc9\",\"license\":\"MIT\"},\"contracts/tenderizer/ITenderizer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../tenderfarm/ITenderFarm.sol\\\";\\n\\n/**\\n * @title Tenderizer is the base contract to be implemented.\\n * @notice Tenderizer is responsible for all Protocol interactions (staking, unstaking, claiming rewards)\\n * while also keeping track of user depsotis/withdrawals and protocol fees.\\n * @dev New implementations are required to inherit this contract and override any required internal functions.\\n */\\ninterface ITenderizer {\\n    // Events\\n\\n    /**\\n     * @notice Deposit gets emitted when an accounts deposits underlying tokens.\\n     * @param from the account that deposited\\n     * @param amount the amount of tokens deposited\\n     */\\n    event Deposit(address indexed from, uint256 amount);\\n\\n    /**\\n     * @notice Stake gets emitted when funds are staked/delegated from the Tenderizer contract\\n     * into the underlying protocol.\\n     * @param node the address the funds are staked to\\n     * @param amount the amount staked\\n     */\\n    event Stake(address indexed node, uint256 amount);\\n\\n    /**\\n     * @notice Unstake gets emitted when an account burns TenderTokens to unlock\\n     * tokens staked through the Tenderizer\\n     * @param from the account that unstaked\\n     * @param node the node in the underlying token from which tokens are unstaked\\n     * @param amount the amount unstaked\\n     */\\n    event Unstake(address indexed from, address indexed node, uint256 amount, uint256 unstakeLockID);\\n\\n    /**\\n     * @notice Withdraw gets emitted when an account withdraws tokens that have been\\n     * succesfully unstaked and thus unlocked for withdrawal.\\n     * @param from the account withdrawing tokens\\n     * @param amount the amount being withdrawn\\n     * @param unstakeLockID the unstake lock ID being consumed\\n     */\\n    event Withdraw(address indexed from, uint256 amount, uint256 unstakeLockID);\\n\\n    /**\\n     * @notice RewardsClaimed gets emitted when the Tenderizer processes staking rewards (or slashing)\\n     * from the underlying protocol.\\n     * @param stakeDiff the stake difference since the last event, can be negative in case slashing occured\\n     * @param currentPrincipal TVL after claiming rewards\\n     * @param oldPrincipal TVL before claiming rewards\\n     */\\n    event RewardsClaimed(int256 stakeDiff, uint256 currentPrincipal, uint256 oldPrincipal);\\n\\n    /**\\n     * @notice ProtocolFeeCollected gets emitted when the treasury claims its outstanding\\n     * protocol fees.\\n     * @param amount the amount of fees claimed (in TenderTokens)\\n     */\\n    event ProtocolFeeCollected(uint256 amount);\\n\\n    /**\\n     * @notice LiquidityFeeCollected gets emitted when liquidity provider fees are moved to the TenderFarm.\\n     * @param amount the amount of fees moved for farming\\n     */\\n    event LiquidityFeeCollected(uint256 amount);\\n\\n    /**\\n     * @notice GovernanceUpdate gets emitted when a parameter on the Tenderizer gets updated.\\n     * @param param the parameter that got updated\\n     * @param oldValue oldValue of the parameter\\n      @param newValue newValue of the parameter\\n     */\\n    event GovernanceUpdate(string param, bytes oldValue, bytes newValue);\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer.\\n     * @param _amount amount deposited\\n     * @dev doesn't actually stakes the tokens but aggregates the balance in the tenderizer\\n     * awaiting to be staked.\\n     * @dev requires '_amount' to be approved by '_from'.\\n     */\\n    function deposit(uint256 _amount) external;\\n\\n    /**\\n     * @notice Deposit tokens in Tenderizer with permit.\\n     * @param _amount amount deposited\\n     * @param _deadline deadline for the permit\\n     * @param _v from ECDSA signature\\n     * @param _r from ECDSA signature\\n     * @param _s from ECDSA signature\\n     * @dev doesn't actually stakes the tokens but aggregates the balance in the tenderizer\\n     * awaiting to be staked.\\n     * @dev requires '_amount' to be approved by '_from'.\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external;\\n\\n    /**\\n     * @notice Stake '_amount' of tokens.\\n     * @param _amount amount to stake\\n     * @dev Only callable by Gov.\\n     */\\n    function stake(uint256 _amount) external;\\n\\n    /**\\n     * @notice Unstake '_amount' of tokens from '_account'.\\n     * @param _amount amount to unstake\\n     * @return unstakeLockID unstake lockID generated for unstake\\n     * @dev unstake from the default address.\\n     * @dev If '_amount' is 0, unstake the entire amount staked towards _account.\\n     */\\n    function unstake(uint256 _amount) external returns (uint256 unstakeLockID);\\n\\n    /**\\n     * @notice RescueUnstake unstakes all tokens from underlying protocol\\n     * @return unstakeLockID unstake lockID generated for unstake\\n     * @dev Used to rescue all staked funds.\\n     */\\n    function rescueUnlock() external returns (uint256 unstakeLockID);\\n\\n    /**\\n     * @notice Withdraw '_amount' of tokens previously unstaked by '_account'.\\n     * @param _unstakeLockID ID for the lock to request the withdraw for\\n     * @dev If '_amount' isn't specified all unstake tokens by '_account' will be withdrawn.\\n     * @dev Requires '_account' to have unstaked prior to calling withdraw.\\n     */\\n    function withdraw(uint256 _unstakeLockID) external;\\n\\n    /**\\n     * @notice RescueWithdraw withdraws all tokens into the Tenderizer from the underlying protocol \\n     * after the unlock period ends\\n     * @dev To be called after rescueUnlock() with the unstakeLockID returned there.\\n     * @dev Process unlocks/withdrawals before rescueWithdraw for integrations with WithdrawPools.\\n     */\\n    function rescueWithdraw(uint256 _unstakeLockID) external;\\n\\n    /**\\n     * @notice Compound all the rewards and new deposits.\\n     * Claim staking rewards and earned fees for the underlying protocol and stake\\n     * any leftover token balance. Process Tender protocol fees if revenue is positive.\\n     */\\n    function claimRewards() external;\\n\\n    /**\\n     * @notice Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\\n     * @return totalStaked total amount staked by this Tenderizer\\n     */\\n    function totalStakedTokens() external view returns (uint256 totalStaked);\\n\\n    /**\\n     * @notice Returns the number of tenderTokens to be minted for amountIn deposit.\\n     * @return depositOut number of tokens staked for `amountIn`.\\n     * @dev used by controller to calculate tokens to be minted before depositing.\\n     * @dev to be used when there a delegation tax is deducted, for eg. in Graph.\\n     */\\n    function calcDepositOut(uint256 _amountIn) external returns (uint256 depositOut);\\n\\n    // Governance setter funtions\\n\\n    function setGov(address _gov) external;\\n\\n    function setNode(address _node) external;\\n\\n    function setSteak(IERC20 _steak) external;\\n\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external;\\n\\n    function setStakingContract(address _stakingContract) external;\\n\\n    function setTenderFarm(ITenderFarm _tenderFarm) external;\\n}\\n\",\"keccak256\":\"0xa0dde1b54de5e5ccf47c1a9225bdc84615086c67e7bc5fe4de4e45ec3764176b\",\"license\":\"MIT\"},\"contracts/tenderizer/ITotalStakedReader.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface ITotalStakedReader {\\n    /**\\n     * @notice Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\\n     * @return _totalStakedTokens total amount staked by this Tenderizer\\n     */\\n    function totalStakedTokens() external view returns (uint256 _totalStakedTokens);\\n}\\n\",\"keccak256\":\"0x134a07faf2487ca55c05288c5d09e611ab5f9fde0d0635c790055bd28ffc5e0c\",\"license\":\"MIT\"},\"contracts/tenderizer/Tenderizer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./ITenderizer.sol\\\";\\nimport \\\"../token/ITenderToken.sol\\\";\\nimport { ITenderSwapFactory, ITenderSwap } from \\\"../tenderswap/TenderSwapFactory.sol\\\";\\nimport \\\"../tenderfarm/TenderFarmFactory.sol\\\";\\nimport \\\"../libs/MathUtils.sol\\\";\\nimport \\\"../helpers/SelfPermit.sol\\\";\\n\\n/**\\n * @title Tenderizer is the base contract to be implemented.\\n * @notice Tenderizer is responsible for all Protocol interactions (staking, unstaking, claiming rewards)\\n * while also keeping track of user depsotis/withdrawals and protocol fees.\\n * @dev New implementations are required to inherit this contract and override any required internal functions.\\n */\\nabstract contract Tenderizer is Initializable, ITenderizer, SelfPermit {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant private MAX_FEE = 5 * 10**20;\\n\\n    IERC20 public steak;\\n    ITenderToken public tenderToken;\\n    ITenderFarm public tenderFarm;\\n    ITenderSwap public tenderSwap;\\n\\n    address public node;\\n\\n    uint256 public protocolFee;\\n    uint256 public liquidityFee;\\n    uint256 public currentPrincipal; // Principal since last claiming earnings\\n\\n    address public gov;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov);\\n        _;\\n    }\\n\\n    function _initialize(\\n        IERC20 _steak,\\n        string memory _symbol,\\n        address _node,\\n        uint256 _protocolFee,\\n        uint256 _liquidityFee,\\n        ITenderToken _tenderTokenTarget,\\n        TenderFarmFactory _tenderFarmFactory,\\n        ITenderSwapFactory _tenderSwapFactory\\n    ) internal initializer {\\n        steak = _steak;\\n        node = _node;\\n        protocolFee = _protocolFee;\\n        liquidityFee = _liquidityFee;\\n\\n        gov = msg.sender;\\n\\n        // Clone TenderToken\\n        ITenderToken tenderToken_ = ITenderToken(Clones.clone(address(_tenderTokenTarget)));\\n        string memory tenderTokenSymbol = string(abi.encodePacked(\\\"t\\\", _symbol));\\n        require(tenderToken_.initialize(_symbol, _symbol, ITotalStakedReader(address(this))), \\\"FAIL_INIT_TENDERTOKEN\\\");\\n        tenderToken = tenderToken_;\\n\\n        tenderSwap = _tenderSwapFactory.deploy(\\n            ITenderSwapFactory.Config({\\n                token0: IERC20(address(tenderToken_)),\\n                token1: _steak,\\n                lpTokenName: string(abi.encodePacked(tenderTokenSymbol, \\\"-\\\", _symbol, \\\" Swap Token\\\")),\\n                lpTokenSymbol: string(abi.encodePacked(tenderTokenSymbol, \\\"-\\\", _symbol, \\\"-SWAP\\\"))\\n            })\\n        );\\n\\n        // Transfer ownership from tenderizer to deployer so params an be changed directly\\n        // and no additional functions are needed on the tenderizer\\n        tenderSwap.transferOwnership(msg.sender);\\n\\n        tenderFarm = _tenderFarmFactory.deploy(\\n            IERC20(address(tenderSwap.lpToken())),\\n            tenderToken_,\\n            ITenderizer(address(this))\\n        );\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function deposit(uint256 _amount) external override {\\n        _depositHook(msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        selfPermit(address(steak), _amount, _deadline, _v, _r, _s);\\n\\n        _depositHook(msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function unstake(uint256 _amount) external override returns (uint256) {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        require(tenderToken.burn(msg.sender, _amount), \\\"TENDER_BURN_FAILED\\\");\\n        \\n        // Execute state updates to pending withdrawals\\n        // Unstake tokens\\n        uint256 id = _unstake(msg.sender, node, _amount);\\n        currentPrincipal -= _amount;\\n        return id;\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function rescueUnlock() external override onlyGov returns (uint256) {\\n        return _unstake(address(this), node, currentPrincipal);\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function withdraw(uint256 _unstakeLockID) external override {\\n        // Execute state updates to pending withdrawals\\n        // Transfer tokens to _account\\n        _withdraw(msg.sender, _unstakeLockID);\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function rescueWithdraw(uint256 _unstakeLockID) external override onlyGov {\\n        _withdraw(address(this), _unstakeLockID);\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function claimRewards() external override {\\n        _claimRewards();\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function totalStakedTokens() external view override returns (uint256) {\\n        return _totalStakedTokens();\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function stake(uint256 _amount) external override onlyGov {\\n        // Execute state updates\\n        // approve pendingTokens for staking\\n        // Stake tokens\\n        _stake(_amount);\\n    }\\n\\n    function setGov(address _gov) external virtual override onlyGov {\\n        emit GovernanceUpdate(\\\"GOV\\\", abi.encode(gov), abi.encode(_gov));\\n        gov = _gov;\\n    }\\n\\n    function setNode(address _node) external virtual override onlyGov {\\n        emit GovernanceUpdate(\\\"NODE\\\", abi.encode(node), abi.encode(_node));\\n        node = _node;\\n    }\\n\\n    function setSteak(IERC20 _steak) external virtual override onlyGov {\\n        emit GovernanceUpdate(\\\"STEAK\\\", abi.encode(steak), abi.encode(_steak));\\n        steak = _steak;\\n    }\\n\\n    function setProtocolFee(uint256 _protocolFee) external virtual override onlyGov {\\n        require(_protocolFee <= MAX_FEE, \\\"FEE_EXCEEDS_MAX\\\");\\n        emit GovernanceUpdate(\\\"PROTOCOL_FEE\\\", abi.encode(protocolFee), abi.encode(_protocolFee));\\n        protocolFee = _protocolFee;\\n    }\\n\\n    function setLiquidityFee(uint256 _liquidityFee) external virtual override onlyGov {\\n        require(_liquidityFee <= MAX_FEE, \\\"FEE_EXCEEDS_MAX\\\");\\n        emit GovernanceUpdate(\\\"LIQUIDITY_FEE\\\", abi.encode(liquidityFee), abi.encode(_liquidityFee));\\n        liquidityFee = _liquidityFee;\\n    }\\n\\n    function setStakingContract(address _stakingContract) external override onlyGov {\\n        _setStakingContract(_stakingContract);\\n    }\\n\\n    function setTenderFarm(ITenderFarm _tenderFarm) external override onlyGov {\\n        emit GovernanceUpdate(\\\"TENDERFARM\\\", abi.encode(tenderFarm), abi.encode(_tenderFarm));\\n        tenderFarm = _tenderFarm;\\n    }\\n\\n    /// @inheritdoc ITenderizer\\n    function calcDepositOut(uint256 _amountIn) external view override returns (uint256) {\\n        return _calcDepositOut(_amountIn);\\n    }\\n\\n    // Internal functions\\n\\n    function _depositHook(address _for, uint256 _amount) internal {\\n        require(_amount > 0, \\\"ZERO_AMOUNT\\\");\\n\\n        // Calculate tenderTokens to be minted\\n        uint256 amountOut = _calcDepositOut(_amount);\\n\\n        // mint tenderTokens\\n        require(tenderToken.mint(_for, amountOut), \\\"TENDER_MINT_FAILED\\\");\\n\\n        // Transfer tokens to tenderizer\\n        steak.safeTransferFrom(_for, address(this), _amount);\\n\\n        _deposit(_for, _amount);\\n    }\\n\\n    function _calcDepositOut(uint256 _amountIn) internal view virtual returns (uint256) {\\n        return _amountIn;\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal virtual;\\n\\n    function _stake(uint256 _amount) internal virtual;\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal virtual returns (uint256 unstakeLockID);\\n\\n    function _withdraw(address _account, uint256 _unstakeLockID) internal virtual;\\n\\n    function _claimRewards() internal virtual {\\n        _claimSecondaryRewards();\\n\\n        int256 rewards = _processNewStake();\\n\\n        if (rewards > 0) {\\n            uint256 rewards_ = uint256(rewards);\\n            uint256 pFees = _calculateFees(rewards_, protocolFee);\\n            uint256 lFees = _calculateFees(rewards_, liquidityFee);\\n            currentPrincipal += (rewards_ - pFees - lFees);\\n\\n            _collectFees(pFees);\\n            _collectLiquidityFees(lFees);\\n        } else if (rewards < 0) {\\n            uint256 rewards_ = uint256(-rewards);\\n            currentPrincipal -= rewards_;\\n        }\\n\\n        _stake(steak.balanceOf(address(this)));\\n    }\\n\\n    function _claimSecondaryRewards() internal virtual;\\n\\n    function _processNewStake() internal virtual returns (int256 rewards);\\n\\n    function _collectFees(uint256 fees) internal virtual {\\n        tenderToken.mint(gov, fees);\\n        currentPrincipal += fees;\\n        emit ProtocolFeeCollected(fees);\\n    }\\n\\n    function _collectLiquidityFees(uint256 liquidityFees) internal virtual {\\n        // Don't transfer liquidity provider fees if there is no liquidity being farmed\\n        if (tenderFarm.nextTotalStake() <= 0) return;\\n\\n        uint256 balBefore = tenderToken.balanceOf(address(this));\\n        tenderToken.mint(address(this), liquidityFees);\\n        currentPrincipal += liquidityFees;\\n        uint256 balAfter = tenderToken.balanceOf(address(this));\\n        uint256 stakeDiff = balAfter-balBefore;\\n        // minting sometimes generates a little less, due to share calculation\\n        // hence using the balance to transfer here\\n        tenderToken.approve(address(tenderFarm), stakeDiff);\\n        tenderFarm.addRewards(stakeDiff);\\n        emit LiquidityFeeCollected(stakeDiff);\\n    }\\n\\n    function _calculateFees(uint256 _rewards, uint256 _feePerc) internal pure returns (uint256 fees) {\\n        return MathUtils.percOf(_rewards, _feePerc);\\n    }\\n\\n    function _totalStakedTokens() internal view virtual returns (uint256) {\\n        return currentPrincipal;\\n    }\\n\\n    function _setStakingContract(address _stakingContract) internal virtual;\\n}\\n\",\"keccak256\":\"0x22e4c3419a41d6f6439d9744d0f0d605b7fe0bba1e225737b889481af030cfe6\",\"license\":\"MIT\"},\"contracts/tenderizer/WithdrawalLocks.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../libs/MathUtils.sol\\\";\\npragma solidity 0.8.4;\\n\\n/**\\n * @notice WithdrawalLocks are used to \\\"proxy\\\" user unlocks/withdrawals to the underlying contracts\\n */\\nlibrary WithdrawalLocks {\\n\\n    struct WithdrawLock {\\n        uint256 amount;\\n        address account;\\n    }\\n\\n    struct Locks {\\n        mapping(uint256 => WithdrawLock) withdrawals;\\n        uint256 nextWithdrawLockID;\\n    }\\n\\n    function unlock(\\n        Locks storage _lock,\\n        address _receiver,\\n        uint256 _amount\\n    ) internal returns (uint256 withdrawalLockID) {\\n        withdrawalLockID = _lock.nextWithdrawLockID;\\n        \\n        _lock.nextWithdrawLockID = withdrawalLockID + 1;\\n        \\n        _lock.withdrawals[withdrawalLockID] = WithdrawLock({ amount: _amount, account: _receiver });\\n    }\\n\\n    function withdraw(\\n        Locks storage _lock,\\n        address _account,\\n        uint256 _withdrawalLockID\\n    ) internal returns (uint256 amount) {\\n        WithdrawLock storage lock = _lock.withdrawals[_withdrawalLockID];\\n        address account = lock.account;\\n        amount = lock.amount;\\n        \\n        require(account == _account, \\\"ACCOUNT_MISTMATCH\\\");\\n        \\n        delete _lock.withdrawals[_withdrawalLockID];\\n    }\\n}\\n\",\"keccak256\":\"0x1d6f956e41d5f12b7a90ae6be8beb0d7da6a9c6a88d335ecdc639555db393047\",\"license\":\"MIT\"},\"contracts/tenderizer/integrations/matic/IMatic.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n// note this contract interface is only for stakeManager use\\ninterface IMatic {\\n    function owner() external view returns (address);\\n\\n    function restake() external;\\n\\n    function buyVoucher(uint256 _amount, uint256 _minSharesToMint) external;\\n\\n    function sellVoucher_new(uint256 claimAmount, uint256 maximumSharesToBurn) external;\\n\\n    function unstakeClaimTokens_new(uint256 unbondNonce) external;\\n\\n    function exchangeRate() external view returns (uint256);\\n\\n    function validatorId() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9d2b792af11c260dcacb8558cd0d8e183407b38e8ca7eb9fbfe379b1d6d4eb41\",\"license\":\"MIT\"},\"contracts/tenderizer/integrations/matic/Matic.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../../libs/MathUtils.sol\\\";\\n\\nimport \\\"../../Tenderizer.sol\\\";\\nimport \\\"./IMatic.sol\\\";\\n\\nimport \\\"../../WithdrawalLocks.sol\\\";\\n\\nimport { ITenderSwapFactory } from \\\"../../../tenderswap/TenderSwapFactory.sol\\\";\\n\\ncontract Matic is Tenderizer {\\n    using WithdrawalLocks for WithdrawalLocks.Locks;\\n    using SafeERC20 for IERC20;\\n\\n    // Matic exchange rate precision\\n    uint256 constant EXCHANGE_RATE_PRECISION = 100; // For Validator ID < 8\\n    uint256 constant EXCHANGE_RATE_PRECISION_HIGH = 10**29; // For Validator ID >= 8\\n\\n    // Matic stakeManager address\\n    address maticStakeManager;\\n\\n    // Matic ValidatorShare\\n    IMatic matic;\\n\\n    WithdrawalLocks.Locks withdrawLocks;\\n\\n    function initialize(\\n        IERC20 _steak,\\n        string calldata _symbol,\\n        address _matic,\\n        address _node,\\n        uint256 _protocolFee,\\n        uint256 _liquidityFee,\\n        ITenderToken _tenderTokenTarget,\\n        TenderFarmFactory _tenderFarmFactory,\\n        ITenderSwapFactory _tenderSwapFactory\\n    ) external {\\n        Tenderizer._initialize(\\n            _steak,\\n            _symbol,\\n            _node,\\n            _protocolFee,\\n            _liquidityFee,\\n            _tenderTokenTarget,\\n            _tenderFarmFactory,\\n            _tenderSwapFactory\\n        );\\n        maticStakeManager = _matic;\\n        matic = IMatic(_node);\\n    }\\n\\n    function setNode(address _node) external override onlyGov {\\n        require(_node != address(0), \\\"ZERO_ADDRESS\\\");\\n        emit GovernanceUpdate(\\\"NODE\\\", abi.encode(node), abi.encode(_node));\\n        node = _node;\\n        matic = IMatic(_node);\\n    }\\n\\n    function _deposit(address _from, uint256 _amount) internal override {\\n        currentPrincipal += _amount;\\n\\n        emit Deposit(_from, _amount);\\n    }\\n\\n    function _stake(uint256 _amount) internal override {\\n        uint256 amount = _amount;\\n\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        // approve tokens\\n        steak.safeIncreaseAllowance(maticStakeManager, amount);\\n\\n        // stake tokens\\n        uint256 min = ((amount * _getExchangeRatePrecision(matic)) / _getExchangeRate(matic)) - 1;\\n        matic.buyVoucher(amount, min);\\n\\n        emit Stake(address(matic), amount);\\n    }\\n\\n    function _unstake(\\n        address _account,\\n        address _node,\\n        uint256 _amount\\n    ) internal override returns (uint256 withdrawalLockID) {\\n        uint256 amount = _amount;\\n\\n        // use validator share contract for matic\\n        IMatic matic_ = IMatic(_node);\\n\\n        uint256 exhangeRatePrecision = _getExchangeRatePrecision(matic_);\\n        uint256 fxRate = _getExchangeRate(matic_);\\n\\n        // Unbond tokens\\n        uint256 max = ((amount * exhangeRatePrecision) / fxRate) + 1;\\n        matic_.sellVoucher_new(amount, max);\\n\\n        // Manage Matic unbonding locks\\n        withdrawalLockID = withdrawLocks.unlock(_account, amount);\\n\\n        emit Unstake(_account, address(matic_), amount, withdrawalLockID);\\n    }\\n\\n    function _withdraw(address _account, uint256 _withdrawalID) internal override {\\n        withdrawLocks.withdraw(_account, _withdrawalID);\\n\\n        // Check for any slashes during undelegation\\n        uint256 balBefore = steak.balanceOf(address(this));\\n        matic.unstakeClaimTokens_new(_withdrawalID);\\n        uint256 balAfter = steak.balanceOf(address(this));\\n        require(balAfter >= balBefore, \\\"ZERO_AMOUNT\\\");\\n        uint256 amount = balAfter - balBefore;\\n\\n        // Transfer undelegated amount to _account\\n        steak.safeTransfer(_account, amount);\\n\\n        emit Withdraw(_account, amount, _withdrawalID);\\n    }\\n\\n    function _claimRewards() internal override {\\n        // restake to compound rewards\\n        try matic.restake() {} catch {}\\n\\n        Tenderizer._claimRewards();\\n    }\\n\\n    function _claimSecondaryRewards() internal override {}\\n\\n    function _processNewStake() internal override returns (int256 rewards) {\\n        \\n        uint256 shares = matic.balanceOf(address(this));\\n        uint256 stake = (shares * _getExchangeRate(matic)) / _getExchangeRatePrecision(matic);\\n\\n        uint256 currentPrincipal_ = currentPrincipal;\\n        // adjust current token balance for potential protocol specific taxes or staking fees\\n        uint256 currentBal = _calcDepositOut(steak.balanceOf(address(this)));\\n\\n        // calculate the new total stake\\n        stake += currentBal;\\n\\n        rewards = int256(stake) - int256(currentPrincipal_); \\n\\n        emit RewardsClaimed(rewards, stake, currentPrincipal_);\\n    }\\n\\n    function _setStakingContract(address _stakingContract) internal override {\\n        emit GovernanceUpdate(\\n            \\\"STAKING_CONTRACT\\\",\\n            abi.encode(maticStakeManager),\\n            abi.encode(_stakingContract)\\n        );\\n        maticStakeManager = _stakingContract;\\n    }\\n\\n    function _getExchangeRatePrecision(IMatic _matic) internal view returns (uint256) {\\n        return _matic.validatorId() < 8 ? EXCHANGE_RATE_PRECISION : EXCHANGE_RATE_PRECISION_HIGH;\\n    }\\n\\n    function _getExchangeRate(IMatic _matic) internal view returns (uint256) {\\n        uint256 rate = _matic.exchangeRate();\\n        return rate == 0 ? 1 : rate;\\n    }\\n}\\n\",\"keccak256\":\"0x5f1f3036d04dbe1cb2ab82d858bef610abe0af13df91a0aa4048a540217765af\",\"license\":\"MIT\"},\"contracts/tenderswap/ITenderSwap.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./LiquidityPoolToken.sol\\\";\\n\\npragma solidity 0.8.4;\\n\\n/**\\n * @title TenderSwap\\n * @dev TenderSwap is a light-weight StableSwap implementation for two assets.\\n * See the Curve StableSwap paper for more details (https://curve.fi/files/stableswap-paper.pdf).\\n * that trade 1:1 with eachother (e.g. USD stablecoins or tenderToken derivatives vs their underlying assets).\\n * It supports Elastic Supply ERC20 tokens, which are tokens of which the balances can change\\n * as the total supply of the token 'rebases'.\\n */\\n\\ninterface ITenderSwap {\\n    /*** EVENTS ***/\\n\\n    // events replicated from SwapUtils to make the ABI easier for dumb\\n    // clients\\n\\n    /**\\n     * @notice Swap gets emitted when an accounts exchanges tokens.\\n     * @param buyer address of the account initiating the swap\\n     * @param tokenSold address of the swapped token\\n     * @param amountSold amount of tokens swapped\\n     * @param amountReceived amount of tokens received in exchange\\n     */\\n    event Swap(address indexed buyer, IERC20 tokenSold, uint256 amountSold, uint256 amountReceived);\\n\\n    /**\\n     * @notice AddLiquidity gets emitted when liquidity is added to the pool.\\n     * @param provider address of the account providing liquidity\\n     * @param tokenAmounts array of token amounts provided corresponding to pool cardinality of [token0, token1]\\n     * @param fees fees deducted for each of the tokens added corresponding to pool cardinality of [token0, token1]\\n     * @param invariant pool invariant after adding liquidity\\n     * @param lpTokenSupply the lpToken supply after minting\\n     */\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n\\n    /**\\n     * @notice RemoveLiquidity gets emitted when liquidity for both tokens \\n     * is removed from the pool.\\n     * @param provider address of the account removing liquidity\\n     * @param tokenAmounts array of token amounts removed corresponding to pool cardinality of [token0, token1]\\n     * @param lpTokenSupply total supply of liquidity pool token after removing liquidity\\n     */\\n    event RemoveLiquidity(address indexed provider, uint256[2] tokenAmounts, uint256 lpTokenSupply);\\n\\n    /**\\n     * @notice RemoveLiquidityOne gets emitted when single-sided liquidity is removed \\n     * @param provider address of the account removing liquidity\\n     * @param lpTokenAmount amount of liquidity pool tokens burnt\\n     * @param lpTokenSupply total supply of liquidity pool token after removing liquidity\\n\\n     * @param tokenReceived address of the token for which liquidity was removed\\n     * @param receivedAmount amount of tokens received\\n     */\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        uint256 lpTokenAmount,\\n        uint256 lpTokenSupply,\\n        IERC20 tokenReceived,\\n        uint256 receivedAmount\\n    );\\n\\n    /**\\n     * @notice RemoveLiquidityImbalance gets emitted when liquidity is removed weighted differently than the\\n     * pool's current balances.\\n     * with different weights than that of the pool.\\n     * @param provider address of the the account removing liquidity imbalanced\\n     * @param tokenAmounts array of amounts of tokens being removed corresponding \\n     * to pool cardinality of [token0, token1]\\n     * @param fees fees for each of the tokens removed corresponding to pool cardinality of [token0, token1]\\n     * @param invariant pool invariant after removing liquidity\\n     * @param lpTokenSupply total supply of liquidity pool token after removing liquidity\\n     */\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[2] tokenAmounts,\\n        uint256[2] fees,\\n        uint256 invariant,\\n        uint256 lpTokenSupply\\n    );\\n\\n    /**\\n     * @notice NewAdminFee gets emitted when the admin fee is updated.\\n     * @param newAdminFee admin fee after update\\n     */\\n    event NewAdminFee(uint256 newAdminFee);\\n\\n    /**\\n     * @notice NewSwapFee gets emitted when the swap fee is updated.\\n     * @param newSwapFee swap fee after update\\n     */\\n    event NewSwapFee(uint256 newSwapFee);\\n\\n    /**\\n     * @notice RampA gets emitted when A has started ramping up.\\n     * @param oldA initial A value\\n     * @param newA target value of A to ramp up to\\n     * @param initialTime ramp start timestamp\\n     * @param futureTime ramp end timestamp\\n     */\\n    event RampA(uint256 oldA, uint256 newA, uint256 initialTime, uint256 futureTime);\\n\\n    /**\\n     * @notice StopRampA gets emitted when ramping A is stopped manually\\n     * @param currentA current value of A\\n     * @param time timestamp of when ramp is stopped\\n     */\\n    event StopRampA(uint256 currentA, uint256 time);\\n\\n    /**\\n     * @notice Initializes this Swap contract with the given parameters.\\n     * This will also clone a LPToken contract that represents users'\\n     * LP positions. The owner of LPToken will be this contract - which means\\n     * only this contract is allowed to mint/burn tokens.\\n     *\\n     * @param _token0 First token in the pool\\n     * @param _token1 Second token in the pool\\n     * @param lpTokenName the long-form name of the token to be deployed\\n     * @param lpTokenSymbol the short symbol for the token to be deployed\\n     * @param _a the amplification coefficient * n * (n - 1). See the\\n     * StableSwap paper for details\\n     * @param _fee default swap fee to be initialized with\\n     * @param _adminFee default adminFee to be initialized with\\n     * @param lpTokenTargetAddress the address of an existing LiquidityPoolToken contract to use as a target\\n     * @return success true is successfully initialized\\n     */\\n    function initialize(\\n        IERC20 _token0,\\n        IERC20 _token1,\\n        string memory lpTokenName,\\n        string memory lpTokenSymbol,\\n        uint256 _a,\\n        uint256 _fee,\\n        uint256 _adminFee,\\n        LiquidityPoolToken lpTokenTargetAddress\\n    ) external returns (bool success);\\n\\n    /*** VIEW FUNCTIONS ***/\\n    /**\\n     * @notice Returns the liquidity pool token contract.\\n     * @return lpTokenContract Liquidity pool token contract.\\n     */\\n    function lpToken() external view returns (LiquidityPoolToken lpTokenContract);\\n\\n    /**\\n     * @notice Return A, the amplification coefficient * n * (n - 1)\\n     * @dev See the StableSwap paper for details\\n     * @return a the amplifaction coefficient\\n     */\\n    function getA() external view returns (uint256 a);\\n\\n    /**\\n     * @notice Return A in its raw precision form\\n     * @dev See the StableSwap paper for details\\n     * @return aPrecise A parameter in its raw precision form\\n     */\\n    function getAPrecise() external view returns (uint256 aPrecise);\\n\\n    /**\\n     * @notice Returns the contract address for token0\\n     * @dev EVM return type is IERC20\\n     * @return token0 contract address\\n     */\\n    function getToken0() external view returns (IERC20 token0);\\n\\n    /**\\n     * @notice Returns the contract address for token1\\n     * @dev EVM return type is IERC20\\n     * @return token1 contract address\\n     */\\n    function getToken1() external view returns (IERC20 token1);\\n\\n    /**\\n     * @notice Return current balance of token0 (tender) in the pool\\n     * @return token0Balance current balance of the pooled tendertoken\\n     */\\n    function getToken0Balance() external view returns (uint256 token0Balance);\\n\\n    /**\\n     * @notice Return current balance of token1 (underlying) in the pool\\n     * @return token1Balance current balance of the pooled underlying token\\n     */\\n    function getToken1Balance() external view returns (uint256 token1Balance);\\n\\n    /**\\n     * @notice Get the override price, to help calculate profit\\n     * @return virtualPrice the override price, scaled to the POOL_PRECISION_DECIMALS\\n     */\\n    function getVirtualPrice() external view returns (uint256 virtualPrice);\\n\\n    /**\\n     * @notice Calculate amount of tokens you receive on swap\\n     * @param _tokenFrom the token the user wants to sell\\n     * @param _dx the amount of tokens the user wants to sell. If the token charges\\n     * a fee on transfers, use the amount that gets transferred after the fee.\\n     * @return tokensToReceive amount of tokens the user will receive\\n     */\\n    function calculateSwap(IERC20 _tokenFrom, uint256 _dx) external view returns (uint256 tokensToReceive);\\n\\n    /**\\n     * @notice A simple method to calculate amount of each underlying\\n     * tokens that is returned upon burning given amount of LP tokens\\n     * @param amount the amount of LP tokens that would be burned on withdrawal\\n     * @return tokensToReceive array of token balances that the user will receive\\n     */\\n    function calculateRemoveLiquidity(uint256 amount) external view returns (uint256[2] memory tokensToReceive);\\n\\n    /**\\n     * @notice Calculate the amount of underlying token available to withdraw\\n     * when withdrawing via only single token\\n     * @param tokenAmount the amount of LP token to burn\\n     * @param tokenReceive the token to receive\\n     * @return tokensToReceive calculated amount of underlying token to be received.\\n     * available to withdraw\\n     */\\n    function calculateRemoveLiquidityOneToken(uint256 tokenAmount, IERC20 tokenReceive)\\n        external\\n        view\\n        returns (uint256 tokensToReceive);\\n\\n    /**\\n     * @notice A simple method to calculate prices from deposits or\\n     * withdrawals, excluding fees but including slippage. This is\\n     * helpful as an input into the various \\\"min\\\" parameters on calls\\n     * to fight front-running\\n     *\\n     * @dev This shouldn't be used outside frontends for user estimates.\\n     *\\n     * @param amounts an array of token amounts to deposit or withdrawal,\\n     * corresponding to pool cardinality of [token0, token1]. The amount should be in each\\n     * pooled token's native precision.\\n     * @param deposit whether this is a deposit or a withdrawal\\n     * @return tokensToReceive token amount the user will receive\\n     */\\n    function calculateTokenAmount(uint256[] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256 tokensToReceive);\\n\\n    /*** POOL FUNCTIONALITY ***/\\n\\n    /**\\n     * @notice Swap two tokens using this pool\\n     * @dev revert is token being sold is not in the pool.\\n     * @param _tokenFrom the token the user wants to sell\\n     * @param _dx the amount of tokens the user wants to swap from\\n     * @param _minDy the min amount the user would like to receive, or revert\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return _dy amount of tokens received\\n     */\\n    function swap(\\n        IERC20 _tokenFrom,\\n        uint256 _dx,\\n        uint256 _minDy,\\n        uint256 _deadline\\n    ) external returns (uint256 _dy);\\n\\n    /**\\n     * @notice Add liquidity to the pool with the given amounts of tokens\\n     * @param _amounts the amounts of each token to add, in their native precision\\n     *          according to the cardinality of the pool [token0, token1]\\n     * @param _minToMint the minimum LP tokens adding this amount of liquidity\\n     * should mint, otherwise revert. Handy for front-running mitigation\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return lpMinted amount of LP token user minted and received\\n     */\\n    function addLiquidity(\\n        uint256[2] calldata _amounts,\\n        uint256 _minToMint,\\n        uint256 _deadline\\n    ) external returns (uint256 lpMinted);\\n\\n    /**\\n     * @notice Burn LP tokens to remove liquidity from the pool.\\n     * @dev Liquidity can always be removed, even when the pool is paused.\\n     * @param amount the amount of LP tokens to burn\\n     * @param minAmounts the minimum amounts of each token in the pool\\n     *        acceptable for this burn. Useful as a front-running mitigation\\n     *        according to the cardinality of the pool [token0, token1]\\n     * @param deadline latest timestamp to accept this transaction\\n     * @return tokensReceived is the amounts of tokens user received\\n     */\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256[2] calldata minAmounts,\\n        uint256 deadline\\n    ) external returns (uint256[2] memory tokensReceived);\\n\\n    /**\\n     * @notice Remove liquidity from the pool all in one token.\\n     * @param _tokenAmount the amount of the token you want to receive\\n     * @param _tokenReceive the  token you want to receive\\n     * @param _minAmount the minimum amount to withdraw, otherwise revert\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return tokensReceived amount of chosen token user received\\n     */\\n    function removeLiquidityOneToken(\\n        uint256 _tokenAmount,\\n        IERC20 _tokenReceive,\\n        uint256 _minAmount,\\n        uint256 _deadline\\n    ) external returns (uint256 tokensReceived);\\n\\n    /**\\n     * @notice Remove liquidity from the pool, weighted differently than the\\n     * pool's current balances.\\n     * @param _amounts how much of each token to withdraw\\n     * @param _maxBurnAmount the max LP token provider is willing to pay to\\n     * remove liquidity. Useful as a front-running mitigation.\\n     * @param _deadline latest timestamp to accept this transaction\\n     * @return lpBurned amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        uint256[2] calldata _amounts,\\n        uint256 _maxBurnAmount,\\n        uint256 _deadline\\n    ) external returns (uint256 lpBurned);\\n\\n    /*** ADMIN FUNCTIONALITY ***/\\n    /**\\n     * @notice Update the admin fee. Admin fee takes portion of the swap fee.\\n     * @param newAdminFee new admin fee to be applied on future transactions\\n     */\\n    function setAdminFee(uint256 newAdminFee) external;\\n\\n    /**\\n     * @notice Update the swap fee to be applied on swaps\\n     * @param newSwapFee new swap fee to be applied on future transactions\\n     */\\n    function setSwapFee(uint256 newSwapFee) external;\\n\\n    /**\\n     * @notice Start ramping up or down A parameter towards given futureA and futureTime\\n     * Checks if the change is too rapid, and commits the new A value only when it falls under\\n     * the limit range.\\n     * @param futureA the new A to ramp towards\\n     * @param futureTime timestamp when the new A should be reached\\n     */\\n    function rampA(uint256 futureA, uint256 futureTime) external;\\n\\n    /**\\n     * @notice Stop ramping A immediately. Reverts if ramp A is already stopped.\\n     */\\n    function stopRampA() external;\\n\\n    /**\\n     * @notice Changes the owner of the contract\\n     * @param _newOwner address of the new owner\\n     */\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0xf468d8c7cecfdbe5afc3b3cf8facfb0a8fa82f9c6a9e6287fc5f83edf993d9a0\",\"license\":\"MIT\"},\"contracts/tenderswap/LiquidityPoolToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\\\";\\n\\ncontract LiquidityPoolToken is OwnableUpgradeable, ERC20BurnableUpgradeable, ERC20PermitUpgradeable {\\n    /**\\n     * @notice Initializes this LPToken contract with the given name and symbol\\n     * @dev The caller of this function will become the owner. A Swap contract should call this\\n     * in its initializer function.\\n     * @param name name of this token\\n     * @param symbol symbol of this token\\n     */\\n    function initialize(string memory name, string memory symbol) external initializer returns (bool) {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name, symbol);\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n        __ERC20Permit_init_unchained(name);\\n        __Ownable_init_unchained();\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Mints the given amount of LPToken to the recipient.\\n     * @dev only owner can call this mint function.\\n     * @param recipient address of account to receive the tokens\\n     * @param amount amount of tokens to mint\\n     */\\n\\n    function mint(address recipient, uint256 amount) external onlyOwner {\\n        require(amount != 0, \\\"LPToken: cannot mint 0\\\");\\n        _mint(recipient, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x48df1192c11550b2c195c089f4d3138c598d7b92ff8cd1b12916b1e3ba517bc6\",\"license\":\"MIT\"},\"contracts/tenderswap/TenderSwapFactory.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./ITenderSwap.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ninterface ITenderSwapFactory {\\n    struct Config {\\n        IERC20 token0;\\n        IERC20 token1;\\n        string lpTokenName;\\n        string lpTokenSymbol; // e.g. tLPT-LPT-SWAP\\n    }\\n\\n    function deploy(Config calldata _config) external returns (ITenderSwap);\\n}\\n\\ncontract TenderSwapFactoryV1 is ITenderSwapFactory {\\n    event NewTenderSwap(\\n        ITenderSwap tenderSwap,\\n        string lpTokenName,\\n        string lpTokenSymbol,\\n        uint256 amplifier,\\n        uint256 fee,\\n        uint256 adminFee\\n    );\\n\\n    ITenderSwap immutable tenderSwapTarget;\\n    LiquidityPoolToken immutable lpTokenTarget;\\n    uint256 immutable amplifier;\\n    uint256 immutable fee;\\n    uint256 immutable adminFee;\\n\\n    constructor(\\n        ITenderSwap _tenderSwapTarget,\\n        LiquidityPoolToken _lpTokenTarget,\\n        uint256 _amplifier,\\n        uint256 _fee,\\n        uint256 _adminFee\\n    ) {\\n        tenderSwapTarget = _tenderSwapTarget;\\n        lpTokenTarget = _lpTokenTarget;\\n        amplifier = _amplifier;\\n        fee = _fee;\\n        adminFee = _adminFee;\\n    }\\n\\n    function deploy(Config calldata _config) external override returns (ITenderSwap tenderSwap) {\\n        tenderSwap = ITenderSwap(Clones.clone(address(tenderSwapTarget)));\\n\\n        require(\\n            tenderSwap.initialize(\\n                _config.token0,\\n                _config.token1,\\n                _config.lpTokenName,\\n                _config.lpTokenSymbol,\\n                amplifier,\\n                fee,\\n                adminFee,\\n                lpTokenTarget\\n            ),\\n            \\\"FAIL_INIT_TENDERSWAP\\\"\\n        );\\n\\n        tenderSwap.transferOwnership(msg.sender);\\n\\n        emit NewTenderSwap(tenderSwap, _config.lpTokenName, _config.lpTokenSymbol, amplifier, fee, adminFee);\\n    }\\n}\\n\",\"keccak256\":\"0xc256f745c3e662b2094f811b694df2259811d9069e747d16d4e3915df8c597a8\",\"license\":\"MIT\"},\"contracts/token/ITenderToken.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"../tenderizer/ITotalStakedReader.sol\\\";\\n\\n/**\\n * @title Interest-bearing ERC20-like token for Tenderize protocol.\\n * @author Tenderize <info@tenderize.me>\\n * @dev TenderToken balances are dynamic and are calculated based on the accounts' shares\\n * and the total amount of Tokens controlled by the protocol. Account shares aren't\\n * normalized, so the contract also stores the sum of all shares to calculate\\n * each account's token balance which equals to:\\n *\\n * shares[account] * _getTotalPooledTokens() / _getTotalShares()\\n */\\ninterface ITenderToken {\\n    /**\\n     * @notice Initilize the TenderToken Contract\\n     * @param _name name of the token (steak)\\n     * @param _symbol symbol of the token (steak)\\n     * @param _stakedReader contract address implementing the ITotalStakedReader interface\\n     * @return a boolean value indicating whether the init succeeded.\\n     */\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        ITotalStakedReader _stakedReader\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice The number of decimals the TenderToken uses.\\n     * @return decimals the number of decimals for getting user representation of a token amount.\\n     */\\n    function decimals() external pure returns (uint8);\\n\\n    /**\\n     * @notice The total supply of tender tokens in existence.\\n     * @dev Always equals to `_getTotalPooledTokens()` since token amount\\n     * is pegged to the total amount of Tokens controlled by the protocol.\\n     * @return totalSupply total supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Total amount of underlying tokens controlled by the Tenderizer.\\n     * @dev The sum of all Tokens balances in the protocol, equals to the total supply of TenderToken.\\n     * @return totalPooledTokens total amount of pooled tokens\\n     */\\n    function getTotalPooledTokens() external view returns (uint256);\\n\\n    /**\\n     * @notice The total amount of shares in existence.\\n     * @dev The sum of all accounts' shares can be an arbitrary number, therefore\\n     * it is necessary to store it in order to calculate each account's relative share.\\n     * @return totalShares total amount of shares\\n     */\\n    function getTotalShares() external view returns (uint256);\\n\\n    /**\\n     * @notice the amount of tokens owned by the `_account`.\\n     * @dev Balances are dynamic and equal the `_account`'s share in the amount of the\\n        total Tokens controlled by the protocol. See `sharesOf`.\\n     * @param _account address of the account to check the balance for\\n     * @return balance token balance of `_account`\\n     */\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of shares owned by an account\\n     * @param _account address of the account\\n     * @return shares the amount of shares owned by `_account`.\\n     */\\n    function sharesOf(address _account) external view returns (uint256);\\n\\n    /**\\n     * @notice The remaining number of tokens that `_spender` is allowed to spend\\n     * behalf of `_owner` through `transferFrom`. This is zero by default.\\n     * @dev This value changes when `approve` or `transferFrom` is called.\\n     * @param _owner address that approved the allowance\\n     * @param _spender address that is allowed to spend the allowance\\n     * @return allowance amount '_spender' is allowed to spend from '_owner'\\n     */\\n    function allowance(address _owner, address _spender) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of shares that corresponds to `_tokens` protocol-controlled Tokens.\\n     * @param _tokens amount of tokens to calculate shares for\\n     * @return shares nominal amount of shares the tokens represent\\n     */\\n    function tokensToShares(uint256 _tokens) external view returns (uint256);\\n\\n    /**\\n     * @notice The amount of tokens that corresponds to `_shares` token shares.\\n     * @param _shares the amount of shares to calculate the amount of tokens for\\n     * @return tokens the amount of tokens represented by the shares\\n     */\\n    function sharesToTokens(uint256 _shares) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from the caller's account to the `_recipient` account.\\n     * @param _recipient address of the recipient\\n     * @param _amount amount of tokens to transfer\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Requirements:\\n     * - `_recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _amount amount of tokens to allow '_spender' to spend\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits an `Approval` event.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the zero address.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from `_sender` to `_recipient` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's allowance.\\n     * @param _sender address of the account to transfer tokens from\\n     * @param _recipient address of the recipient\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_sender` and `_recipient` cannot be the zero addresses.\\n     * - `_sender` must have a balance of at least `_amount`.\\n     * - the caller must have allowance for `_sender`'s tokens of at least `_amount`.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Atomically increases the allowance granted to `_spender` by the caller by `_addedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _addedValue amount to add to allowance\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool);\\n\\n    /**\\n     * @notice Atomically decreases the allowance granted to `_spender` by the caller by `_subtractedValue`.\\n     * @param _spender address of the spender allowed to approve tokens from caller\\n     * @param _subtractedValue amount to subtract from current allowance\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev This is an alternative to `approve` that can be used as a mitigation for problems described in:\\n     * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol#L42\\n     * @dev Emits an `Approval` event indicating the updated allowance.\\n     * @dev Requirements:\\n     * - `_spender` cannot be the zero address.\\n     * - `_spender` must have allowance for the caller of at least `_subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool);\\n\\n    /**\\n     * @notice Mints '_amount' of tokens for '_recipient'\\n     * @param _recipient address to mint tokens for\\n     * @param _amount amount to mint\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to create based on the specified '_amount'\\n     * and creates new shares rather than minting actual tokens\\n     * @dev '_recipient' should also deposit into Tenderizer\\n     * atomically to prevent diluation of existing particpants\\n     */\\n    function mint(address _recipient, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice Burns '_amount' of tokens from '_recipient'\\n     * @param _account address to burn the tokens from\\n     * @param _amount amount to burn\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Only callable by contract owner\\n     * @dev Calculates the amount of shares to destroy based on the specified '_amount'\\n     * and destroy shares rather than burning tokens\\n     * @dev '_recipient' should also withdraw from Tenderizer atomically\\n     */\\n    function burn(address _account, uint256 _amount) external returns (bool);\\n\\n    /**\\n     * @notice sets a TotalStakedReader to read the total staked tokens from\\n     * @param _stakedReader contract address implementing the ITotalStakedReader interface\\n     * @dev Only callable by contract owner.\\n     * @dev Used to determine TenderToken total supply.\\n     */\\n    function setTotalStakedReader(ITotalStakedReader _stakedReader) external;\\n}\\n\",\"keccak256\":\"0x8ded75ce98c4c0c99d5db628244e93f856900ed730b7164476f2b41da9d2a09d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061526e806100206000396000f3fe6080604052600436106101c25760003560e01c806398118cb4116100f7578063c21d5ab711610095578063ec6d80f611610064578063ec6d80f6146105e5578063f3995c671461060e578063f4d95a711461062a578063fbdfc96114610655576101c2565b8063c21d5ab71461054c578063c2e3140a14610575578063cfad57a214610591578063d70754ec146105ba576101c2565b8063a694fc3a116100d1578063a694fc3a146104a6578063afef75d2146104cf578063b0e21e8a146104f8578063b6b55f2514610523576101c2565b806398118cb4146104275780639dd373b914610452578063a26a546b1461047b576101c2565b80633ae73259116101645780636991bc771161013e5780636991bc771461036d5780636f19031514610396578063787dce3d146103c15780637cb0c275146103ea576101c2565b80633ae73259146102ee5780634a970be71461031957806351c669c014610342576101c2565b80632e1a7d4d116101a05780632e1a7d4d1461025a578063357bf15c1461028357806336a30f44146102ac578063372500ab146102d7576101c2565b806312d43a51146101c75780632d822160146101f25780632e17de781461021d575b600080fd5b3480156101d357600080fd5b506101dc61067e565b6040516101e99190614211565b60405180910390f35b3480156101fe57600080fd5b506102076106a4565b60405161021491906143ac565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f9190613b4b565b6106ca565b604051610251919061480d565b60405180910390f35b34801561026657600080fd5b50610281600480360381019061027c9190613b4b565b61084f565b005b34801561028f57600080fd5b506102aa60048036038101906102a59190613b4b565b61085c565b005b3480156102b857600080fd5b506102c1610985565b6040516102ce919061480d565b60405180910390f35b3480156102e357600080fd5b506102ec610a15565b005b3480156102fa57600080fd5b50610303610a1f565b604051610310919061480d565b60405180910390f35b34801561032557600080fd5b50610340600480360381019061033b9190613b9d565b610a2e565b005b34801561034e57600080fd5b50610357610a6f565b604051610364919061480d565b60405180910390f35b34801561037957600080fd5b50610394600480360381019061038f9190613b4b565b610a75565b005b3480156103a257600080fd5b506103ab610adc565b6040516103b89190614324565b60405180910390f35b3480156103cd57600080fd5b506103e860048036038101906103e39190613b4b565b610b02565b005b3480156103f657600080fd5b50610411600480360381019061040c9190613b4b565b610c2b565b60405161041e919061480d565b60405180910390f35b34801561043357600080fd5b5061043c610c3d565b604051610449919061480d565b60405180910390f35b34801561045e57600080fd5b50610479600480360381019061047491906138c0565b610c43565b005b34801561048757600080fd5b50610490610ca9565b60405161049d9190614391565b60405180910390f35b3480156104b257600080fd5b506104cd60048036038101906104c89190613b4b565b610ccf565b005b3480156104db57600080fd5b506104f660048036038101906104f1919061399b565b610d35565b005b34801561050457600080fd5b5061050d610e6c565b60405161051a919061480d565b60405180910390f35b34801561052f57600080fd5b5061054a60048036038101906105459190613b4b565b610e72565b005b34801561055857600080fd5b50610573600480360381019061056e91906138c0565b610e7f565b005b61058f600480360381019061058a91906138e9565b611067565b005b34801561059d57600080fd5b506105b860048036038101906105b391906138c0565b611121565b005b3480156105c657600080fd5b506105cf611258565b6040516105dc9190614211565b60405180910390f35b3480156105f157600080fd5b5061060c600480360381019061060791906139c4565b61127e565b005b610628600480360381019061062391906138e9565b611360565b005b34801561063657600080fd5b5061063f6113df565b60405161064c9190614376565b60405180910390f35b34801561066157600080fd5b5061067c60048036038101906106779190613aa7565b611405565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821161070e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610705906146d7565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b815260040161076b9291906142fb565b602060405180830381600087803b15801561078557600080fd5b505af1158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190613972565b6107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390614465565b60405180910390fd5b600061082b33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168561153c565b9050826007600082825461083f9190614a25565b9250508190555080915050919050565b6108593382611680565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108b657600080fd5b681b1ae4d6e2ef500000811115610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f9906144cf565b60405180910390fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600654604051602001610936919061480d565b60405160208183030381529060405282604051602001610956919061480d565b604051602081830303815290604052604051610973929190614781565b60405180910390a18060068190555050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109e157600080fd5b610a1030600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660075461153c565b905090565b610a1d611977565b565b6000610a29611a06565b905090565b610a5e600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff168686868686611360565b610a683386611a10565b5050505050565b60075481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610acf57600080fd5b610ad93082611680565b50565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5c57600080fd5b681b1ae4d6e2ef500000811115610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f906144cf565b60405180910390fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600554604051602001610bdc919061480d565b60405160208183030381529060405282604051602001610bfc919061480d565b604051602081830303815290604052604051610c1992919061468d565b60405180910390a18060058190555050565b6000610c3682611bac565b9050919050565b60065481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c9d57600080fd5b610ca681611bb6565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d2957600080fd5b610d3281611c93565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d8f57600080fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001610de39190614324565b60405160208183030381529060405282604051602001610e039190614324565b604051602081830303815290604052604051610e209291906145af565b60405180910390a180600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b610e7c3382611a10565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ed957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f409061456f565b60405180910390fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001610f9d9190614211565b60405160208183030381529060405282604051602001610fbd9190614211565b604051602081830303815290604052604051610fda929190614643565b60405180910390a180600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016110a492919061422c565b60206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190613b74565b9050858110156111185761111787828861110e9190614a25565b87878787611360565b5b50505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461117b57600080fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016111cf9190614211565b604051602081830303815290604052826040516020016111ef9190614211565b60405160208183030381529060405260405161120c9291906145f9565b60405180910390a180600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6112d28a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050888888888888611e96565b86600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b8573ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b81526004016113a5979695949392919061428c565b600060405180830381600087803b1580156113bf57600080fd5b505af11580156113d3573d6000803e3d6000fd5b50505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461145f57600080fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016114b39190614376565b604051602081830303815290604052826040516020016114d39190614376565b6040516020818303038152906040526040516114f0929190614717565b60405180910390a180600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082905060008490506000611552826124de565b9050600061155f83612582565b9050600060018284876115729190614937565b61157c9190614906565b61158691906148b0565b90508373ffffffffffffffffffffffffffffffffffffffff1663c83ec04d86836040518363ffffffff1660e01b81526004016115c3929190614828565b600060405180830381600087803b1580156115dd57600080fd5b505af11580156115f1573d6000803e3d6000fd5b5050505061160b8986600b61261e9092919063ffffffff16565b95508373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef878960405161166c929190614828565b60405180910390a350505050509392505050565b6116968282600b6126d79092919063ffffffff16565b5060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116f39190614211565b60206040518083038186803b15801561170b57600080fd5b505afa15801561171f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117439190613b74565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e97fddc2836040518263ffffffff1660e01b81526004016117a0919061480d565b600060405180830381600087803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b5050505060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161182e9190614211565b60206040518083038186803b15801561184657600080fd5b505afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e9190613b74565b9050818110156118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ba906146d7565b60405180910390fd5b600082826118d19190614a25565b90506119208582600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127df9092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688286604051611968929190614828565b60405180910390a25050505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f91440d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119e157600080fd5b505af19250505080156119f2575060015b6119fb576119fc565b5b611a04612865565b565b6000600754905090565b60008111611a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4a906146d7565b60405180910390fd5b6000611a5e82611bac565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b8152600401611abd9291906142fb565b602060405180830381600087803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f9190613972565b611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b459061450f565b60405180910390fd5b611b9d833084600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129d9909392919063ffffffff16565b611ba78383612a62565b505050565b6000819050919050565b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001611c0a9190614211565b60405160208183030381529060405282604051602001611c2a9190614211565b604051602081830303815290604052604051611c47929190614485565b60405180910390a180600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008190506000811415611ca75750611e93565b611d16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612acd9092919063ffffffff16565b60006001611d45600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612582565b611d70600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124de565b84611d7b9190614937565b611d859190614906565b611d8f9190614a25565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ab1507183836040518363ffffffff1660e01b8152600401611dee929190614828565b600060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b50505050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051611e88919061480d565b60405180910390a250505b50565b600060019054906101000a900460ff1680611ebc575060008054906101000a900460ff16155b611efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef29061458f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611f4b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b88600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856005819055508460068190555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600061202785612bee565b905060008960405160200161203c91906141ef565b60405160208183030381529060405290508173ffffffffffffffffffffffffffffffffffffffff1663077f224a8b8c306040518463ffffffff1660e01b815260040161208a93929190614420565b602060405180830381600087803b1580156120a457600080fd5b505af11580156120b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120dc9190613972565b61211b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612112906147cb565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663a574175660405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff168152602001848e6040516020016121ce92919061417b565b6040516020818303038152906040528152602001848e6040516020016121f59291906141b5565b6040516020818303038152906040528152506040518263ffffffff1660e01b815260040161222391906147eb565b602060405180830381600087803b15801561223d57600080fd5b505af1158015612251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122759190613af9565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016123109190614211565b600060405180830381600087803b15801561232a57600080fd5b505af115801561233e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663d9181cd3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fe9190613b22565b84306040518463ffffffff1660e01b815260040161241e9392919061433f565b602060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124709190613ad0565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505080156124d35760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b600060088273ffffffffffffffffffffffffffffffffffffffff16635c5f7dae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561252857600080fd5b505afa15801561253c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125609190613b74565b10612578576c01431e0fae6d7217caa000000061257b565b60645b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156125cb57600080fd5b505afa1580156125df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126039190613b74565b9050600081146126135780612616565b60015b915050919050565b60008360010154905060018161263491906148b0565b846001018190555060405180604001604052808381526020018473ffffffffffffffffffffffffffffffffffffffff168152508460000160008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050509392505050565b600080846000016000848152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000015492508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461278f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127869061452f565b60405180910390fd5b8560000160008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050509392505050565b6128608363a9059cbb60e01b84846040516024016127fe9291906142fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cc3565b505050565b61286d612d8a565b6000612877612d8c565b905060008113156128f0576000819050600061289582600554612fc7565b905060006128a583600654612fc7565b90508082846128b49190614a25565b6128be9190614a25565b600760008282546128cf91906148b0565b925050819055506128df82612fdb565b6128e881613100565b505050612923565b60008112156129225760008161290590614c4b565b905080600760008282546129199190614a25565b92505081905550505b5b6129d6600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016129819190614211565b60206040518083038186803b15801561299957600080fd5b505afa1580156129ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d19190613b74565b611c93565b50565b612a5c846323b872dd60e01b8585856040516024016129fa93929190614255565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cc3565b50505050565b8060076000828254612a7491906148b0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612ac1919061480d565b60405180910390a25050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401612b0b92919061422c565b60206040518083038186803b158015612b2357600080fd5b505afa158015612b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5b9190613b74565b612b6591906148b0565b9050612be88463095ea7b360e01b8584604051602401612b869291906142fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cc3565b50505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb59061454f565b60405180910390fd5b919050565b6000612d25826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135809092919063ffffffff16565b9050600081511115612d855780806020019051810190612d459190613972565b612d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7b90614761565b60405180910390fd5b5b505050565b565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612dea9190614211565b60206040518083038186803b158015612e0257600080fd5b505afa158015612e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3a9190613b74565b90506000612e69600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124de565b612e94600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612582565b83612e9f9190614937565b612ea99190614906565b9050600060075490506000612f67600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612f129190614211565b60206040518083038186803b158015612f2a57600080fd5b505afa158015612f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f629190613b74565b611bac565b90508083612f7591906148b0565b92508183612f839190614991565b94507f78c13bf6a7fae25f1085d594e546d7a97cb66a55bc9733c7ea78236c452663ec858484604051612fb8939291906143c7565b60405180910390a15050505090565b6000612fd38383613598565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161305a9291906142fb565b602060405180830381600087803b15801561307457600080fd5b505af1158015613088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ac9190613972565b5080600760008282546130bf91906148b0565b925050819055507f414d7d8eae12f648156e75499fc0a5a10aa84f2745c6f791b0453cb17f1e17fa816040516130f5919061480d565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d3b7c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561316a57600080fd5b505afa15801561317e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a29190613b74565b116131ac5761357d565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016132099190614211565b60206040518083038186803b15801561322157600080fd5b505afa158015613235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132599190613b74565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930846040518363ffffffff1660e01b81526004016132b89291906142fb565b602060405180830381600087803b1580156132d257600080fd5b505af11580156132e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330a9190613972565b50816007600082825461331d91906148b0565b925050819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016133819190614211565b60206040518083038186803b15801561339957600080fd5b505afa1580156133ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d19190613b74565b9050600082826133e19190614a25565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016134629291906142fb565b602060405180830381600087803b15801561347c57600080fd5b505af1158015613490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b49190613972565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beceed39826040518263ffffffff1660e01b8152600401613510919061480d565b600060405180830381600087803b15801561352a57600080fd5b505af115801561353e573d6000803e3d6000fd5b505050507f1d8f4bab53e84801fc35b88b53df72a998fa29c92e6fc65d412c4677d0d88c6281604051613571919061480d565b60405180910390a15050505b50565b606061358f84846000856135c2565b90509392505050565b6000683635c9adc5dea0000082846135b09190614937565b6135ba9190614906565b905092915050565b606082471015613607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fe906144ef565b60405180910390fd5b613610856136d6565b61364f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613646906146f7565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516136789190614164565b60006040518083038185875af1925050503d80600081146136b5576040519150601f19603f3d011682016040523d82523d6000602084013e6136ba565b606091505b50915091506136ca8282866136e9565b92505050949350505050565b600080823b905060008111915050919050565b606083156136f957829050613749565b60008351111561370c5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374091906143fe565b60405180910390fd5b9392505050565b60008135905061375f81615124565b92915050565b6000815190506137748161513b565b92915050565b60008135905061378981615152565b92915050565b60008135905061379e81615169565b92915050565b6000813590506137b381615180565b92915050565b6000815190506137c881615180565b92915050565b6000813590506137dd81615197565b92915050565b6000815190506137f2816151ae565b92915050565b600081359050613807816151c5565b92915050565b60008151905061381c816151dc565b92915050565b600081359050613831816151f3565b92915050565b60008083601f84011261384957600080fd5b8235905067ffffffffffffffff81111561386257600080fd5b60208301915083600182028301111561387a57600080fd5b9250929050565b6000813590506138908161520a565b92915050565b6000815190506138a58161520a565b92915050565b6000813590506138ba81615221565b92915050565b6000602082840312156138d257600080fd5b60006138e084828501613750565b91505092915050565b60008060008060008060c0878903121561390257600080fd5b600061391089828a01613750565b965050602061392189828a01613881565b955050604061393289828a01613881565b945050606061394389828a016138ab565b935050608061395489828a0161377a565b92505060a061396589828a0161377a565b9150509295509295509295565b60006020828403121561398457600080fd5b600061399284828501613765565b91505092915050565b6000602082840312156139ad57600080fd5b60006139bb8482850161378f565b91505092915050565b6000806000806000806000806000806101208b8d0312156139e457600080fd5b60006139f28d828e0161378f565b9a505060208b013567ffffffffffffffff811115613a0f57600080fd5b613a1b8d828e01613837565b99509950506040613a2e8d828e01613750565b9750506060613a3f8d828e01613750565b9650506080613a508d828e01613881565b95505060a0613a618d828e01613881565b94505060c0613a728d828e016137f8565b93505060e0613a838d828e01613822565b925050610100613a958d828e016137ce565b9150509295989b9194979a5092959850565b600060208284031215613ab957600080fd5b6000613ac7848285016137a4565b91505092915050565b600060208284031215613ae257600080fd5b6000613af0848285016137b9565b91505092915050565b600060208284031215613b0b57600080fd5b6000613b19848285016137e3565b91505092915050565b600060208284031215613b3457600080fd5b6000613b428482850161380d565b91505092915050565b600060208284031215613b5d57600080fd5b6000613b6b84828501613881565b91505092915050565b600060208284031215613b8657600080fd5b6000613b9484828501613896565b91505092915050565b600080600080600060a08688031215613bb557600080fd5b6000613bc388828901613881565b9550506020613bd488828901613881565b9450506040613be5888289016138ab565b9350506060613bf68882890161377a565b9250506080613c078882890161377a565b9150509295509295909350565b613c1d81614a59565b82525050565b613c2c81614a77565b82525050565b6000613c3d82614851565b613c478185614867565b9350613c57818560208601614c18565b613c6081614cf2565b840191505092915050565b6000613c7682614851565b613c808185614878565b9350613c90818560208601614c18565b80840191505092915050565b613ca581614b40565b82525050565b613cb481614b40565b82525050565b613cc381614b64565b82525050565b613cd281614b88565b82525050565b613ce181614bac565b82525050565b613cf081614bd0565b82525050565b613cff81614bf4565b82525050565b613d0e81614aff565b82525050565b6000613d1f8261485c565b613d298185614883565b9350613d39818560208601614c18565b613d4281614cf2565b840191505092915050565b6000613d588261485c565b613d628185614894565b9350613d72818560208601614c18565b613d7b81614cf2565b840191505092915050565b6000613d918261485c565b613d9b81856148a5565b9350613dab818560208601614c18565b80840191505092915050565b6000613dc4601283614894565b9150613dcf82614d03565b602082019050919050565b6000613de7600b836148a5565b9150613df282614d2c565b600b82019050919050565b6000613e0a601083614894565b9150613e1582614d55565b602082019050919050565b6000613e2d600f83614894565b9150613e3882614d7e565b602082019050919050565b6000613e50602683614894565b9150613e5b82614da7565b604082019050919050565b6000613e73601283614894565b9150613e7e82614df6565b602082019050919050565b6000613e96601183614894565b9150613ea182614e1f565b602082019050919050565b6000613eb9601683614894565b9150613ec482614e48565b602082019050919050565b6000613edc600c83614894565b9150613ee782614e71565b602082019050919050565b6000613eff602e83614894565b9150613f0a82614e9a565b604082019050919050565b6000613f22600583614894565b9150613f2d82614ee9565b602082019050919050565b6000613f45600383614894565b9150613f5082614f12565b602082019050919050565b6000613f68600483614894565b9150613f7382614f3b565b602082019050919050565b6000613f8b600c83614894565b9150613f9682614f64565b602082019050919050565b6000613fae600b83614894565b9150613fb982614f8d565b602082019050919050565b6000613fd16005836148a5565b9150613fdc82614fb6565b600582019050919050565b6000613ff46001836148a5565b9150613fff82614fdf565b600182019050919050565b6000614017601d83614894565b915061402282615008565b602082019050919050565b600061403a6001836148a5565b915061404582615031565b600182019050919050565b600061405d600a83614894565b91506140688261505a565b602082019050919050565b6000614080602a83614894565b915061408b82615083565b604082019050919050565b60006140a3600d83614894565b91506140ae826150d2565b602082019050919050565b60006140c6601583614894565b91506140d1826150fb565b602082019050919050565b60006080830160008301516140f46000860182613c9c565b5060208301516141076020860182613c9c565b506040830151848203604086015261411f8282613d14565b915050606083015184820360608601526141398282613d14565b9150508091505092915050565b61414f81614b29565b82525050565b61415e81614b33565b82525050565b60006141708284613c6b565b915081905092915050565b60006141878285613d86565b91506141928261402d565b915061419e8284613d86565b91506141a982613dda565b91508190509392505050565b60006141c18285613d86565b91506141cc8261402d565b91506141d88284613d86565b91506141e382613fc4565b91508190509392505050565b60006141fa82613fe7565b91506142068284613d86565b915081905092915050565b60006020820190506142266000830184613c14565b92915050565b60006040820190506142416000830185613c14565b61424e6020830184613c14565b9392505050565b600060608201905061426a6000830186613c14565b6142776020830185613c14565b6142846040830184614146565b949350505050565b600060e0820190506142a1600083018a613c14565b6142ae6020830189613c14565b6142bb6040830188614146565b6142c86060830187614146565b6142d56080830186614155565b6142e260a0830185613c23565b6142ef60c0830184613c23565b98975050505050505050565b60006040820190506143106000830185613c14565b61431d6020830184614146565b9392505050565b60006020820190506143396000830184613cab565b92915050565b60006060820190506143546000830186613cab565b6143616020830185613cd8565b61436e6040830184613ce7565b949350505050565b600060208201905061438b6000830184613cba565b92915050565b60006020820190506143a66000830184613cc9565b92915050565b60006020820190506143c16000830184613cd8565b92915050565b60006060820190506143dc6000830186613d05565b6143e96020830185614146565b6143f66040830184614146565b949350505050565b600060208201905081810360008301526144188184613d4d565b905092915050565b6000606082019050818103600083015261443a8186613d4d565b9050818103602083015261444e8185613d4d565b905061445d6040830184613cf6565b949350505050565b6000602082019050818103600083015261447e81613db7565b9050919050565b6000606082019050818103600083015261449e81613dfd565b905081810360208301526144b28185613c32565b905081810360408301526144c68184613c32565b90509392505050565b600060208201905081810360008301526144e881613e20565b9050919050565b6000602082019050818103600083015261450881613e43565b9050919050565b6000602082019050818103600083015261452881613e66565b9050919050565b6000602082019050818103600083015261454881613e89565b9050919050565b6000602082019050818103600083015261456881613eac565b9050919050565b6000602082019050818103600083015261458881613ecf565b9050919050565b600060208201905081810360008301526145a881613ef2565b9050919050565b600060608201905081810360008301526145c881613f15565b905081810360208301526145dc8185613c32565b905081810360408301526145f08184613c32565b90509392505050565b6000606082019050818103600083015261461281613f38565b905081810360208301526146268185613c32565b9050818103604083015261463a8184613c32565b90509392505050565b6000606082019050818103600083015261465c81613f5b565b905081810360208301526146708185613c32565b905081810360408301526146848184613c32565b90509392505050565b600060608201905081810360008301526146a681613f7e565b905081810360208301526146ba8185613c32565b905081810360408301526146ce8184613c32565b90509392505050565b600060208201905081810360008301526146f081613fa1565b9050919050565b600060208201905081810360008301526147108161400a565b9050919050565b6000606082019050818103600083015261473081614050565b905081810360208301526147448185613c32565b905081810360408301526147588184613c32565b90509392505050565b6000602082019050818103600083015261477a81614073565b9050919050565b6000606082019050818103600083015261479a81614096565b905081810360208301526147ae8185613c32565b905081810360408301526147c28184613c32565b90509392505050565b600060208201905081810360008301526147e4816140b9565b9050919050565b6000602082019050818103600083015261480581846140dc565b905092915050565b60006020820190506148226000830184614146565b92915050565b600060408201905061483d6000830185614146565b61484a6020830184614146565b9392505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006148bb82614b29565b91506148c683614b29565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148fb576148fa614c94565b5b828201905092915050565b600061491182614b29565b915061491c83614b29565b92508261492c5761492b614cc3565b5b828204905092915050565b600061494282614b29565b915061494d83614b29565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561498657614985614c94565b5b828202905092915050565b600061499c82614aff565b91506149a783614aff565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156149e2576149e1614c94565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615614a1a57614a19614c94565b5b828203905092915050565b6000614a3082614b29565b9150614a3b83614b29565b925082821015614a4e57614a4d614c94565b5b828203905092915050565b6000614a6482614b09565b9050919050565b60008115159050919050565b6000819050919050565b6000614a8c82614a59565b9050919050565b6000614a9e82614a59565b9050919050565b6000614ab082614a59565b9050919050565b6000614ac282614a59565b9050919050565b6000614ad482614a59565b9050919050565b6000614ae682614a59565b9050919050565b6000614af882614a59565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614b4b82614b52565b9050919050565b6000614b5d82614b09565b9050919050565b6000614b6f82614b76565b9050919050565b6000614b8182614b09565b9050919050565b6000614b9382614b9a565b9050919050565b6000614ba582614b09565b9050919050565b6000614bb782614bbe565b9050919050565b6000614bc982614b09565b9050919050565b6000614bdb82614be2565b9050919050565b6000614bed82614b09565b9050919050565b6000614bff82614c06565b9050919050565b6000614c1182614b09565b9050919050565b60005b83811015614c36578082015181840152602081019050614c1b565b83811115614c45576000848401525b50505050565b6000614c5682614aff565b91507f8000000000000000000000000000000000000000000000000000000000000000821415614c8957614c88614c94565b5b816000039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f54454e4445525f4255524e5f4641494c45440000000000000000000000000000600082015250565b7f205377617020546f6b656e000000000000000000000000000000000000000000600082015250565b7f5354414b494e475f434f4e545241435400000000000000000000000000000000600082015250565b7f4645455f455843454544535f4d41580000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f54454e4445525f4d494e545f4641494c45440000000000000000000000000000600082015250565b7f4143434f554e545f4d4953544d41544348000000000000000000000000000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f535445414b000000000000000000000000000000000000000000000000000000600082015250565b7f474f560000000000000000000000000000000000000000000000000000000000600082015250565b7f4e4f444500000000000000000000000000000000000000000000000000000000600082015250565b7f50524f544f434f4c5f4645450000000000000000000000000000000000000000600082015250565b7f5a45524f5f414d4f554e54000000000000000000000000000000000000000000600082015250565b7f2d53574150000000000000000000000000000000000000000000000000000000600082015250565b7f7400000000000000000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f54454e4445524641524d00000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4c49515549444954595f46454500000000000000000000000000000000000000600082015250565b7f4641494c5f494e49545f54454e444552544f4b454e0000000000000000000000600082015250565b61512d81614a59565b811461513857600080fd5b50565b61514481614a6b565b811461514f57600080fd5b50565b61515b81614a77565b811461516657600080fd5b50565b61517281614a81565b811461517d57600080fd5b50565b61518981614a93565b811461519457600080fd5b50565b6151a081614aa5565b81146151ab57600080fd5b50565b6151b781614ab7565b81146151c257600080fd5b50565b6151ce81614ac9565b81146151d957600080fd5b50565b6151e581614adb565b81146151f057600080fd5b50565b6151fc81614aed565b811461520757600080fd5b50565b61521381614b29565b811461521e57600080fd5b50565b61522a81614b33565b811461523557600080fd5b5056fea264697066735822122058f14d85bc0a472831210401aa1328df51bad63cd1f767248c70892b9373117164736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c806398118cb4116100f7578063c21d5ab711610095578063ec6d80f611610064578063ec6d80f6146105e5578063f3995c671461060e578063f4d95a711461062a578063fbdfc96114610655576101c2565b8063c21d5ab71461054c578063c2e3140a14610575578063cfad57a214610591578063d70754ec146105ba576101c2565b8063a694fc3a116100d1578063a694fc3a146104a6578063afef75d2146104cf578063b0e21e8a146104f8578063b6b55f2514610523576101c2565b806398118cb4146104275780639dd373b914610452578063a26a546b1461047b576101c2565b80633ae73259116101645780636991bc771161013e5780636991bc771461036d5780636f19031514610396578063787dce3d146103c15780637cb0c275146103ea576101c2565b80633ae73259146102ee5780634a970be71461031957806351c669c014610342576101c2565b80632e1a7d4d116101a05780632e1a7d4d1461025a578063357bf15c1461028357806336a30f44146102ac578063372500ab146102d7576101c2565b806312d43a51146101c75780632d822160146101f25780632e17de781461021d575b600080fd5b3480156101d357600080fd5b506101dc61067e565b6040516101e99190614211565b60405180910390f35b3480156101fe57600080fd5b506102076106a4565b60405161021491906143ac565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f9190613b4b565b6106ca565b604051610251919061480d565b60405180910390f35b34801561026657600080fd5b50610281600480360381019061027c9190613b4b565b61084f565b005b34801561028f57600080fd5b506102aa60048036038101906102a59190613b4b565b61085c565b005b3480156102b857600080fd5b506102c1610985565b6040516102ce919061480d565b60405180910390f35b3480156102e357600080fd5b506102ec610a15565b005b3480156102fa57600080fd5b50610303610a1f565b604051610310919061480d565b60405180910390f35b34801561032557600080fd5b50610340600480360381019061033b9190613b9d565b610a2e565b005b34801561034e57600080fd5b50610357610a6f565b604051610364919061480d565b60405180910390f35b34801561037957600080fd5b50610394600480360381019061038f9190613b4b565b610a75565b005b3480156103a257600080fd5b506103ab610adc565b6040516103b89190614324565b60405180910390f35b3480156103cd57600080fd5b506103e860048036038101906103e39190613b4b565b610b02565b005b3480156103f657600080fd5b50610411600480360381019061040c9190613b4b565b610c2b565b60405161041e919061480d565b60405180910390f35b34801561043357600080fd5b5061043c610c3d565b604051610449919061480d565b60405180910390f35b34801561045e57600080fd5b50610479600480360381019061047491906138c0565b610c43565b005b34801561048757600080fd5b50610490610ca9565b60405161049d9190614391565b60405180910390f35b3480156104b257600080fd5b506104cd60048036038101906104c89190613b4b565b610ccf565b005b3480156104db57600080fd5b506104f660048036038101906104f1919061399b565b610d35565b005b34801561050457600080fd5b5061050d610e6c565b60405161051a919061480d565b60405180910390f35b34801561052f57600080fd5b5061054a60048036038101906105459190613b4b565b610e72565b005b34801561055857600080fd5b50610573600480360381019061056e91906138c0565b610e7f565b005b61058f600480360381019061058a91906138e9565b611067565b005b34801561059d57600080fd5b506105b860048036038101906105b391906138c0565b611121565b005b3480156105c657600080fd5b506105cf611258565b6040516105dc9190614211565b60405180910390f35b3480156105f157600080fd5b5061060c600480360381019061060791906139c4565b61127e565b005b610628600480360381019061062391906138e9565b611360565b005b34801561063657600080fd5b5061063f6113df565b60405161064c9190614376565b60405180910390f35b34801561066157600080fd5b5061067c60048036038101906106779190613aa7565b611405565b005b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080821161070e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610705906146d7565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b815260040161076b9291906142fb565b602060405180830381600087803b15801561078557600080fd5b505af1158015610799573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bd9190613972565b6107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390614465565b60405180910390fd5b600061082b33600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168561153c565b9050826007600082825461083f9190614a25565b9250508190555080915050919050565b6108593382611680565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108b657600080fd5b681b1ae4d6e2ef500000811115610902576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f9906144cf565b60405180910390fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600654604051602001610936919061480d565b60405160208183030381529060405282604051602001610956919061480d565b604051602081830303815290604052604051610973929190614781565b60405180910390a18060068190555050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109e157600080fd5b610a1030600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660075461153c565b905090565b610a1d611977565b565b6000610a29611a06565b905090565b610a5e600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff168686868686611360565b610a683386611a10565b5050505050565b60075481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610acf57600080fd5b610ad93082611680565b50565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b5c57600080fd5b681b1ae4d6e2ef500000811115610ba8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9f906144cf565b60405180910390fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600554604051602001610bdc919061480d565b60405160208183030381529060405282604051602001610bfc919061480d565b604051602081830303815290604052604051610c1992919061468d565b60405180910390a18060058190555050565b6000610c3682611bac565b9050919050565b60065481565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c9d57600080fd5b610ca681611bb6565b50565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d2957600080fd5b610d3281611c93565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d8f57600080fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001610de39190614324565b60405160208183030381529060405282604051602001610e039190614324565b604051602081830303815290604052604051610e209291906145af565b60405180910390a180600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b610e7c3382611a10565b50565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ed957600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f409061456f565b60405180910390fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001610f9d9190614211565b60405160208183030381529060405282604051602001610fbd9190614211565b604051602081830303815290604052604051610fda929190614643565b60405180910390a180600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016110a492919061422c565b60206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190613b74565b9050858110156111185761111787828861110e9190614a25565b87878787611360565b5b50505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461117b57600080fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016111cf9190614211565b604051602081830303815290604052826040516020016111ef9190614211565b60405160208183030381529060405260405161120c9291906145f9565b60405180910390a180600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6112d28a8a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050888888888888611e96565b86600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b8573ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b81526004016113a5979695949392919061428c565b600060405180830381600087803b1580156113bf57600080fd5b505af11580156113d3573d6000803e3d6000fd5b50505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461145f57600080fd5b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516020016114b39190614376565b604051602081830303815290604052826040516020016114d39190614376565b6040516020818303038152906040526040516114f0929190614717565b60405180910390a180600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008082905060008490506000611552826124de565b9050600061155f83612582565b9050600060018284876115729190614937565b61157c9190614906565b61158691906148b0565b90508373ffffffffffffffffffffffffffffffffffffffff1663c83ec04d86836040518363ffffffff1660e01b81526004016115c3929190614828565b600060405180830381600087803b1580156115dd57600080fd5b505af11580156115f1573d6000803e3d6000fd5b5050505061160b8986600b61261e9092919063ffffffff16565b95508373ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167f18edd09e80386cd99df397e2e0d87d2bb259423eae08645e776321a36fe680ef878960405161166c929190614828565b60405180910390a350505050509392505050565b6116968282600b6126d79092919063ffffffff16565b5060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116f39190614211565b60206040518083038186803b15801561170b57600080fd5b505afa15801561171f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117439190613b74565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e97fddc2836040518263ffffffff1660e01b81526004016117a0919061480d565b600060405180830381600087803b1580156117ba57600080fd5b505af11580156117ce573d6000803e3d6000fd5b5050505060008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161182e9190614211565b60206040518083038186803b15801561184657600080fd5b505afa15801561185a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187e9190613b74565b9050818110156118c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ba906146d7565b60405180910390fd5b600082826118d19190614a25565b90506119208582600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166127df9092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688286604051611968929190614828565b60405180910390a25050505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f91440d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119e157600080fd5b505af19250505080156119f2575060015b6119fb576119fc565b5b611a04612865565b565b6000600754905090565b60008111611a53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4a906146d7565b60405180910390fd5b6000611a5e82611bac565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b8152600401611abd9291906142fb565b602060405180830381600087803b158015611ad757600080fd5b505af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f9190613972565b611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b459061450f565b60405180910390fd5b611b9d833084600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166129d9909392919063ffffffff16565b611ba78383612a62565b505050565b6000819050919050565b7f5555cb3612e5f2fc327f8394a162756a3cca8144f95b4dcfb4ee29320c7992d3600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051602001611c0a9190614211565b60405160208183030381529060405282604051602001611c2a9190614211565b604051602081830303815290604052604051611c47929190614485565b60405180910390a180600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008190506000811415611ca75750611e93565b611d16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612acd9092919063ffffffff16565b60006001611d45600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612582565b611d70600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124de565b84611d7b9190614937565b611d859190614906565b611d8f9190614a25565b9050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636ab1507183836040518363ffffffff1660e01b8152600401611dee929190614828565b600060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b50505050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a83604051611e88919061480d565b60405180910390a250505b50565b600060019054906101000a900460ff1680611ebc575060008054906101000a900460ff16155b611efb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef29061458f565b60405180910390fd5b60008060019054906101000a900460ff161590508015611f4b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b88600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856005819055508460068190555033600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600061202785612bee565b905060008960405160200161203c91906141ef565b60405160208183030381529060405290508173ffffffffffffffffffffffffffffffffffffffff1663077f224a8b8c306040518463ffffffff1660e01b815260040161208a93929190614420565b602060405180830381600087803b1580156120a457600080fd5b505af11580156120b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120dc9190613972565b61211b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612112906147cb565b60405180910390fd5b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff1663a574175660405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018e73ffffffffffffffffffffffffffffffffffffffff168152602001848e6040516020016121ce92919061417b565b6040516020818303038152906040528152602001848e6040516020016121f59291906141b5565b6040516020818303038152906040528152506040518263ffffffff1660e01b815260040161222391906147eb565b602060405180830381600087803b15801561223d57600080fd5b505af1158015612251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122759190613af9565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b81526004016123109190614211565b600060405180830381600087803b15801561232a57600080fd5b505af115801561233e573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff1663d9181cd3600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fcbd2856040518163ffffffff1660e01b815260040160206040518083038186803b1580156123c657600080fd5b505afa1580156123da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123fe9190613b22565b84306040518463ffffffff1660e01b815260040161241e9392919061433f565b602060405180830381600087803b15801561243857600080fd5b505af115801561244c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124709190613ad0565b600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505080156124d35760008060016101000a81548160ff0219169083151502179055505b505050505050505050565b600060088273ffffffffffffffffffffffffffffffffffffffff16635c5f7dae6040518163ffffffff1660e01b815260040160206040518083038186803b15801561252857600080fd5b505afa15801561253c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125609190613b74565b10612578576c01431e0fae6d7217caa000000061257b565b60645b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156125cb57600080fd5b505afa1580156125df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126039190613b74565b9050600081146126135780612616565b60015b915050919050565b60008360010154905060018161263491906148b0565b846001018190555060405180604001604052808381526020018473ffffffffffffffffffffffffffffffffffffffff168152508460000160008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050509392505050565b600080846000016000848152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000015492508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461278f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127869061452f565b60405180910390fd5b8560000160008581526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055505050509392505050565b6128608363a9059cbb60e01b84846040516024016127fe9291906142fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cc3565b505050565b61286d612d8a565b6000612877612d8c565b905060008113156128f0576000819050600061289582600554612fc7565b905060006128a583600654612fc7565b90508082846128b49190614a25565b6128be9190614a25565b600760008282546128cf91906148b0565b925050819055506128df82612fdb565b6128e881613100565b505050612923565b60008112156129225760008161290590614c4b565b905080600760008282546129199190614a25565b92505081905550505b5b6129d6600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016129819190614211565b60206040518083038186803b15801561299957600080fd5b505afa1580156129ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d19190613b74565b611c93565b50565b612a5c846323b872dd60e01b8585856040516024016129fa93929190614255565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cc3565b50505050565b8060076000828254612a7491906148b0565b925050819055508173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612ac1919061480d565b60405180910390a25050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401612b0b92919061422c565b60206040518083038186803b158015612b2357600080fd5b505afa158015612b37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5b9190613b74565b612b6591906148b0565b9050612be88463095ea7b360e01b8584604051602401612b869291906142fb565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612cc3565b50505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cb59061454f565b60405180910390fd5b919050565b6000612d25826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166135809092919063ffffffff16565b9050600081511115612d855780806020019051810190612d459190613972565b612d84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d7b90614761565b60405180910390fd5b5b505050565b565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612dea9190614211565b60206040518083038186803b158015612e0257600080fd5b505afa158015612e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3a9190613b74565b90506000612e69600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166124de565b612e94600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612582565b83612e9f9190614937565b612ea99190614906565b9050600060075490506000612f67600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612f129190614211565b60206040518083038186803b158015612f2a57600080fd5b505afa158015612f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f629190613b74565b611bac565b90508083612f7591906148b0565b92508183612f839190614991565b94507f78c13bf6a7fae25f1085d594e546d7a97cb66a55bc9733c7ea78236c452663ec858484604051612fb8939291906143c7565b60405180910390a15050505090565b6000612fd38383613598565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b815260040161305a9291906142fb565b602060405180830381600087803b15801561307457600080fd5b505af1158015613088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ac9190613972565b5080600760008282546130bf91906148b0565b925050819055507f414d7d8eae12f648156e75499fc0a5a10aa84f2745c6f791b0453cb17f1e17fa816040516130f5919061480d565b60405180910390a150565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166304d3b7c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561316a57600080fd5b505afa15801561317e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131a29190613b74565b116131ac5761357d565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016132099190614211565b60206040518083038186803b15801561322157600080fd5b505afa158015613235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132599190613b74565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930846040518363ffffffff1660e01b81526004016132b89291906142fb565b602060405180830381600087803b1580156132d257600080fd5b505af11580156132e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061330a9190613972565b50816007600082825461331d91906148b0565b925050819055506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016133819190614211565b60206040518083038186803b15801561339957600080fd5b505afa1580156133ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d19190613b74565b9050600082826133e19190614a25565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016134629291906142fb565b602060405180830381600087803b15801561347c57600080fd5b505af1158015613490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b49190613972565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beceed39826040518263ffffffff1660e01b8152600401613510919061480d565b600060405180830381600087803b15801561352a57600080fd5b505af115801561353e573d6000803e3d6000fd5b505050507f1d8f4bab53e84801fc35b88b53df72a998fa29c92e6fc65d412c4677d0d88c6281604051613571919061480d565b60405180910390a15050505b50565b606061358f84846000856135c2565b90509392505050565b6000683635c9adc5dea0000082846135b09190614937565b6135ba9190614906565b905092915050565b606082471015613607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135fe906144ef565b60405180910390fd5b613610856136d6565b61364f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613646906146f7565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516136789190614164565b60006040518083038185875af1925050503d80600081146136b5576040519150601f19603f3d011682016040523d82523d6000602084013e6136ba565b606091505b50915091506136ca8282866136e9565b92505050949350505050565b600080823b905060008111915050919050565b606083156136f957829050613749565b60008351111561370c5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161374091906143fe565b60405180910390fd5b9392505050565b60008135905061375f81615124565b92915050565b6000815190506137748161513b565b92915050565b60008135905061378981615152565b92915050565b60008135905061379e81615169565b92915050565b6000813590506137b381615180565b92915050565b6000815190506137c881615180565b92915050565b6000813590506137dd81615197565b92915050565b6000815190506137f2816151ae565b92915050565b600081359050613807816151c5565b92915050565b60008151905061381c816151dc565b92915050565b600081359050613831816151f3565b92915050565b60008083601f84011261384957600080fd5b8235905067ffffffffffffffff81111561386257600080fd5b60208301915083600182028301111561387a57600080fd5b9250929050565b6000813590506138908161520a565b92915050565b6000815190506138a58161520a565b92915050565b6000813590506138ba81615221565b92915050565b6000602082840312156138d257600080fd5b60006138e084828501613750565b91505092915050565b60008060008060008060c0878903121561390257600080fd5b600061391089828a01613750565b965050602061392189828a01613881565b955050604061393289828a01613881565b945050606061394389828a016138ab565b935050608061395489828a0161377a565b92505060a061396589828a0161377a565b9150509295509295509295565b60006020828403121561398457600080fd5b600061399284828501613765565b91505092915050565b6000602082840312156139ad57600080fd5b60006139bb8482850161378f565b91505092915050565b6000806000806000806000806000806101208b8d0312156139e457600080fd5b60006139f28d828e0161378f565b9a505060208b013567ffffffffffffffff811115613a0f57600080fd5b613a1b8d828e01613837565b99509950506040613a2e8d828e01613750565b9750506060613a3f8d828e01613750565b9650506080613a508d828e01613881565b95505060a0613a618d828e01613881565b94505060c0613a728d828e016137f8565b93505060e0613a838d828e01613822565b925050610100613a958d828e016137ce565b9150509295989b9194979a5092959850565b600060208284031215613ab957600080fd5b6000613ac7848285016137a4565b91505092915050565b600060208284031215613ae257600080fd5b6000613af0848285016137b9565b91505092915050565b600060208284031215613b0b57600080fd5b6000613b19848285016137e3565b91505092915050565b600060208284031215613b3457600080fd5b6000613b428482850161380d565b91505092915050565b600060208284031215613b5d57600080fd5b6000613b6b84828501613881565b91505092915050565b600060208284031215613b8657600080fd5b6000613b9484828501613896565b91505092915050565b600080600080600060a08688031215613bb557600080fd5b6000613bc388828901613881565b9550506020613bd488828901613881565b9450506040613be5888289016138ab565b9350506060613bf68882890161377a565b9250506080613c078882890161377a565b9150509295509295909350565b613c1d81614a59565b82525050565b613c2c81614a77565b82525050565b6000613c3d82614851565b613c478185614867565b9350613c57818560208601614c18565b613c6081614cf2565b840191505092915050565b6000613c7682614851565b613c808185614878565b9350613c90818560208601614c18565b80840191505092915050565b613ca581614b40565b82525050565b613cb481614b40565b82525050565b613cc381614b64565b82525050565b613cd281614b88565b82525050565b613ce181614bac565b82525050565b613cf081614bd0565b82525050565b613cff81614bf4565b82525050565b613d0e81614aff565b82525050565b6000613d1f8261485c565b613d298185614883565b9350613d39818560208601614c18565b613d4281614cf2565b840191505092915050565b6000613d588261485c565b613d628185614894565b9350613d72818560208601614c18565b613d7b81614cf2565b840191505092915050565b6000613d918261485c565b613d9b81856148a5565b9350613dab818560208601614c18565b80840191505092915050565b6000613dc4601283614894565b9150613dcf82614d03565b602082019050919050565b6000613de7600b836148a5565b9150613df282614d2c565b600b82019050919050565b6000613e0a601083614894565b9150613e1582614d55565b602082019050919050565b6000613e2d600f83614894565b9150613e3882614d7e565b602082019050919050565b6000613e50602683614894565b9150613e5b82614da7565b604082019050919050565b6000613e73601283614894565b9150613e7e82614df6565b602082019050919050565b6000613e96601183614894565b9150613ea182614e1f565b602082019050919050565b6000613eb9601683614894565b9150613ec482614e48565b602082019050919050565b6000613edc600c83614894565b9150613ee782614e71565b602082019050919050565b6000613eff602e83614894565b9150613f0a82614e9a565b604082019050919050565b6000613f22600583614894565b9150613f2d82614ee9565b602082019050919050565b6000613f45600383614894565b9150613f5082614f12565b602082019050919050565b6000613f68600483614894565b9150613f7382614f3b565b602082019050919050565b6000613f8b600c83614894565b9150613f9682614f64565b602082019050919050565b6000613fae600b83614894565b9150613fb982614f8d565b602082019050919050565b6000613fd16005836148a5565b9150613fdc82614fb6565b600582019050919050565b6000613ff46001836148a5565b9150613fff82614fdf565b600182019050919050565b6000614017601d83614894565b915061402282615008565b602082019050919050565b600061403a6001836148a5565b915061404582615031565b600182019050919050565b600061405d600a83614894565b91506140688261505a565b602082019050919050565b6000614080602a83614894565b915061408b82615083565b604082019050919050565b60006140a3600d83614894565b91506140ae826150d2565b602082019050919050565b60006140c6601583614894565b91506140d1826150fb565b602082019050919050565b60006080830160008301516140f46000860182613c9c565b5060208301516141076020860182613c9c565b506040830151848203604086015261411f8282613d14565b915050606083015184820360608601526141398282613d14565b9150508091505092915050565b61414f81614b29565b82525050565b61415e81614b33565b82525050565b60006141708284613c6b565b915081905092915050565b60006141878285613d86565b91506141928261402d565b915061419e8284613d86565b91506141a982613dda565b91508190509392505050565b60006141c18285613d86565b91506141cc8261402d565b91506141d88284613d86565b91506141e382613fc4565b91508190509392505050565b60006141fa82613fe7565b91506142068284613d86565b915081905092915050565b60006020820190506142266000830184613c14565b92915050565b60006040820190506142416000830185613c14565b61424e6020830184613c14565b9392505050565b600060608201905061426a6000830186613c14565b6142776020830185613c14565b6142846040830184614146565b949350505050565b600060e0820190506142a1600083018a613c14565b6142ae6020830189613c14565b6142bb6040830188614146565b6142c86060830187614146565b6142d56080830186614155565b6142e260a0830185613c23565b6142ef60c0830184613c23565b98975050505050505050565b60006040820190506143106000830185613c14565b61431d6020830184614146565b9392505050565b60006020820190506143396000830184613cab565b92915050565b60006060820190506143546000830186613cab565b6143616020830185613cd8565b61436e6040830184613ce7565b949350505050565b600060208201905061438b6000830184613cba565b92915050565b60006020820190506143a66000830184613cc9565b92915050565b60006020820190506143c16000830184613cd8565b92915050565b60006060820190506143dc6000830186613d05565b6143e96020830185614146565b6143f66040830184614146565b949350505050565b600060208201905081810360008301526144188184613d4d565b905092915050565b6000606082019050818103600083015261443a8186613d4d565b9050818103602083015261444e8185613d4d565b905061445d6040830184613cf6565b949350505050565b6000602082019050818103600083015261447e81613db7565b9050919050565b6000606082019050818103600083015261449e81613dfd565b905081810360208301526144b28185613c32565b905081810360408301526144c68184613c32565b90509392505050565b600060208201905081810360008301526144e881613e20565b9050919050565b6000602082019050818103600083015261450881613e43565b9050919050565b6000602082019050818103600083015261452881613e66565b9050919050565b6000602082019050818103600083015261454881613e89565b9050919050565b6000602082019050818103600083015261456881613eac565b9050919050565b6000602082019050818103600083015261458881613ecf565b9050919050565b600060208201905081810360008301526145a881613ef2565b9050919050565b600060608201905081810360008301526145c881613f15565b905081810360208301526145dc8185613c32565b905081810360408301526145f08184613c32565b90509392505050565b6000606082019050818103600083015261461281613f38565b905081810360208301526146268185613c32565b9050818103604083015261463a8184613c32565b90509392505050565b6000606082019050818103600083015261465c81613f5b565b905081810360208301526146708185613c32565b905081810360408301526146848184613c32565b90509392505050565b600060608201905081810360008301526146a681613f7e565b905081810360208301526146ba8185613c32565b905081810360408301526146ce8184613c32565b90509392505050565b600060208201905081810360008301526146f081613fa1565b9050919050565b600060208201905081810360008301526147108161400a565b9050919050565b6000606082019050818103600083015261473081614050565b905081810360208301526147448185613c32565b905081810360408301526147588184613c32565b90509392505050565b6000602082019050818103600083015261477a81614073565b9050919050565b6000606082019050818103600083015261479a81614096565b905081810360208301526147ae8185613c32565b905081810360408301526147c28184613c32565b90509392505050565b600060208201905081810360008301526147e4816140b9565b9050919050565b6000602082019050818103600083015261480581846140dc565b905092915050565b60006020820190506148226000830184614146565b92915050565b600060408201905061483d6000830185614146565b61484a6020830184614146565b9392505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006148bb82614b29565b91506148c683614b29565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156148fb576148fa614c94565b5b828201905092915050565b600061491182614b29565b915061491c83614b29565b92508261492c5761492b614cc3565b5b828204905092915050565b600061494282614b29565b915061494d83614b29565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561498657614985614c94565b5b828202905092915050565b600061499c82614aff565b91506149a783614aff565b9250827f8000000000000000000000000000000000000000000000000000000000000000018212600084121516156149e2576149e1614c94565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018213600084121615614a1a57614a19614c94565b5b828203905092915050565b6000614a3082614b29565b9150614a3b83614b29565b925082821015614a4e57614a4d614c94565b5b828203905092915050565b6000614a6482614b09565b9050919050565b60008115159050919050565b6000819050919050565b6000614a8c82614a59565b9050919050565b6000614a9e82614a59565b9050919050565b6000614ab082614a59565b9050919050565b6000614ac282614a59565b9050919050565b6000614ad482614a59565b9050919050565b6000614ae682614a59565b9050919050565b6000614af882614a59565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614b4b82614b52565b9050919050565b6000614b5d82614b09565b9050919050565b6000614b6f82614b76565b9050919050565b6000614b8182614b09565b9050919050565b6000614b9382614b9a565b9050919050565b6000614ba582614b09565b9050919050565b6000614bb782614bbe565b9050919050565b6000614bc982614b09565b9050919050565b6000614bdb82614be2565b9050919050565b6000614bed82614b09565b9050919050565b6000614bff82614c06565b9050919050565b6000614c1182614b09565b9050919050565b60005b83811015614c36578082015181840152602081019050614c1b565b83811115614c45576000848401525b50505050565b6000614c5682614aff565b91507f8000000000000000000000000000000000000000000000000000000000000000821415614c8957614c88614c94565b5b816000039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000601f19601f8301169050919050565b7f54454e4445525f4255524e5f4641494c45440000000000000000000000000000600082015250565b7f205377617020546f6b656e000000000000000000000000000000000000000000600082015250565b7f5354414b494e475f434f4e545241435400000000000000000000000000000000600082015250565b7f4645455f455843454544535f4d41580000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f54454e4445525f4d494e545f4641494c45440000000000000000000000000000600082015250565b7f4143434f554e545f4d4953544d41544348000000000000000000000000000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f5a45524f5f414444524553530000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f535445414b000000000000000000000000000000000000000000000000000000600082015250565b7f474f560000000000000000000000000000000000000000000000000000000000600082015250565b7f4e4f444500000000000000000000000000000000000000000000000000000000600082015250565b7f50524f544f434f4c5f4645450000000000000000000000000000000000000000600082015250565b7f5a45524f5f414d4f554e54000000000000000000000000000000000000000000600082015250565b7f2d53574150000000000000000000000000000000000000000000000000000000600082015250565b7f7400000000000000000000000000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f54454e4445524641524d00000000000000000000000000000000000000000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4c49515549444954595f46454500000000000000000000000000000000000000600082015250565b7f4641494c5f494e49545f54454e444552544f4b454e0000000000000000000000600082015250565b61512d81614a59565b811461513857600080fd5b50565b61514481614a6b565b811461514f57600080fd5b50565b61515b81614a77565b811461516657600080fd5b50565b61517281614a81565b811461517d57600080fd5b50565b61518981614a93565b811461519457600080fd5b50565b6151a081614aa5565b81146151ab57600080fd5b50565b6151b781614ab7565b81146151c257600080fd5b50565b6151ce81614ac9565b81146151d957600080fd5b50565b6151e581614adb565b81146151f057600080fd5b50565b6151fc81614aed565b811461520757600080fd5b50565b61521381614b29565b811461521e57600080fd5b50565b61522a81614b33565b811461523557600080fd5b5056fea264697066735822122058f14d85bc0a472831210401aa1328df51bad63cd1f767248c70892b9373117164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calcDepositOut(uint256)": {
        "details": "used by controller to calculate tokens to be minted before depositing.to be used when there a delegation tax is deducted, for eg. in Graph.",
        "returns": {
          "_0": "number of tokens staked for `amountIn`."
        }
      },
      "deposit(uint256)": {
        "details": "doesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be staked.requires '_amount' to be approved by '_from'.",
        "params": {
          "_amount": "amount deposited"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "doesn't actually stakes the tokens but aggregates the balance in the tenderizer awaiting to be staked.requires '_amount' to be approved by '_from'.",
        "params": {
          "_amount": "amount deposited",
          "_deadline": "deadline for the permit",
          "_r": "from ECDSA signature",
          "_s": "from ECDSA signature",
          "_v": "from ECDSA signature"
        }
      },
      "rescueUnlock()": {
        "details": "Used to rescue all staked funds.",
        "returns": {
          "_0": "unstake lockID generated for unstake"
        }
      },
      "rescueWithdraw(uint256)": {
        "details": "To be called after rescueUnlock() with the unstakeLockID returned there.Process unlocks/withdrawals before rescueWithdraw for integrations with WithdrawPools."
      },
      "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "The `owner` is always msg.sender and the `spender` is always address(this).",
        "params": {
          "_deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_token": "The address of the token spent",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
          "_value": "The amount that can be spent of token"
        }
      },
      "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "The `owner` is always msg.sender and the `spender` is always address(this). Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit",
        "params": {
          "_deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
          "_r": "Must produce valid secp256k1 signature from the holder along with `v` and `s`",
          "_s": "Must produce valid secp256k1 signature from the holder along with `r` and `v`",
          "_token": "The address of the token spent",
          "_v": "Must produce valid secp256k1 signature from the holder along with `r` and `s`",
          "_value": "The amount that can be spent of token"
        }
      },
      "stake(uint256)": {
        "details": "Only callable by Gov.",
        "params": {
          "_amount": "amount to stake"
        }
      },
      "totalStakedTokens()": {
        "returns": {
          "_0": "total amount staked by this Tenderizer"
        }
      },
      "unstake(uint256)": {
        "details": "unstake from the default address.If '_amount' is 0, unstake the entire amount staked towards _account.",
        "params": {
          "_amount": "amount to unstake"
        },
        "returns": {
          "_0": "unstake lockID generated for unstake"
        }
      },
      "withdraw(uint256)": {
        "details": "If '_amount' isn't specified all unstake tokens by '_account' will be withdrawn.Requires '_account' to have unstaked prior to calling withdraw.",
        "params": {
          "_unstakeLockID": "ID for the lock to request the withdraw for"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256)": {
        "notice": "Deposit gets emitted when an accounts deposits underlying tokens."
      },
      "GovernanceUpdate(string,bytes,bytes)": {
        "notice": "GovernanceUpdate gets emitted when a parameter on the Tenderizer gets updated."
      },
      "LiquidityFeeCollected(uint256)": {
        "notice": "LiquidityFeeCollected gets emitted when liquidity provider fees are moved to the TenderFarm."
      },
      "ProtocolFeeCollected(uint256)": {
        "notice": "ProtocolFeeCollected gets emitted when the treasury claims its outstanding protocol fees."
      },
      "RewardsClaimed(int256,uint256,uint256)": {
        "notice": "RewardsClaimed gets emitted when the Tenderizer processes staking rewards (or slashing) from the underlying protocol."
      },
      "Stake(address,uint256)": {
        "notice": "Stake gets emitted when funds are staked/delegated from the Tenderizer contract into the underlying protocol."
      },
      "Unstake(address,address,uint256,uint256)": {
        "notice": "Unstake gets emitted when an account burns TenderTokens to unlock tokens staked through the Tenderizer"
      },
      "Withdraw(address,uint256,uint256)": {
        "notice": "Withdraw gets emitted when an account withdraws tokens that have been succesfully unstaked and thus unlocked for withdrawal."
      }
    },
    "kind": "user",
    "methods": {
      "calcDepositOut(uint256)": {
        "notice": "Returns the number of tenderTokens to be minted for amountIn deposit."
      },
      "claimRewards()": {
        "notice": "Compound all the rewards and new deposits. Claim staking rewards and earned fees for the underlying protocol and stake any leftover token balance. Process Tender protocol fees if revenue is positive."
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens in Tenderizer."
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit tokens in Tenderizer with permit."
      },
      "rescueUnlock()": {
        "notice": "RescueUnstake unstakes all tokens from underlying protocol"
      },
      "rescueWithdraw(uint256)": {
        "notice": "RescueWithdraw withdraws all tokens into the Tenderizer from the underlying protocol  after the unlock period ends"
      },
      "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Permits this contract to spend a given token from `msg.sender`"
      },
      "selfPermitIfNecessary(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Permits this contract to spend a given token from `msg.sender`"
      },
      "stake(uint256)": {
        "notice": "Stake '_amount' of tokens."
      },
      "totalStakedTokens()": {
        "notice": "Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer."
      },
      "unstake(uint256)": {
        "notice": "Unstake '_amount' of tokens from '_account'."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw '_amount' of tokens previously unstaked by '_account'."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2048,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2051,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5620,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "steak",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20)2712"
      },
      {
        "astId": 5623,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "tenderToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITenderToken)15480"
      },
      {
        "astId": 5626,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "tenderFarm",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITenderFarm)4846"
      },
      {
        "astId": 5629,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "tenderSwap",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITenderSwap)9537"
      },
      {
        "astId": 5631,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "node",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5633,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "protocolFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5635,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "liquidityFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 5637,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "currentPrincipal",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5639,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "gov",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 8744,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "maticStakeManager",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 8747,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "matic",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IMatic)8714"
      },
      {
        "astId": 8750,
        "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
        "label": "withdrawLocks",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Locks)6489_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2712": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMatic)8714": {
        "encoding": "inplace",
        "label": "contract IMatic",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderFarm)4846": {
        "encoding": "inplace",
        "label": "contract ITenderFarm",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderSwap)9537": {
        "encoding": "inplace",
        "label": "contract ITenderSwap",
        "numberOfBytes": "20"
      },
      "t_contract(ITenderToken)15480": {
        "encoding": "inplace",
        "label": "contract ITenderToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(WithdrawLock)6481_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WithdrawalLocks.WithdrawLock)",
        "numberOfBytes": "32",
        "value": "t_struct(WithdrawLock)6481_storage"
      },
      "t_struct(Locks)6489_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawalLocks.Locks",
        "members": [
          {
            "astId": 6486,
            "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
            "label": "withdrawals",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(WithdrawLock)6481_storage)"
          },
          {
            "astId": 6488,
            "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
            "label": "nextWithdrawLockID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(WithdrawLock)6481_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawalLocks.WithdrawLock",
        "members": [
          {
            "astId": 6478,
            "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6480,
            "contract": "contracts/tenderizer/integrations/matic/Matic.sol:Matic",
            "label": "account",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}